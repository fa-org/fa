
// Generated from FaParser.g4 by ANTLR 4.10.1


#include "FaParserVisitor.h"

#include "FaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct FaParserStaticData final {
  FaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FaParserStaticData(const FaParserStaticData&) = delete;
  FaParserStaticData(FaParserStaticData&&) = delete;
  FaParserStaticData& operator=(const FaParserStaticData&) = delete;
  FaParserStaticData& operator=(FaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag faparserParserOnceFlag;
FaParserStaticData *faparserParserStaticData = nullptr;

void faparserParserInitialize() {
  assert(faparserParserStaticData == nullptr);
  auto staticData = std::make_unique<FaParserStaticData>(
    std::vector<std::string>{
      "shiftLAssignOp", "shiftRAssignOp", "allAssignOp", "shiftLOp", "shiftROp", 
      "endl", "endl2", "quotFangL", "quotFangR", "quotJianL", "quotJianR", 
      "quotHuaL", "quotHuaR", "quotYuanL", "quotYuanR", "selfOp2", "compareOp2", 
      "changeOp2", "allOp2", "intNum", "floatNum", "formatString1Part", 
      "formatString1", "formatString2Part", "formatString2", "stringLiteral", 
      "literal", "ids", "typeAfter", "typeTuple", "types", "type", "argAttr", 
      "typeVar", "typeVarList", "typeWrapVar1", "typeWrapVarList1", "typeWrapVar2", 
      "typeWrapVarList2", "typeWrapVar3", "typeWrapVarList3", "typeWrapVar4", 
      "typeWrapVarList4", "quotStmtPart", "ifStmt", "quotStmtExpr", "ifExpr", 
      "whileStmt", "whileStmt2", "forHeader1", "forHeader2", "forHeader", 
      "forStmt", "switchStmtPart2Last", "quotStmtExprWrap", "switchExprPartLast", 
      "switchStmtPart", "switchStmt", "switchStmtPart2", "switchStmt2", 
      "switchExprPart", "switchExpr1", "switchExprPart2", "switchExpr2", 
      "quotExpr", "tupleExprItem", "tupleExpr", "exprOpt", "newExprItem", 
      "newExpr1", "newExpr2", "arrayExpr1Cond", "arrayExpr1", "arrayExpr2", 
      "arrayExpr3", "lambdaExpr", "strongExprBase", "strongExprPrefix", 
      "strongExprSuffix", "strongExpr", "middle3OpExpr", "middle2OpExpr", 
      "middleAstExpr", "middleExpr", "expr", "idAssignOpExpr", "defVarStmtPart", 
      "idAssignOpExpr2", "defVarStmt2Part", "defTypeStmt", "normalStmtPart", 
      "normalStmt", "stmt", "publicLevel", "blockTemplates", "itemName", 
      "typeNameTuple", "typeNameArgsTuple", "nameArgsTuple", "funcBody", 
      "annoArg", "annoPart", "annoBlock", "importedConstructFunc", "varAccesser", 
      "varAccesserItems", "classVar", "classFunc", "classBlock", "enumItem", 
      "enumBlock", "useStmt", "namespaceStmt", "program", "programEntry"
    },
    std::vector<std::string>{
      "", "'__cdecl'", "'__fastcall'", "'__stdcall'", "'annotation'", "'base'", 
      "'break'", "'calc'", "'continue'", "'class'", "'cast'", "'const'", 
      "'disperse'", "'do'", "'else'", "'enum'", "'expr'", "'for'", "'from'", 
      "'get'", "'if'", "'in'", "'is'", "'internal'", "'mut'", "'namespace'", 
      "'new'", "'operator'", "'params'", "'public'", "'protected'", "'private'", 
      "'return'", "'run'", "'select'", "'set'", "'signed'", "'static'", 
      "'stmt'", "'switchexpr'", "'switch'", "'type'", "'unsigned'", "'use'", 
      "'var'", "'when'", "'where'", "'while'", "'='", "", "", "", "", "", 
      "", "", "", "", "", "", "", "'~'", "'++'", "'--'", "'!'", "'.'", "'+'", 
      "'-'", "'*'", "'/'", "'%'", "'|'", "'&'", "'^'", "", "", "", "", "", 
      "'\\u003F'", "','", "'::'", "':'", "'\\n'", "';'", "'_'", "'['", "']'", 
      "'<'", "'>'", "'{'", "'}'", "'('", "')'", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "'{{'", "'}}'"
    },
    std::vector<std::string>{
      "", "CC__Cdecl", "CC__FastCall", "CC__StdCall", "Annotation", "Base", 
      "Break", "Calc", "Continue", "Class", "Cast", "Const", "Disperse", 
      "Do", "Else", "Enum", "Expr", "For", "From", "Get", "If", "In", "Is", 
      "Internal", "Mut", "Namespace", "New", "Operator", "Params", "Public", 
      "Protected", "Private", "Return", "Run", "Select", "Set", "Signed", 
      "Static", "Stmt", "SwitchExpr", "Switch", "Type", "Unsigned", "Use", 
      "AstClassVar", "When", "Where", "While", "AssignOp", "AddAssignOp", "SubAssignOp", 
      "StarAssignOp", "DivAssignOp", "ModAssignOp", "OrAssignOp", "AndAssignOp", 
      "XorAssignOp", "QusQusAssignOp", "StarStarAssignOp", "AndAndAssignOp", 
      "OrOrAssignOp", "ReverseOp", "AddAddOp", "SubSubOp", "Exclam", "PointOp", 
      "AddOp", "SubOp", "StarOp", "DivOp", "ModOp", "OrOp", "AndOp", "XorOp", 
      "PointPoint", "QusQusOp", "StarStarOp", "AndAndOp", "OrOrOp", "Qus", 
      "Comma", "ColonColon", "Colon", "Lf", "Semi", "Underline", "QFangL", 
      "QFangR", "LessThan", "GreatThan", "QHuaL", "QHuaR", "QYuanL", "QYuanR", 
      "LtEqualOp", "GtEqualOp", "EqualOp", "NotEqualOp", "ExprFuncDef", 
      "BoolLiteral", "HexLiteral", "IntLiteral", "FloatLiteral", "String1Literal", 
      "String2Literal", "String3Literal", "FmtString1", "FmtString2", "Id", 
      "Comment1", "Comment2", "WS", "QHuaLQHuaL", "QHuaRQHuaR", "QHuaLInside", 
      "RegularCharInside", "VerbatiumDoubleQuoteInside", "DoubleQuoteInside", 
      "RegularStringInside", "VerbatiumInsideString", "QHuaRInside", "FormatString"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,121,1393,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,1,0,1,0,1,0,1,1,
  	1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
  	2,252,8,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,4,5,261,8,5,11,5,12,5,262,1,6,5,
  	6,266,8,6,10,6,12,6,269,9,6,1,6,1,6,5,6,273,8,6,10,6,12,6,276,9,6,1,7,
  	1,7,3,7,280,8,7,1,8,3,8,283,8,8,1,8,1,8,1,9,1,9,3,9,289,8,9,1,10,3,10,
  	292,8,10,1,10,1,10,1,11,1,11,3,11,298,8,11,1,12,3,12,301,8,12,1,12,1,
  	12,1,13,1,13,3,13,307,8,13,1,14,3,14,310,8,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,327,8,15,1,16,
  	1,16,1,17,1,17,3,17,333,8,17,1,18,1,18,3,18,337,8,18,1,19,3,19,340,8,
  	19,1,19,1,19,1,20,3,20,345,8,20,1,20,1,20,1,21,1,21,1,21,3,21,352,8,21,
  	1,21,1,21,1,21,1,21,3,21,358,8,21,1,22,1,22,5,22,362,8,22,10,22,12,22,
  	365,9,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,377,8,
  	23,1,24,1,24,5,24,381,8,24,10,24,12,24,384,9,24,1,24,1,24,1,25,1,25,1,
  	25,1,25,1,25,3,25,393,8,25,1,26,1,26,1,26,1,26,1,26,3,26,400,8,26,1,27,
  	1,27,1,27,5,27,405,8,27,10,27,12,27,408,9,27,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,3,28,420,8,28,1,29,1,29,1,29,1,29,4,29,426,8,
  	29,11,29,12,29,427,1,29,1,29,1,30,1,30,1,30,5,30,435,8,30,10,30,12,30,
  	438,9,30,1,31,1,31,1,31,3,31,443,8,31,1,31,5,31,446,8,31,10,31,12,31,
  	449,9,31,1,32,1,32,1,33,1,33,3,33,455,8,33,1,34,1,34,1,34,5,34,460,8,
  	34,10,34,12,34,463,9,34,1,35,3,35,466,8,35,1,35,1,35,1,35,1,35,1,36,1,
  	36,1,36,5,36,475,8,36,10,36,12,36,478,9,36,1,37,3,37,481,8,37,1,37,1,
  	37,3,37,485,8,37,1,38,1,38,1,38,5,38,490,8,38,10,38,12,38,493,9,38,1,
  	39,3,39,496,8,39,1,39,3,39,499,8,39,1,39,1,39,1,40,1,40,1,40,5,40,506,
  	8,40,10,40,12,40,509,9,40,1,41,3,41,512,8,41,1,41,1,41,1,41,3,41,517,
  	8,41,1,42,1,42,1,42,5,42,522,8,42,10,42,12,42,525,9,42,1,43,1,43,5,43,
  	529,8,43,10,43,12,43,532,9,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,5,44,544,8,44,10,44,12,44,547,9,44,1,44,1,44,3,44,551,8,44,
  	1,44,1,44,1,45,1,45,5,45,557,8,45,10,45,12,45,560,9,45,1,45,1,45,1,45,
  	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,5,46,573,8,46,10,46,12,46,576,
  	9,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,585,8,47,10,47,12,47,588,
  	9,47,1,47,1,47,1,47,1,48,1,48,1,48,5,48,596,8,48,10,48,12,48,599,9,48,
  	1,48,1,48,1,48,1,48,1,48,1,49,1,49,3,49,608,8,49,1,49,1,49,1,49,1,49,
  	1,49,5,49,615,8,49,10,49,12,49,618,9,49,1,49,1,49,3,49,622,8,49,1,49,
  	1,49,1,49,1,50,1,50,3,50,629,8,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,
  	3,51,638,8,51,1,52,1,52,1,52,1,52,1,52,1,52,3,52,646,8,52,1,52,1,52,5,
  	52,650,8,52,10,52,12,52,653,9,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,
  	54,1,54,3,54,664,8,54,1,55,1,55,1,55,1,55,3,55,670,8,55,1,56,1,56,1,56,
  	3,56,675,8,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,5,57,684,8,57,10,57,
  	12,57,687,9,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,
  	5,59,700,8,59,10,59,12,59,703,9,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,
  	3,60,712,8,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,5,61,722,8,61,10,
  	61,12,61,725,9,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,
  	63,1,63,5,63,739,8,63,10,63,12,63,742,9,63,1,63,1,63,1,63,1,64,1,64,1,
  	64,1,64,1,65,1,65,3,65,753,8,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,4,
  	66,762,8,66,11,66,12,66,763,3,66,766,8,66,1,66,1,66,1,67,3,67,771,8,67,
  	1,68,1,68,1,68,3,68,776,8,68,1,69,1,69,3,69,780,8,69,1,69,1,69,1,69,1,
  	69,5,69,786,8,69,10,69,12,69,789,9,69,3,69,791,8,69,1,69,1,69,1,70,1,
  	70,3,70,797,8,70,1,70,1,70,1,70,1,70,5,70,803,8,70,10,70,12,70,806,9,
  	70,3,70,808,8,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,
  	72,1,72,5,72,822,8,72,10,72,12,72,825,9,72,1,72,1,72,3,72,829,8,72,1,
  	72,1,72,1,72,5,72,834,8,72,10,72,12,72,837,9,72,1,72,1,72,1,72,1,72,1,
  	73,1,73,1,73,1,73,5,73,847,8,73,10,73,12,73,850,9,73,3,73,852,8,73,1,
  	73,1,73,1,74,1,74,1,74,1,74,3,74,860,8,74,1,74,1,74,1,74,1,74,1,75,1,
  	75,1,75,1,75,3,75,870,8,75,1,75,1,75,1,75,1,75,1,75,1,75,5,75,878,8,75,
  	10,75,12,75,881,9,75,1,75,1,75,3,75,885,8,75,3,75,887,8,75,1,76,3,76,
  	890,8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,902,8,
  	76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,914,8,77,3,
  	77,916,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,5,78,925,8,78,10,78,12,
  	78,928,9,78,3,78,930,8,78,1,78,1,78,1,78,1,78,1,78,1,78,5,78,938,8,78,
  	10,78,12,78,941,9,78,1,78,1,78,1,78,1,78,1,78,1,78,5,78,949,8,78,10,78,
  	12,78,952,9,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,
  	964,8,78,3,78,966,8,78,1,79,5,79,969,8,79,10,79,12,79,972,9,79,1,79,1,
  	79,5,79,976,8,79,10,79,12,79,979,9,79,1,80,1,80,1,80,1,80,1,80,1,80,1,
  	81,1,81,1,81,1,81,5,81,991,8,81,10,81,12,81,994,9,81,1,82,1,82,1,82,1,
  	82,3,82,1000,8,82,1,83,3,83,1003,8,83,1,83,1,83,1,83,3,83,1008,8,83,1,
  	84,1,84,1,84,4,84,1013,8,84,11,84,12,84,1014,1,84,1,84,1,84,1,84,3,84,
  	1021,8,84,1,84,3,84,1024,8,84,1,85,1,85,1,85,3,85,1029,8,85,1,85,1,85,
  	1,85,1,86,1,86,1,86,1,86,5,86,1038,8,86,10,86,12,86,1041,9,86,1,87,1,
  	87,1,87,1,87,1,88,1,88,1,88,1,88,5,88,1051,8,88,10,88,12,88,1054,9,88,
  	1,89,1,89,1,89,1,89,1,89,1,89,5,89,1062,8,89,10,89,12,89,1065,9,89,1,
  	89,1,89,1,90,3,90,1070,8,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1078,8,
  	90,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,
  	92,1093,8,92,1,93,1,93,1,94,1,94,1,94,1,94,5,94,1101,8,94,10,94,12,94,
  	1104,9,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,3,95,1113,8,95,3,95,1115,
  	8,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1124,8,96,1,97,1,97,3,97,
  	1128,8,97,1,97,1,97,3,97,1132,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
  	3,97,1141,8,97,1,97,1,97,3,97,1145,8,97,1,97,1,97,3,97,1149,8,97,1,98,
  	1,98,1,98,1,98,3,98,1155,8,98,1,98,1,98,1,99,1,99,1,99,1,99,5,99,1163,
  	8,99,10,99,12,99,1166,9,99,1,99,1,99,3,99,1170,8,99,1,100,1,100,1,100,
  	1,100,1,101,1,101,1,101,1,101,1,101,5,101,1181,8,101,10,101,12,101,1184,
  	9,101,1,101,3,101,1187,8,101,1,101,1,101,3,101,1191,8,101,1,101,1,101,
  	1,102,5,102,1196,8,102,10,102,12,102,1199,9,102,1,102,1,102,1,102,1,102,
  	1,102,5,102,1206,8,102,10,102,12,102,1209,9,102,1,102,1,102,1,102,1,103,
  	5,103,1215,8,103,10,103,12,103,1218,9,103,1,103,3,103,1221,8,103,1,103,
  	1,103,1,103,1,104,3,104,1227,8,104,1,104,1,104,3,104,1231,8,104,1,105,
  	1,105,1,105,1,105,5,105,1237,8,105,10,105,12,105,1240,9,105,1,106,5,106,
  	1243,8,106,10,106,12,106,1246,9,106,1,106,3,106,1249,8,106,1,106,3,106,
  	1252,8,106,1,106,1,106,1,106,1,106,1,106,3,106,1259,8,106,1,106,1,106,
  	3,106,1263,8,106,1,106,1,106,1,107,5,107,1268,8,107,10,107,12,107,1271,
  	9,107,1,107,3,107,1274,8,107,1,107,3,107,1277,8,107,1,107,1,107,3,107,
  	1281,8,107,1,107,1,107,1,108,5,108,1286,8,108,10,108,12,108,1289,9,108,
  	1,108,3,108,1292,8,108,1,108,1,108,1,108,3,108,1297,8,108,1,108,1,108,
  	1,108,1,108,5,108,1303,8,108,10,108,12,108,1306,9,108,1,108,1,108,1,108,
  	1,109,5,109,1312,8,109,10,109,12,109,1315,9,109,1,109,1,109,1,109,1,109,
  	1,109,3,109,1322,8,109,1,110,5,110,1325,8,110,10,110,12,110,1328,9,110,
  	1,110,3,110,1331,8,110,1,110,1,110,1,110,3,110,1336,8,110,1,110,1,110,
  	1,110,1,110,5,110,1342,8,110,10,110,12,110,1345,9,110,1,110,1,110,3,110,
  	1349,8,110,1,110,1,110,1,110,1,111,1,111,1,111,3,111,1357,8,111,1,111,
  	1,111,1,111,1,112,1,112,1,112,1,112,1,113,5,113,1367,8,113,10,113,12,
  	113,1370,9,113,1,113,5,113,1373,8,113,10,113,12,113,1376,9,113,1,113,
  	3,113,1379,8,113,1,113,1,113,1,113,1,113,5,113,1385,8,113,10,113,12,113,
  	1388,9,113,1,114,1,114,1,114,1,114,0,0,115,0,2,4,6,8,10,12,14,16,18,20,
  	22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
  	68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
  	148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
  	184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
  	220,222,224,226,228,0,7,1,0,83,84,2,0,88,89,94,97,2,0,5,5,101,101,3,0,
  	12,12,24,24,28,28,1,0,33,34,2,0,23,23,29,31,2,0,19,19,35,35,1514,0,230,
  	1,0,0,0,2,233,1,0,0,0,4,251,1,0,0,0,6,253,1,0,0,0,8,256,1,0,0,0,10,260,
  	1,0,0,0,12,267,1,0,0,0,14,277,1,0,0,0,16,282,1,0,0,0,18,286,1,0,0,0,20,
  	291,1,0,0,0,22,295,1,0,0,0,24,300,1,0,0,0,26,304,1,0,0,0,28,309,1,0,0,
  	0,30,326,1,0,0,0,32,328,1,0,0,0,34,332,1,0,0,0,36,336,1,0,0,0,38,339,
  	1,0,0,0,40,344,1,0,0,0,42,357,1,0,0,0,44,359,1,0,0,0,46,376,1,0,0,0,48,
  	378,1,0,0,0,50,392,1,0,0,0,52,399,1,0,0,0,54,401,1,0,0,0,56,419,1,0,0,
  	0,58,421,1,0,0,0,60,431,1,0,0,0,62,442,1,0,0,0,64,450,1,0,0,0,66,452,
  	1,0,0,0,68,456,1,0,0,0,70,465,1,0,0,0,72,471,1,0,0,0,74,480,1,0,0,0,76,
  	486,1,0,0,0,78,498,1,0,0,0,80,502,1,0,0,0,82,511,1,0,0,0,84,518,1,0,0,
  	0,86,526,1,0,0,0,88,535,1,0,0,0,90,554,1,0,0,0,92,564,1,0,0,0,94,580,
  	1,0,0,0,96,592,1,0,0,0,98,607,1,0,0,0,100,628,1,0,0,0,102,637,1,0,0,0,
  	104,639,1,0,0,0,106,657,1,0,0,0,108,663,1,0,0,0,110,665,1,0,0,0,112,671,
  	1,0,0,0,114,679,1,0,0,0,116,691,1,0,0,0,118,696,1,0,0,0,120,708,1,0,0,
  	0,122,717,1,0,0,0,124,729,1,0,0,0,126,735,1,0,0,0,128,746,1,0,0,0,130,
  	752,1,0,0,0,132,756,1,0,0,0,134,770,1,0,0,0,136,772,1,0,0,0,138,777,1,
  	0,0,0,140,794,1,0,0,0,142,811,1,0,0,0,144,814,1,0,0,0,146,842,1,0,0,0,
  	148,855,1,0,0,0,150,886,1,0,0,0,152,901,1,0,0,0,154,915,1,0,0,0,156,965,
  	1,0,0,0,158,970,1,0,0,0,160,980,1,0,0,0,162,986,1,0,0,0,164,999,1,0,0,
  	0,166,1002,1,0,0,0,168,1023,1,0,0,0,170,1025,1,0,0,0,172,1033,1,0,0,0,
  	174,1042,1,0,0,0,176,1046,1,0,0,0,178,1055,1,0,0,0,180,1077,1,0,0,0,182,
  	1079,1,0,0,0,184,1092,1,0,0,0,186,1094,1,0,0,0,188,1096,1,0,0,0,190,1114,
  	1,0,0,0,192,1123,1,0,0,0,194,1148,1,0,0,0,196,1150,1,0,0,0,198,1169,1,
  	0,0,0,200,1171,1,0,0,0,202,1175,1,0,0,0,204,1197,1,0,0,0,206,1216,1,0,
  	0,0,208,1226,1,0,0,0,210,1232,1,0,0,0,212,1244,1,0,0,0,214,1269,1,0,0,
  	0,216,1287,1,0,0,0,218,1313,1,0,0,0,220,1326,1,0,0,0,222,1353,1,0,0,0,
  	224,1361,1,0,0,0,226,1368,1,0,0,0,228,1389,1,0,0,0,230,231,3,6,3,0,231,
  	232,5,48,0,0,232,1,1,0,0,0,233,234,3,8,4,0,234,235,5,48,0,0,235,3,1,0,
  	0,0,236,252,5,48,0,0,237,252,5,57,0,0,238,252,5,49,0,0,239,252,5,50,0,
  	0,240,252,5,51,0,0,241,252,5,58,0,0,242,252,5,52,0,0,243,252,5,53,0,0,
  	244,252,5,55,0,0,245,252,5,54,0,0,246,252,5,56,0,0,247,252,5,59,0,0,248,
  	252,5,60,0,0,249,252,3,0,0,0,250,252,3,2,1,0,251,236,1,0,0,0,251,237,
  	1,0,0,0,251,238,1,0,0,0,251,239,1,0,0,0,251,240,1,0,0,0,251,241,1,0,0,
  	0,251,242,1,0,0,0,251,243,1,0,0,0,251,244,1,0,0,0,251,245,1,0,0,0,251,
  	246,1,0,0,0,251,247,1,0,0,0,251,248,1,0,0,0,251,249,1,0,0,0,251,250,1,
  	0,0,0,252,5,1,0,0,0,253,254,5,88,0,0,254,255,5,88,0,0,255,7,1,0,0,0,256,
  	257,5,89,0,0,257,258,5,89,0,0,258,9,1,0,0,0,259,261,7,0,0,0,260,259,1,
  	0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,11,1,0,0,0,
  	264,266,5,83,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,
  	268,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,274,5,80,0,0,271,273,
  	5,83,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,
  	0,0,275,13,1,0,0,0,276,274,1,0,0,0,277,279,5,86,0,0,278,280,3,10,5,0,
  	279,278,1,0,0,0,279,280,1,0,0,0,280,15,1,0,0,0,281,283,3,10,5,0,282,281,
  	1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,285,5,87,0,0,285,17,1,0,0,
  	0,286,288,5,88,0,0,287,289,3,10,5,0,288,287,1,0,0,0,288,289,1,0,0,0,289,
  	19,1,0,0,0,290,292,3,10,5,0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,1,
  	0,0,0,293,294,5,89,0,0,294,21,1,0,0,0,295,297,5,90,0,0,296,298,3,10,5,
  	0,297,296,1,0,0,0,297,298,1,0,0,0,298,23,1,0,0,0,299,301,3,10,5,0,300,
  	299,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,303,5,91,0,0,303,25,1,
  	0,0,0,304,306,5,92,0,0,305,307,3,10,5,0,306,305,1,0,0,0,306,307,1,0,0,
  	0,307,27,1,0,0,0,308,310,3,10,5,0,309,308,1,0,0,0,309,310,1,0,0,0,310,
  	311,1,0,0,0,311,312,5,93,0,0,312,29,1,0,0,0,313,327,5,66,0,0,314,327,
  	5,67,0,0,315,327,5,68,0,0,316,327,5,69,0,0,317,327,5,76,0,0,318,327,5,
  	70,0,0,319,327,5,72,0,0,320,327,5,71,0,0,321,327,5,73,0,0,322,327,5,77,
  	0,0,323,327,5,78,0,0,324,327,3,6,3,0,325,327,3,8,4,0,326,313,1,0,0,0,
  	326,314,1,0,0,0,326,315,1,0,0,0,326,316,1,0,0,0,326,317,1,0,0,0,326,318,
  	1,0,0,0,326,319,1,0,0,0,326,320,1,0,0,0,326,321,1,0,0,0,326,322,1,0,0,
  	0,326,323,1,0,0,0,326,324,1,0,0,0,326,325,1,0,0,0,327,31,1,0,0,0,328,
  	329,7,1,0,0,329,33,1,0,0,0,330,333,5,75,0,0,331,333,3,32,16,0,332,330,
  	1,0,0,0,332,331,1,0,0,0,333,35,1,0,0,0,334,337,3,30,15,0,335,337,3,34,
  	17,0,336,334,1,0,0,0,336,335,1,0,0,0,337,37,1,0,0,0,338,340,5,67,0,0,
  	339,338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,5,101,0,0,342,
  	39,1,0,0,0,343,345,5,67,0,0,344,343,1,0,0,0,344,345,1,0,0,0,345,346,1,
  	0,0,0,346,347,5,102,0,0,347,41,1,0,0,0,348,351,3,166,83,0,349,350,5,82,
  	0,0,350,352,5,121,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,358,1,0,0,0,
  	353,358,5,112,0,0,354,358,5,113,0,0,355,358,5,115,0,0,356,358,5,118,0,
  	0,357,348,1,0,0,0,357,353,1,0,0,0,357,354,1,0,0,0,357,355,1,0,0,0,357,
  	356,1,0,0,0,358,43,1,0,0,0,359,363,5,106,0,0,360,362,3,42,21,0,361,360,
  	1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,366,1,0,0,
  	0,365,363,1,0,0,0,366,367,5,117,0,0,367,45,1,0,0,0,368,369,3,166,83,0,
  	369,370,5,82,0,0,370,371,5,121,0,0,371,377,1,0,0,0,372,377,5,112,0,0,
  	373,377,5,113,0,0,374,377,5,116,0,0,375,377,5,119,0,0,376,368,1,0,0,0,
  	376,372,1,0,0,0,376,373,1,0,0,0,376,374,1,0,0,0,376,375,1,0,0,0,377,47,
  	1,0,0,0,378,382,5,107,0,0,379,381,3,46,23,0,380,379,1,0,0,0,381,384,1,
  	0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,382,1,0,0,0,
  	385,386,5,117,0,0,386,49,1,0,0,0,387,393,5,103,0,0,388,393,5,104,0,0,
  	389,393,5,105,0,0,390,393,3,44,22,0,391,393,3,48,24,0,392,387,1,0,0,0,
  	392,388,1,0,0,0,392,389,1,0,0,0,392,390,1,0,0,0,392,391,1,0,0,0,393,51,
  	1,0,0,0,394,400,5,99,0,0,395,400,5,100,0,0,396,400,3,38,19,0,397,400,
  	3,40,20,0,398,400,3,50,25,0,399,394,1,0,0,0,399,395,1,0,0,0,399,396,1,
  	0,0,0,399,397,1,0,0,0,399,398,1,0,0,0,400,53,1,0,0,0,401,406,5,108,0,
  	0,402,403,5,65,0,0,403,405,5,108,0,0,404,402,1,0,0,0,405,408,1,0,0,0,
  	406,404,1,0,0,0,406,407,1,0,0,0,407,55,1,0,0,0,408,406,1,0,0,0,409,410,
  	3,14,7,0,410,411,3,16,8,0,411,420,1,0,0,0,412,420,5,79,0,0,413,414,5,
  	81,0,0,414,420,7,2,0,0,415,416,3,18,9,0,416,417,3,60,30,0,417,418,3,20,
  	10,0,418,420,1,0,0,0,419,409,1,0,0,0,419,412,1,0,0,0,419,413,1,0,0,0,
  	419,415,1,0,0,0,420,57,1,0,0,0,421,422,3,26,13,0,422,425,3,66,33,0,423,
  	424,5,80,0,0,424,426,3,66,33,0,425,423,1,0,0,0,426,427,1,0,0,0,427,425,
  	1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,430,3,28,14,0,430,59,1,0,
  	0,0,431,436,3,62,31,0,432,433,5,80,0,0,433,435,3,62,31,0,434,432,1,0,
  	0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,61,1,0,0,0,438,
  	436,1,0,0,0,439,443,3,54,27,0,440,443,3,58,29,0,441,443,5,41,0,0,442,
  	439,1,0,0,0,442,440,1,0,0,0,442,441,1,0,0,0,443,447,1,0,0,0,444,446,3,
  	56,28,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,
  	0,448,63,1,0,0,0,449,447,1,0,0,0,450,451,7,3,0,0,451,65,1,0,0,0,452,454,
  	3,62,31,0,453,455,5,108,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,67,1,
  	0,0,0,456,461,3,66,33,0,457,458,5,80,0,0,458,460,3,66,33,0,459,457,1,
  	0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,69,1,0,0,0,
  	463,461,1,0,0,0,464,466,3,64,32,0,465,464,1,0,0,0,465,466,1,0,0,0,466,
  	467,1,0,0,0,467,468,5,108,0,0,468,469,5,82,0,0,469,470,3,62,31,0,470,
  	71,1,0,0,0,471,476,3,70,35,0,472,473,5,80,0,0,473,475,3,70,35,0,474,472,
  	1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,73,1,0,0,
  	0,478,476,1,0,0,0,479,481,3,64,32,0,480,479,1,0,0,0,480,481,1,0,0,0,481,
  	482,1,0,0,0,482,484,3,62,31,0,483,485,5,108,0,0,484,483,1,0,0,0,484,485,
  	1,0,0,0,485,75,1,0,0,0,486,491,3,74,37,0,487,488,5,80,0,0,488,490,3,74,
  	37,0,489,487,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,
  	492,77,1,0,0,0,493,491,1,0,0,0,494,496,3,64,32,0,495,494,1,0,0,0,495,
  	496,1,0,0,0,496,497,1,0,0,0,497,499,3,62,31,0,498,495,1,0,0,0,498,499,
  	1,0,0,0,499,500,1,0,0,0,500,501,5,108,0,0,501,79,1,0,0,0,502,507,3,78,
  	39,0,503,504,5,80,0,0,504,506,3,78,39,0,505,503,1,0,0,0,506,509,1,0,0,
  	0,507,505,1,0,0,0,507,508,1,0,0,0,508,81,1,0,0,0,509,507,1,0,0,0,510,
  	512,3,64,32,0,511,510,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,516,
  	5,108,0,0,514,515,5,82,0,0,515,517,3,62,31,0,516,514,1,0,0,0,516,517,
  	1,0,0,0,517,83,1,0,0,0,518,523,3,82,41,0,519,520,5,80,0,0,520,522,3,82,
  	41,0,521,519,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,
  	524,85,1,0,0,0,525,523,1,0,0,0,526,530,3,22,11,0,527,529,3,184,92,0,528,
  	527,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,533,1,
  	0,0,0,532,530,1,0,0,0,533,534,3,24,12,0,534,87,1,0,0,0,535,536,5,20,0,
  	0,536,537,3,166,83,0,537,545,3,86,43,0,538,539,5,14,0,0,539,540,5,20,
  	0,0,540,541,3,166,83,0,541,542,3,86,43,0,542,544,1,0,0,0,543,538,1,0,
  	0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,550,1,0,0,0,547,
  	545,1,0,0,0,548,549,5,14,0,0,549,551,3,86,43,0,550,548,1,0,0,0,550,551,
  	1,0,0,0,551,552,1,0,0,0,552,553,3,10,5,0,553,89,1,0,0,0,554,558,3,22,
  	11,0,555,557,3,184,92,0,556,555,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,
  	0,558,559,1,0,0,0,559,561,1,0,0,0,560,558,1,0,0,0,561,562,3,168,84,0,
  	562,563,3,24,12,0,563,91,1,0,0,0,564,565,5,20,0,0,565,566,3,166,83,0,
  	566,574,3,90,45,0,567,568,5,14,0,0,568,569,5,20,0,0,569,570,3,166,83,
  	0,570,571,3,90,45,0,571,573,1,0,0,0,572,567,1,0,0,0,573,576,1,0,0,0,574,
  	572,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,574,1,0,0,0,577,578,5,
  	14,0,0,578,579,3,90,45,0,579,93,1,0,0,0,580,581,5,47,0,0,581,582,3,166,
  	83,0,582,586,3,22,11,0,583,585,3,184,92,0,584,583,1,0,0,0,585,588,1,0,
  	0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,586,1,0,0,0,589,
  	590,3,24,12,0,590,591,3,10,5,0,591,95,1,0,0,0,592,593,5,13,0,0,593,597,
  	3,22,11,0,594,596,3,184,92,0,595,594,1,0,0,0,596,599,1,0,0,0,597,595,
  	1,0,0,0,597,598,1,0,0,0,598,600,1,0,0,0,599,597,1,0,0,0,600,601,3,24,
  	12,0,601,602,5,47,0,0,602,603,3,166,83,0,603,604,3,10,5,0,604,97,1,0,
  	0,0,605,608,5,44,0,0,606,608,3,62,31,0,607,605,1,0,0,0,607,606,1,0,0,
  	0,608,621,1,0,0,0,609,622,5,108,0,0,610,611,3,26,13,0,611,616,5,108,0,
  	0,612,613,5,80,0,0,613,615,5,108,0,0,614,612,1,0,0,0,615,618,1,0,0,0,
  	616,614,1,0,0,0,616,617,1,0,0,0,617,619,1,0,0,0,618,616,1,0,0,0,619,620,
  	3,28,14,0,620,622,1,0,0,0,621,609,1,0,0,0,621,610,1,0,0,0,622,623,1,0,
  	0,0,623,624,5,82,0,0,624,625,3,166,83,0,625,99,1,0,0,0,626,629,3,172,
  	86,0,627,629,3,176,88,0,628,626,1,0,0,0,628,627,1,0,0,0,629,630,1,0,0,
  	0,630,631,5,84,0,0,631,632,3,166,83,0,632,633,5,84,0,0,633,634,3,168,
  	84,0,634,101,1,0,0,0,635,638,3,98,49,0,636,638,3,100,50,0,637,635,1,0,
  	0,0,637,636,1,0,0,0,638,103,1,0,0,0,639,645,5,17,0,0,640,646,3,102,51,
  	0,641,642,3,26,13,0,642,643,3,102,51,0,643,644,3,28,14,0,644,646,1,0,
  	0,0,645,640,1,0,0,0,645,641,1,0,0,0,646,647,1,0,0,0,647,651,3,22,11,0,
  	648,650,3,184,92,0,649,648,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,
  	652,1,0,0,0,652,654,1,0,0,0,653,651,1,0,0,0,654,655,3,24,12,0,655,656,
  	3,10,5,0,656,105,1,0,0,0,657,658,5,85,0,0,658,659,5,98,0,0,659,660,3,
  	184,92,0,660,107,1,0,0,0,661,664,3,90,45,0,662,664,3,168,84,0,663,661,
  	1,0,0,0,663,662,1,0,0,0,664,109,1,0,0,0,665,666,5,85,0,0,666,667,5,98,
  	0,0,667,669,3,108,54,0,668,670,3,12,6,0,669,668,1,0,0,0,669,670,1,0,0,
  	0,670,111,1,0,0,0,671,674,3,168,84,0,672,673,5,45,0,0,673,675,3,168,84,
  	0,674,672,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,677,5,98,0,0,677,
  	678,3,184,92,0,678,113,1,0,0,0,679,680,5,40,0,0,680,681,3,168,84,0,681,
  	685,3,22,11,0,682,684,3,112,56,0,683,682,1,0,0,0,684,687,1,0,0,0,685,
  	683,1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,687,685,1,0,0,0,688,689,3,
  	24,12,0,689,690,3,10,5,0,690,115,1,0,0,0,691,692,5,45,0,0,692,693,3,168,
  	84,0,693,694,5,98,0,0,694,695,3,184,92,0,695,117,1,0,0,0,696,697,5,40,
  	0,0,697,701,3,22,11,0,698,700,3,116,58,0,699,698,1,0,0,0,700,703,1,0,
  	0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,704,1,0,0,0,703,701,1,0,0,0,704,
  	705,3,106,53,0,705,706,3,24,12,0,706,707,3,10,5,0,707,119,1,0,0,0,708,
  	711,3,168,84,0,709,710,5,45,0,0,710,712,3,168,84,0,711,709,1,0,0,0,711,
  	712,1,0,0,0,712,713,1,0,0,0,713,714,5,98,0,0,714,715,3,108,54,0,715,716,
  	3,12,6,0,716,121,1,0,0,0,717,718,5,39,0,0,718,719,3,168,84,0,719,723,
  	3,22,11,0,720,722,3,120,60,0,721,720,1,0,0,0,722,725,1,0,0,0,723,721,
  	1,0,0,0,723,724,1,0,0,0,724,726,1,0,0,0,725,723,1,0,0,0,726,727,3,110,
  	55,0,727,728,3,24,12,0,728,123,1,0,0,0,729,730,5,45,0,0,730,731,3,168,
  	84,0,731,732,5,98,0,0,732,733,3,108,54,0,733,734,3,12,6,0,734,125,1,0,
  	0,0,735,736,5,39,0,0,736,740,3,22,11,0,737,739,3,124,62,0,738,737,1,0,
  	0,0,739,742,1,0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,743,1,0,0,0,742,
  	740,1,0,0,0,743,744,3,110,55,0,744,745,3,24,12,0,745,127,1,0,0,0,746,
  	747,3,26,13,0,747,748,3,168,84,0,748,749,3,28,14,0,749,129,1,0,0,0,750,
  	751,5,108,0,0,751,753,5,82,0,0,752,750,1,0,0,0,752,753,1,0,0,0,753,754,
  	1,0,0,0,754,755,3,166,83,0,755,131,1,0,0,0,756,757,3,26,13,0,757,765,
  	3,130,65,0,758,766,5,80,0,0,759,760,5,80,0,0,760,762,3,130,65,0,761,759,
  	1,0,0,0,762,763,1,0,0,0,763,761,1,0,0,0,763,764,1,0,0,0,764,766,1,0,0,
  	0,765,758,1,0,0,0,765,761,1,0,0,0,766,767,1,0,0,0,767,768,3,28,14,0,768,
  	133,1,0,0,0,769,771,3,168,84,0,770,769,1,0,0,0,770,771,1,0,0,0,771,135,
  	1,0,0,0,772,775,5,108,0,0,773,774,5,48,0,0,774,776,3,166,83,0,775,773,
  	1,0,0,0,775,776,1,0,0,0,776,137,1,0,0,0,777,779,5,26,0,0,778,780,3,62,
  	31,0,779,778,1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,790,3,22,11,
  	0,782,787,3,136,68,0,783,784,5,80,0,0,784,786,3,136,68,0,785,783,1,0,
  	0,0,786,789,1,0,0,0,787,785,1,0,0,0,787,788,1,0,0,0,788,791,1,0,0,0,789,
  	787,1,0,0,0,790,782,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,793,3,
  	24,12,0,793,139,1,0,0,0,794,796,5,26,0,0,795,797,3,62,31,0,796,795,1,
  	0,0,0,796,797,1,0,0,0,797,798,1,0,0,0,798,807,3,26,13,0,799,804,3,166,
  	83,0,800,801,5,80,0,0,801,803,3,166,83,0,802,800,1,0,0,0,803,806,1,0,
  	0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,808,1,0,0,0,806,804,1,0,0,0,807,
  	799,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,810,3,28,14,0,810,141,
  	1,0,0,0,811,812,5,46,0,0,812,813,3,166,83,0,813,143,1,0,0,0,814,815,3,
  	14,7,0,815,828,5,18,0,0,816,829,5,108,0,0,817,818,3,26,13,0,818,823,5,
  	108,0,0,819,820,5,80,0,0,820,822,5,108,0,0,821,819,1,0,0,0,822,825,1,
  	0,0,0,823,821,1,0,0,0,823,824,1,0,0,0,824,826,1,0,0,0,825,823,1,0,0,0,
  	826,827,3,28,14,0,827,829,1,0,0,0,828,816,1,0,0,0,828,817,1,0,0,0,829,
  	830,1,0,0,0,830,831,5,21,0,0,831,835,3,166,83,0,832,834,3,142,71,0,833,
  	832,1,0,0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,838,1,
  	0,0,0,837,835,1,0,0,0,838,839,7,4,0,0,839,840,3,166,83,0,840,841,3,16,
  	8,0,841,145,1,0,0,0,842,851,3,14,7,0,843,848,3,166,83,0,844,845,5,80,
  	0,0,845,847,3,166,83,0,846,844,1,0,0,0,847,850,1,0,0,0,848,846,1,0,0,
  	0,848,849,1,0,0,0,849,852,1,0,0,0,850,848,1,0,0,0,851,843,1,0,0,0,851,
  	852,1,0,0,0,852,853,1,0,0,0,853,854,3,16,8,0,854,147,1,0,0,0,855,856,
  	3,14,7,0,856,859,3,166,83,0,857,858,5,80,0,0,858,860,3,166,83,0,859,857,
  	1,0,0,0,859,860,1,0,0,0,860,861,1,0,0,0,861,862,5,74,0,0,862,863,3,166,
  	83,0,863,864,3,16,8,0,864,149,1,0,0,0,865,887,5,108,0,0,866,869,3,26,
  	13,0,867,870,3,80,40,0,868,870,3,84,42,0,869,867,1,0,0,0,869,868,1,0,
  	0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,872,3,28,14,0,872,873,1,0,0,0,
  	873,884,5,98,0,0,874,885,3,166,83,0,875,879,3,22,11,0,876,878,3,184,92,
  	0,877,876,1,0,0,0,878,881,1,0,0,0,879,877,1,0,0,0,879,880,1,0,0,0,880,
  	882,1,0,0,0,881,879,1,0,0,0,882,883,3,24,12,0,883,885,1,0,0,0,884,874,
  	1,0,0,0,884,875,1,0,0,0,885,887,1,0,0,0,886,865,1,0,0,0,886,866,1,0,0,
  	0,887,151,1,0,0,0,888,890,5,81,0,0,889,888,1,0,0,0,889,890,1,0,0,0,890,
  	891,1,0,0,0,891,902,3,54,27,0,892,902,3,52,26,0,893,902,3,150,75,0,894,
  	902,3,128,64,0,895,902,3,132,66,0,896,902,3,138,69,0,897,902,3,140,70,
  	0,898,902,3,144,72,0,899,902,3,146,73,0,900,902,3,148,74,0,901,889,1,
  	0,0,0,901,892,1,0,0,0,901,893,1,0,0,0,901,894,1,0,0,0,901,895,1,0,0,0,
  	901,896,1,0,0,0,901,897,1,0,0,0,901,898,1,0,0,0,901,899,1,0,0,0,901,900,
  	1,0,0,0,902,153,1,0,0,0,903,916,5,67,0,0,904,916,5,62,0,0,905,916,5,63,
  	0,0,906,916,5,61,0,0,907,916,5,64,0,0,908,913,5,10,0,0,909,910,3,18,9,
  	0,910,911,3,62,31,0,911,912,3,20,10,0,912,914,1,0,0,0,913,909,1,0,0,0,
  	913,914,1,0,0,0,914,916,1,0,0,0,915,903,1,0,0,0,915,904,1,0,0,0,915,905,
  	1,0,0,0,915,906,1,0,0,0,915,907,1,0,0,0,915,908,1,0,0,0,916,155,1,0,0,
  	0,917,966,5,62,0,0,918,966,5,63,0,0,919,929,3,26,13,0,920,926,3,166,83,
  	0,921,922,3,12,6,0,922,923,3,166,83,0,923,925,1,0,0,0,924,921,1,0,0,0,
  	925,928,1,0,0,0,926,924,1,0,0,0,926,927,1,0,0,0,927,930,1,0,0,0,928,926,
  	1,0,0,0,929,920,1,0,0,0,929,930,1,0,0,0,930,931,1,0,0,0,931,932,3,28,
  	14,0,932,966,1,0,0,0,933,934,3,14,7,0,934,939,3,134,67,0,935,936,5,82,
  	0,0,936,938,3,134,67,0,937,935,1,0,0,0,938,941,1,0,0,0,939,937,1,0,0,
  	0,939,940,1,0,0,0,940,942,1,0,0,0,941,939,1,0,0,0,942,943,3,16,8,0,943,
  	966,1,0,0,0,944,945,3,18,9,0,945,950,3,62,31,0,946,947,5,80,0,0,947,949,
  	3,62,31,0,948,946,1,0,0,0,949,952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,
  	0,0,951,953,1,0,0,0,952,950,1,0,0,0,953,954,3,20,10,0,954,966,1,0,0,0,
  	955,956,5,65,0,0,956,966,5,108,0,0,957,958,5,79,0,0,958,959,5,65,0,0,
  	959,966,5,108,0,0,960,961,5,22,0,0,961,963,3,62,31,0,962,964,5,108,0,
  	0,963,962,1,0,0,0,963,964,1,0,0,0,964,966,1,0,0,0,965,917,1,0,0,0,965,
  	918,1,0,0,0,965,919,1,0,0,0,965,933,1,0,0,0,965,944,1,0,0,0,965,955,1,
  	0,0,0,965,957,1,0,0,0,965,960,1,0,0,0,966,157,1,0,0,0,967,969,3,154,77,
  	0,968,967,1,0,0,0,969,972,1,0,0,0,970,968,1,0,0,0,970,971,1,0,0,0,971,
  	973,1,0,0,0,972,970,1,0,0,0,973,977,3,152,76,0,974,976,3,156,78,0,975,
  	974,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,0,978,159,1,
  	0,0,0,979,977,1,0,0,0,980,981,3,158,79,0,981,982,5,79,0,0,982,983,3,158,
  	79,0,983,984,5,82,0,0,984,985,3,158,79,0,985,161,1,0,0,0,986,992,3,158,
  	79,0,987,988,3,36,18,0,988,989,3,158,79,0,989,991,1,0,0,0,990,987,1,0,
  	0,0,991,994,1,0,0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,163,1,0,0,0,994,
  	992,1,0,0,0,995,996,5,38,0,0,996,1000,3,180,90,0,997,998,5,16,0,0,998,
  	1000,3,162,81,0,999,995,1,0,0,0,999,997,1,0,0,0,1000,165,1,0,0,0,1001,
  	1003,5,7,0,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1007,1,0,0,0,1004,
  	1008,3,160,80,0,1005,1008,3,162,81,0,1006,1008,3,164,82,0,1007,1004,1,
  	0,0,0,1007,1005,1,0,0,0,1007,1006,1,0,0,0,1008,167,1,0,0,0,1009,1010,
  	3,158,79,0,1010,1011,3,4,2,0,1011,1013,1,0,0,0,1012,1009,1,0,0,0,1013,
  	1014,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,1020,1,0,0,0,1016,
  	1021,3,92,46,0,1017,1021,3,126,63,0,1018,1021,3,122,61,0,1019,1021,3,
  	166,83,0,1020,1016,1,0,0,0,1020,1017,1,0,0,0,1020,1018,1,0,0,0,1020,1019,
  	1,0,0,0,1021,1024,1,0,0,0,1022,1024,3,166,83,0,1023,1012,1,0,0,0,1023,
  	1022,1,0,0,0,1024,169,1,0,0,0,1025,1028,5,108,0,0,1026,1027,5,82,0,0,
  	1027,1029,3,62,31,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,1030,1,0,
  	0,0,1030,1031,5,48,0,0,1031,1032,3,166,83,0,1032,171,1,0,0,0,1033,1034,
  	5,44,0,0,1034,1039,3,170,85,0,1035,1036,5,80,0,0,1036,1038,3,170,85,0,
  	1037,1035,1,0,0,0,1038,1041,1,0,0,0,1039,1037,1,0,0,0,1039,1040,1,0,0,
  	0,1040,173,1,0,0,0,1041,1039,1,0,0,0,1042,1043,5,108,0,0,1043,1044,5,
  	48,0,0,1044,1045,3,166,83,0,1045,175,1,0,0,0,1046,1047,3,62,31,0,1047,
  	1052,3,174,87,0,1048,1049,5,80,0,0,1049,1051,3,174,87,0,1050,1048,1,0,
  	0,0,1051,1054,1,0,0,0,1052,1050,1,0,0,0,1052,1053,1,0,0,0,1053,177,1,
  	0,0,0,1054,1052,1,0,0,0,1055,1056,5,41,0,0,1056,1057,5,108,0,0,1057,1058,
  	5,48,0,0,1058,1063,3,62,31,0,1059,1060,5,78,0,0,1060,1062,3,62,31,0,1061,
  	1059,1,0,0,0,1062,1065,1,0,0,0,1063,1061,1,0,0,0,1063,1064,1,0,0,0,1064,
  	1066,1,0,0,0,1065,1063,1,0,0,0,1066,1067,3,10,5,0,1067,179,1,0,0,0,1068,
  	1070,5,32,0,0,1069,1068,1,0,0,0,1069,1070,1,0,0,0,1070,1071,1,0,0,0,1071,
  	1078,3,168,84,0,1072,1078,5,32,0,0,1073,1078,5,6,0,0,1074,1078,5,8,0,
  	0,1075,1078,3,172,86,0,1076,1078,3,176,88,0,1077,1069,1,0,0,0,1077,1072,
  	1,0,0,0,1077,1073,1,0,0,0,1077,1074,1,0,0,0,1077,1075,1,0,0,0,1077,1076,
  	1,0,0,0,1078,181,1,0,0,0,1079,1080,3,180,90,0,1080,1081,3,10,5,0,1081,
  	183,1,0,0,0,1082,1093,3,88,44,0,1083,1093,3,94,47,0,1084,1093,3,96,48,
  	0,1085,1093,3,104,52,0,1086,1087,3,86,43,0,1087,1088,3,10,5,0,1088,1093,
  	1,0,0,0,1089,1093,3,118,59,0,1090,1093,3,114,57,0,1091,1093,3,182,91,
  	0,1092,1082,1,0,0,0,1092,1083,1,0,0,0,1092,1084,1,0,0,0,1092,1085,1,0,
  	0,0,1092,1086,1,0,0,0,1092,1089,1,0,0,0,1092,1090,1,0,0,0,1092,1091,1,
  	0,0,0,1093,185,1,0,0,0,1094,1095,7,5,0,0,1095,187,1,0,0,0,1096,1097,3,
  	18,9,0,1097,1102,5,108,0,0,1098,1099,5,80,0,0,1099,1101,5,108,0,0,1100,
  	1098,1,0,0,0,1101,1104,1,0,0,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,
  	1105,1,0,0,0,1104,1102,1,0,0,0,1105,1106,3,20,10,0,1106,189,1,0,0,0,1107,
  	1115,5,108,0,0,1108,1112,5,27,0,0,1109,1113,3,36,18,0,1110,1111,5,86,
  	0,0,1111,1113,5,87,0,0,1112,1109,1,0,0,0,1112,1110,1,0,0,0,1113,1115,
  	1,0,0,0,1114,1107,1,0,0,0,1114,1108,1,0,0,0,1115,191,1,0,0,0,1116,1117,
  	3,190,95,0,1117,1118,5,82,0,0,1118,1119,3,62,31,0,1119,1124,1,0,0,0,1120,
  	1121,3,62,31,0,1121,1122,3,190,95,0,1122,1124,1,0,0,0,1123,1116,1,0,0,
  	0,1123,1120,1,0,0,0,1124,193,1,0,0,0,1125,1127,3,190,95,0,1126,1128,3,
  	188,94,0,1127,1126,1,0,0,0,1127,1128,1,0,0,0,1128,1129,1,0,0,0,1129,1131,
  	3,26,13,0,1130,1132,3,72,36,0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,
  	1133,1,0,0,0,1133,1134,3,28,14,0,1134,1135,5,82,0,0,1135,1136,3,62,31,
  	0,1136,1149,1,0,0,0,1137,1138,3,62,31,0,1138,1140,3,190,95,0,1139,1141,
  	3,188,94,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1142,1,0,0,0,1142,
  	1144,3,26,13,0,1143,1145,3,76,38,0,1144,1143,1,0,0,0,1144,1145,1,0,0,
  	0,1145,1146,1,0,0,0,1146,1147,3,28,14,0,1147,1149,1,0,0,0,1148,1125,1,
  	0,0,0,1148,1137,1,0,0,0,1149,195,1,0,0,0,1150,1151,5,108,0,0,1151,1154,
  	3,26,13,0,1152,1155,3,72,36,0,1153,1155,3,76,38,0,1154,1152,1,0,0,0,1154,
  	1153,1,0,0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,1157,3,28,14,0,
  	1157,197,1,0,0,0,1158,1159,5,98,0,0,1159,1170,3,168,84,0,1160,1164,3,
  	22,11,0,1161,1163,3,184,92,0,1162,1161,1,0,0,0,1163,1166,1,0,0,0,1164,
  	1162,1,0,0,0,1164,1165,1,0,0,0,1165,1167,1,0,0,0,1166,1164,1,0,0,0,1167,
  	1168,3,24,12,0,1168,1170,1,0,0,0,1169,1158,1,0,0,0,1169,1160,1,0,0,0,
  	1170,199,1,0,0,0,1171,1172,5,108,0,0,1172,1173,5,48,0,0,1173,1174,3,166,
  	83,0,1174,201,1,0,0,0,1175,1190,5,108,0,0,1176,1186,3,22,11,0,1177,1178,
  	3,200,100,0,1178,1179,3,12,6,0,1179,1181,1,0,0,0,1180,1177,1,0,0,0,1181,
  	1184,1,0,0,0,1182,1180,1,0,0,0,1182,1183,1,0,0,0,1183,1185,1,0,0,0,1184,
  	1182,1,0,0,0,1185,1187,3,200,100,0,1186,1182,1,0,0,0,1186,1187,1,0,0,
  	0,1187,1188,1,0,0,0,1188,1189,3,24,12,0,1189,1191,1,0,0,0,1190,1176,1,
  	0,0,0,1190,1191,1,0,0,0,1191,1192,1,0,0,0,1192,1193,3,10,5,0,1193,203,
  	1,0,0,0,1194,1196,3,202,101,0,1195,1194,1,0,0,0,1196,1199,1,0,0,0,1197,
  	1195,1,0,0,0,1197,1198,1,0,0,0,1198,1200,1,0,0,0,1199,1197,1,0,0,0,1200,
  	1201,5,4,0,0,1201,1202,5,108,0,0,1202,1207,3,22,11,0,1203,1206,3,212,
  	106,0,1204,1206,3,214,107,0,1205,1203,1,0,0,0,1205,1204,1,0,0,0,1206,
  	1209,1,0,0,0,1207,1205,1,0,0,0,1207,1208,1,0,0,0,1208,1210,1,0,0,0,1209,
  	1207,1,0,0,0,1210,1211,3,24,12,0,1211,1212,3,10,5,0,1212,205,1,0,0,0,
  	1213,1215,3,202,101,0,1214,1213,1,0,0,0,1215,1218,1,0,0,0,1216,1214,1,
  	0,0,0,1216,1217,1,0,0,0,1217,1220,1,0,0,0,1218,1216,1,0,0,0,1219,1221,
  	3,186,93,0,1220,1219,1,0,0,0,1220,1221,1,0,0,0,1221,1222,1,0,0,0,1222,
  	1223,3,196,98,0,1223,1224,3,10,5,0,1224,207,1,0,0,0,1225,1227,3,186,93,
  	0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,1228,1,0,0,0,1228,1230,7,6,
  	0,0,1229,1231,3,198,99,0,1230,1229,1,0,0,0,1230,1231,1,0,0,0,1231,209,
  	1,0,0,0,1232,1238,3,208,104,0,1233,1234,3,10,5,0,1234,1235,3,208,104,
  	0,1235,1237,1,0,0,0,1236,1233,1,0,0,0,1237,1240,1,0,0,0,1238,1236,1,0,
  	0,0,1238,1239,1,0,0,0,1239,211,1,0,0,0,1240,1238,1,0,0,0,1241,1243,3,
  	202,101,0,1242,1241,1,0,0,0,1243,1246,1,0,0,0,1244,1242,1,0,0,0,1244,
  	1245,1,0,0,0,1245,1248,1,0,0,0,1246,1244,1,0,0,0,1247,1249,3,186,93,0,
  	1248,1247,1,0,0,0,1248,1249,1,0,0,0,1249,1251,1,0,0,0,1250,1252,5,37,
  	0,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1253,1,0,0,0,1253,1258,3,
  	192,96,0,1254,1255,3,22,11,0,1255,1256,3,210,105,0,1256,1257,3,24,12,
  	0,1257,1259,1,0,0,0,1258,1254,1,0,0,0,1258,1259,1,0,0,0,1259,1262,1,0,
  	0,0,1260,1261,5,48,0,0,1261,1263,3,166,83,0,1262,1260,1,0,0,0,1262,1263,
  	1,0,0,0,1263,1264,1,0,0,0,1264,1265,3,10,5,0,1265,213,1,0,0,0,1266,1268,
  	3,202,101,0,1267,1266,1,0,0,0,1268,1271,1,0,0,0,1269,1267,1,0,0,0,1269,
  	1270,1,0,0,0,1270,1273,1,0,0,0,1271,1269,1,0,0,0,1272,1274,3,186,93,0,
  	1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1276,1,0,0,0,1275,1277,5,37,
  	0,0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1278,1,0,0,0,1278,1280,3,
  	194,97,0,1279,1281,3,198,99,0,1280,1279,1,0,0,0,1280,1281,1,0,0,0,1281,
  	1282,1,0,0,0,1282,1283,3,10,5,0,1283,215,1,0,0,0,1284,1286,3,202,101,
  	0,1285,1284,1,0,0,0,1286,1289,1,0,0,0,1287,1285,1,0,0,0,1287,1288,1,0,
  	0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,1290,1292,3,186,93,0,1291,1290,
  	1,0,0,0,1291,1292,1,0,0,0,1292,1293,1,0,0,0,1293,1294,5,9,0,0,1294,1296,
  	5,108,0,0,1295,1297,3,188,94,0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,1297,
  	1298,1,0,0,0,1298,1304,3,22,11,0,1299,1303,3,212,106,0,1300,1303,3,214,
  	107,0,1301,1303,3,206,103,0,1302,1299,1,0,0,0,1302,1300,1,0,0,0,1302,
  	1301,1,0,0,0,1303,1306,1,0,0,0,1304,1302,1,0,0,0,1304,1305,1,0,0,0,1305,
  	1307,1,0,0,0,1306,1304,1,0,0,0,1307,1308,3,24,12,0,1308,1309,3,10,5,0,
  	1309,217,1,0,0,0,1310,1312,3,202,101,0,1311,1310,1,0,0,0,1312,1315,1,
  	0,0,0,1313,1311,1,0,0,0,1313,1314,1,0,0,0,1314,1316,1,0,0,0,1315,1313,
  	1,0,0,0,1316,1321,5,108,0,0,1317,1318,3,26,13,0,1318,1319,3,62,31,0,1319,
  	1320,3,28,14,0,1320,1322,1,0,0,0,1321,1317,1,0,0,0,1321,1322,1,0,0,0,
  	1322,219,1,0,0,0,1323,1325,3,202,101,0,1324,1323,1,0,0,0,1325,1328,1,
  	0,0,0,1326,1324,1,0,0,0,1326,1327,1,0,0,0,1327,1330,1,0,0,0,1328,1326,
  	1,0,0,0,1329,1331,3,186,93,0,1330,1329,1,0,0,0,1330,1331,1,0,0,0,1331,
  	1332,1,0,0,0,1332,1333,5,15,0,0,1333,1335,5,108,0,0,1334,1336,3,188,94,
  	0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,1337,1,0,0,0,1337,1343,3,22,
  	11,0,1338,1339,3,218,109,0,1339,1340,3,12,6,0,1340,1342,1,0,0,0,1341,
  	1338,1,0,0,0,1342,1345,1,0,0,0,1343,1341,1,0,0,0,1343,1344,1,0,0,0,1344,
  	1346,1,0,0,0,1345,1343,1,0,0,0,1346,1348,3,218,109,0,1347,1349,3,12,6,
  	0,1348,1347,1,0,0,0,1348,1349,1,0,0,0,1349,1350,1,0,0,0,1350,1351,3,24,
  	12,0,1351,1352,3,10,5,0,1352,221,1,0,0,0,1353,1356,5,43,0,0,1354,1355,
  	5,108,0,0,1355,1357,5,48,0,0,1356,1354,1,0,0,0,1356,1357,1,0,0,0,1357,
  	1358,1,0,0,0,1358,1359,3,54,27,0,1359,1360,3,10,5,0,1360,223,1,0,0,0,
  	1361,1362,5,25,0,0,1362,1363,3,54,27,0,1363,1364,3,10,5,0,1364,225,1,
  	0,0,0,1365,1367,3,10,5,0,1366,1365,1,0,0,0,1367,1370,1,0,0,0,1368,1366,
  	1,0,0,0,1368,1369,1,0,0,0,1369,1374,1,0,0,0,1370,1368,1,0,0,0,1371,1373,
  	3,222,111,0,1372,1371,1,0,0,0,1373,1376,1,0,0,0,1374,1372,1,0,0,0,1374,
  	1375,1,0,0,0,1375,1378,1,0,0,0,1376,1374,1,0,0,0,1377,1379,3,224,112,
  	0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,1379,1386,1,0,0,0,1380,1385,3,178,
  	89,0,1381,1385,3,204,102,0,1382,1385,3,220,110,0,1383,1385,3,216,108,
  	0,1384,1380,1,0,0,0,1384,1381,1,0,0,0,1384,1382,1,0,0,0,1384,1383,1,0,
  	0,0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,1386,1387,1,0,0,0,1387,227,1,
  	0,0,0,1388,1386,1,0,0,0,1389,1390,3,226,113,0,1390,1391,5,0,0,1,1391,
  	229,1,0,0,0,162,251,262,267,274,279,282,288,291,297,300,306,309,326,332,
  	336,339,344,351,357,363,376,382,392,399,406,419,427,436,442,447,454,461,
  	465,476,480,484,491,495,498,507,511,516,523,530,545,550,558,574,586,597,
  	607,616,621,628,637,645,651,663,669,674,685,701,711,723,740,752,763,765,
  	770,775,779,787,790,796,804,807,823,828,835,848,851,859,869,879,884,886,
  	889,901,913,915,926,929,939,950,963,965,970,977,992,999,1002,1007,1014,
  	1020,1023,1028,1039,1052,1063,1069,1077,1092,1102,1112,1114,1123,1127,
  	1131,1140,1144,1148,1154,1164,1169,1182,1186,1190,1197,1205,1207,1216,
  	1220,1226,1230,1238,1244,1248,1251,1258,1262,1269,1273,1276,1280,1287,
  	1291,1296,1302,1304,1313,1321,1326,1330,1335,1343,1348,1356,1368,1374,
  	1378,1384,1386
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  faparserParserStaticData = staticData.release();
}

}

FaParser::FaParser(TokenStream *input) : FaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

FaParser::FaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  FaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *faparserParserStaticData->atn, faparserParserStaticData->decisionToDFA, faparserParserStaticData->sharedContextCache, options);
}

FaParser::~FaParser() {
  delete _interpreter;
}

const atn::ATN& FaParser::getATN() const {
  return *faparserParserStaticData->atn;
}

std::string FaParser::getGrammarFileName() const {
  return "FaParser.g4";
}

const std::vector<std::string>& FaParser::getRuleNames() const {
  return faparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& FaParser::getVocabulary() const {
  return faparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FaParser::getSerializedATN() const {
  return faparserParserStaticData->serializedATN;
}


//----------------- ShiftLAssignOpContext ------------------------------------------------------------------

FaParser::ShiftLAssignOpContext::ShiftLAssignOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::ShiftLOpContext* FaParser::ShiftLAssignOpContext::shiftLOp() {
  return getRuleContext<FaParser::ShiftLOpContext>(0);
}

tree::TerminalNode* FaParser::ShiftLAssignOpContext::AssignOp() {
  return getToken(FaParser::AssignOp, 0);
}


size_t FaParser::ShiftLAssignOpContext::getRuleIndex() const {
  return FaParser::RuleShiftLAssignOp;
}


std::any FaParser::ShiftLAssignOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitShiftLAssignOp(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ShiftLAssignOpContext* FaParser::shiftLAssignOp() {
  ShiftLAssignOpContext *_localctx = _tracker.createInstance<ShiftLAssignOpContext>(_ctx, getState());
  enterRule(_localctx, 0, FaParser::RuleShiftLAssignOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(230);
    shiftLOp();
    setState(231);
    match(FaParser::AssignOp);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftRAssignOpContext ------------------------------------------------------------------

FaParser::ShiftRAssignOpContext::ShiftRAssignOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::ShiftROpContext* FaParser::ShiftRAssignOpContext::shiftROp() {
  return getRuleContext<FaParser::ShiftROpContext>(0);
}

tree::TerminalNode* FaParser::ShiftRAssignOpContext::AssignOp() {
  return getToken(FaParser::AssignOp, 0);
}


size_t FaParser::ShiftRAssignOpContext::getRuleIndex() const {
  return FaParser::RuleShiftRAssignOp;
}


std::any FaParser::ShiftRAssignOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitShiftRAssignOp(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ShiftRAssignOpContext* FaParser::shiftRAssignOp() {
  ShiftRAssignOpContext *_localctx = _tracker.createInstance<ShiftRAssignOpContext>(_ctx, getState());
  enterRule(_localctx, 2, FaParser::RuleShiftRAssignOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(233);
    shiftROp();
    setState(234);
    match(FaParser::AssignOp);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllAssignOpContext ------------------------------------------------------------------

FaParser::AllAssignOpContext::AllAssignOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::AllAssignOpContext::AssignOp() {
  return getToken(FaParser::AssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::QusQusAssignOp() {
  return getToken(FaParser::QusQusAssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::AddAssignOp() {
  return getToken(FaParser::AddAssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::SubAssignOp() {
  return getToken(FaParser::SubAssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::StarAssignOp() {
  return getToken(FaParser::StarAssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::StarStarAssignOp() {
  return getToken(FaParser::StarStarAssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::DivAssignOp() {
  return getToken(FaParser::DivAssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::ModAssignOp() {
  return getToken(FaParser::ModAssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::AndAssignOp() {
  return getToken(FaParser::AndAssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::OrAssignOp() {
  return getToken(FaParser::OrAssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::XorAssignOp() {
  return getToken(FaParser::XorAssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::AndAndAssignOp() {
  return getToken(FaParser::AndAndAssignOp, 0);
}

tree::TerminalNode* FaParser::AllAssignOpContext::OrOrAssignOp() {
  return getToken(FaParser::OrOrAssignOp, 0);
}

FaParser::ShiftLAssignOpContext* FaParser::AllAssignOpContext::shiftLAssignOp() {
  return getRuleContext<FaParser::ShiftLAssignOpContext>(0);
}

FaParser::ShiftRAssignOpContext* FaParser::AllAssignOpContext::shiftRAssignOp() {
  return getRuleContext<FaParser::ShiftRAssignOpContext>(0);
}


size_t FaParser::AllAssignOpContext::getRuleIndex() const {
  return FaParser::RuleAllAssignOp;
}


std::any FaParser::AllAssignOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitAllAssignOp(this);
  else
    return visitor->visitChildren(this);
}

FaParser::AllAssignOpContext* FaParser::allAssignOp() {
  AllAssignOpContext *_localctx = _tracker.createInstance<AllAssignOpContext>(_ctx, getState());
  enterRule(_localctx, 4, FaParser::RuleAllAssignOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(251);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::AssignOp: {
        enterOuterAlt(_localctx, 1);
        setState(236);
        match(FaParser::AssignOp);
        break;
      }

      case FaParser::QusQusAssignOp: {
        enterOuterAlt(_localctx, 2);
        setState(237);
        match(FaParser::QusQusAssignOp);
        break;
      }

      case FaParser::AddAssignOp: {
        enterOuterAlt(_localctx, 3);
        setState(238);
        match(FaParser::AddAssignOp);
        break;
      }

      case FaParser::SubAssignOp: {
        enterOuterAlt(_localctx, 4);
        setState(239);
        match(FaParser::SubAssignOp);
        break;
      }

      case FaParser::StarAssignOp: {
        enterOuterAlt(_localctx, 5);
        setState(240);
        match(FaParser::StarAssignOp);
        break;
      }

      case FaParser::StarStarAssignOp: {
        enterOuterAlt(_localctx, 6);
        setState(241);
        match(FaParser::StarStarAssignOp);
        break;
      }

      case FaParser::DivAssignOp: {
        enterOuterAlt(_localctx, 7);
        setState(242);
        match(FaParser::DivAssignOp);
        break;
      }

      case FaParser::ModAssignOp: {
        enterOuterAlt(_localctx, 8);
        setState(243);
        match(FaParser::ModAssignOp);
        break;
      }

      case FaParser::AndAssignOp: {
        enterOuterAlt(_localctx, 9);
        setState(244);
        match(FaParser::AndAssignOp);
        break;
      }

      case FaParser::OrAssignOp: {
        enterOuterAlt(_localctx, 10);
        setState(245);
        match(FaParser::OrAssignOp);
        break;
      }

      case FaParser::XorAssignOp: {
        enterOuterAlt(_localctx, 11);
        setState(246);
        match(FaParser::XorAssignOp);
        break;
      }

      case FaParser::AndAndAssignOp: {
        enterOuterAlt(_localctx, 12);
        setState(247);
        match(FaParser::AndAndAssignOp);
        break;
      }

      case FaParser::OrOrAssignOp: {
        enterOuterAlt(_localctx, 13);
        setState(248);
        match(FaParser::OrOrAssignOp);
        break;
      }

      case FaParser::LessThan: {
        enterOuterAlt(_localctx, 14);
        setState(249);
        shiftLAssignOp();
        break;
      }

      case FaParser::GreatThan: {
        enterOuterAlt(_localctx, 15);
        setState(250);
        shiftRAssignOp();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftLOpContext ------------------------------------------------------------------

FaParser::ShiftLOpContext::ShiftLOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FaParser::ShiftLOpContext::LessThan() {
  return getTokens(FaParser::LessThan);
}

tree::TerminalNode* FaParser::ShiftLOpContext::LessThan(size_t i) {
  return getToken(FaParser::LessThan, i);
}


size_t FaParser::ShiftLOpContext::getRuleIndex() const {
  return FaParser::RuleShiftLOp;
}


std::any FaParser::ShiftLOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitShiftLOp(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ShiftLOpContext* FaParser::shiftLOp() {
  ShiftLOpContext *_localctx = _tracker.createInstance<ShiftLOpContext>(_ctx, getState());
  enterRule(_localctx, 6, FaParser::RuleShiftLOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(253);
    match(FaParser::LessThan);
    setState(254);
    match(FaParser::LessThan);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftROpContext ------------------------------------------------------------------

FaParser::ShiftROpContext::ShiftROpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FaParser::ShiftROpContext::GreatThan() {
  return getTokens(FaParser::GreatThan);
}

tree::TerminalNode* FaParser::ShiftROpContext::GreatThan(size_t i) {
  return getToken(FaParser::GreatThan, i);
}


size_t FaParser::ShiftROpContext::getRuleIndex() const {
  return FaParser::RuleShiftROp;
}


std::any FaParser::ShiftROpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitShiftROp(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ShiftROpContext* FaParser::shiftROp() {
  ShiftROpContext *_localctx = _tracker.createInstance<ShiftROpContext>(_ctx, getState());
  enterRule(_localctx, 8, FaParser::RuleShiftROp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(256);
    match(FaParser::GreatThan);
    setState(257);
    match(FaParser::GreatThan);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndlContext ------------------------------------------------------------------

FaParser::EndlContext::EndlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FaParser::EndlContext::Lf() {
  return getTokens(FaParser::Lf);
}

tree::TerminalNode* FaParser::EndlContext::Lf(size_t i) {
  return getToken(FaParser::Lf, i);
}

std::vector<tree::TerminalNode *> FaParser::EndlContext::Semi() {
  return getTokens(FaParser::Semi);
}

tree::TerminalNode* FaParser::EndlContext::Semi(size_t i) {
  return getToken(FaParser::Semi, i);
}


size_t FaParser::EndlContext::getRuleIndex() const {
  return FaParser::RuleEndl;
}


std::any FaParser::EndlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitEndl(this);
  else
    return visitor->visitChildren(this);
}

FaParser::EndlContext* FaParser::endl() {
  EndlContext *_localctx = _tracker.createInstance<EndlContext>(_ctx, getState());
  enterRule(_localctx, 10, FaParser::RuleEndl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(260); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(259);
              _la = _input->LA(1);
              if (!(_la == FaParser::Lf

              || _la == FaParser::Semi)) {
              _errHandler->recoverInline(this);
              }
              else {
                _errHandler->reportMatch(this);
                consume();
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(262); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Endl2Context ------------------------------------------------------------------

FaParser::Endl2Context::Endl2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::Endl2Context::Comma() {
  return getToken(FaParser::Comma, 0);
}

std::vector<tree::TerminalNode *> FaParser::Endl2Context::Lf() {
  return getTokens(FaParser::Lf);
}

tree::TerminalNode* FaParser::Endl2Context::Lf(size_t i) {
  return getToken(FaParser::Lf, i);
}


size_t FaParser::Endl2Context::getRuleIndex() const {
  return FaParser::RuleEndl2;
}


std::any FaParser::Endl2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitEndl2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::Endl2Context* FaParser::endl2() {
  Endl2Context *_localctx = _tracker.createInstance<Endl2Context>(_ctx, getState());
  enterRule(_localctx, 12, FaParser::RuleEndl2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(267);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Lf) {
      setState(264);
      match(FaParser::Lf);
      setState(269);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(270);
    match(FaParser::Comma);
    setState(274);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(271);
        match(FaParser::Lf); 
      }
      setState(276);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotFangLContext ------------------------------------------------------------------

FaParser::QuotFangLContext::QuotFangLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::QuotFangLContext::QFangL() {
  return getToken(FaParser::QFangL, 0);
}

FaParser::EndlContext* FaParser::QuotFangLContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}


size_t FaParser::QuotFangLContext::getRuleIndex() const {
  return FaParser::RuleQuotFangL;
}


std::any FaParser::QuotFangLContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotFangL(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotFangLContext* FaParser::quotFangL() {
  QuotFangLContext *_localctx = _tracker.createInstance<QuotFangLContext>(_ctx, getState());
  enterRule(_localctx, 14, FaParser::RuleQuotFangL);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(277);
    match(FaParser::QFangL);
    setState(279);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      setState(278);
      endl();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotFangRContext ------------------------------------------------------------------

FaParser::QuotFangRContext::QuotFangRContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::QuotFangRContext::QFangR() {
  return getToken(FaParser::QFangR, 0);
}

FaParser::EndlContext* FaParser::QuotFangRContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}


size_t FaParser::QuotFangRContext::getRuleIndex() const {
  return FaParser::RuleQuotFangR;
}


std::any FaParser::QuotFangRContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotFangR(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotFangRContext* FaParser::quotFangR() {
  QuotFangRContext *_localctx = _tracker.createInstance<QuotFangRContext>(_ctx, getState());
  enterRule(_localctx, 16, FaParser::RuleQuotFangR);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(282);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Lf

    || _la == FaParser::Semi) {
      setState(281);
      endl();
    }
    setState(284);
    match(FaParser::QFangR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotJianLContext ------------------------------------------------------------------

FaParser::QuotJianLContext::QuotJianLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::QuotJianLContext::LessThan() {
  return getToken(FaParser::LessThan, 0);
}

FaParser::EndlContext* FaParser::QuotJianLContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}


size_t FaParser::QuotJianLContext::getRuleIndex() const {
  return FaParser::RuleQuotJianL;
}


std::any FaParser::QuotJianLContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotJianL(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotJianLContext* FaParser::quotJianL() {
  QuotJianLContext *_localctx = _tracker.createInstance<QuotJianLContext>(_ctx, getState());
  enterRule(_localctx, 18, FaParser::RuleQuotJianL);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(286);
    match(FaParser::LessThan);
    setState(288);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Lf

    || _la == FaParser::Semi) {
      setState(287);
      endl();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotJianRContext ------------------------------------------------------------------

FaParser::QuotJianRContext::QuotJianRContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::QuotJianRContext::GreatThan() {
  return getToken(FaParser::GreatThan, 0);
}

FaParser::EndlContext* FaParser::QuotJianRContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}


size_t FaParser::QuotJianRContext::getRuleIndex() const {
  return FaParser::RuleQuotJianR;
}


std::any FaParser::QuotJianRContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotJianR(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotJianRContext* FaParser::quotJianR() {
  QuotJianRContext *_localctx = _tracker.createInstance<QuotJianRContext>(_ctx, getState());
  enterRule(_localctx, 20, FaParser::RuleQuotJianR);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(291);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Lf

    || _la == FaParser::Semi) {
      setState(290);
      endl();
    }
    setState(293);
    match(FaParser::GreatThan);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotHuaLContext ------------------------------------------------------------------

FaParser::QuotHuaLContext::QuotHuaLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::QuotHuaLContext::QHuaL() {
  return getToken(FaParser::QHuaL, 0);
}

FaParser::EndlContext* FaParser::QuotHuaLContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}


size_t FaParser::QuotHuaLContext::getRuleIndex() const {
  return FaParser::RuleQuotHuaL;
}


std::any FaParser::QuotHuaLContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotHuaL(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotHuaLContext* FaParser::quotHuaL() {
  QuotHuaLContext *_localctx = _tracker.createInstance<QuotHuaLContext>(_ctx, getState());
  enterRule(_localctx, 22, FaParser::RuleQuotHuaL);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(295);
    match(FaParser::QHuaL);
    setState(297);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      setState(296);
      endl();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotHuaRContext ------------------------------------------------------------------

FaParser::QuotHuaRContext::QuotHuaRContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::QuotHuaRContext::QHuaR() {
  return getToken(FaParser::QHuaR, 0);
}

FaParser::EndlContext* FaParser::QuotHuaRContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}


size_t FaParser::QuotHuaRContext::getRuleIndex() const {
  return FaParser::RuleQuotHuaR;
}


std::any FaParser::QuotHuaRContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotHuaR(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotHuaRContext* FaParser::quotHuaR() {
  QuotHuaRContext *_localctx = _tracker.createInstance<QuotHuaRContext>(_ctx, getState());
  enterRule(_localctx, 24, FaParser::RuleQuotHuaR);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(300);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Lf

    || _la == FaParser::Semi) {
      setState(299);
      endl();
    }
    setState(302);
    match(FaParser::QHuaR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotYuanLContext ------------------------------------------------------------------

FaParser::QuotYuanLContext::QuotYuanLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::QuotYuanLContext::QYuanL() {
  return getToken(FaParser::QYuanL, 0);
}

FaParser::EndlContext* FaParser::QuotYuanLContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}


size_t FaParser::QuotYuanLContext::getRuleIndex() const {
  return FaParser::RuleQuotYuanL;
}


std::any FaParser::QuotYuanLContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotYuanL(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotYuanLContext* FaParser::quotYuanL() {
  QuotYuanLContext *_localctx = _tracker.createInstance<QuotYuanLContext>(_ctx, getState());
  enterRule(_localctx, 26, FaParser::RuleQuotYuanL);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(304);
    match(FaParser::QYuanL);
    setState(306);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      setState(305);
      endl();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotYuanRContext ------------------------------------------------------------------

FaParser::QuotYuanRContext::QuotYuanRContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::QuotYuanRContext::QYuanR() {
  return getToken(FaParser::QYuanR, 0);
}

FaParser::EndlContext* FaParser::QuotYuanRContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}


size_t FaParser::QuotYuanRContext::getRuleIndex() const {
  return FaParser::RuleQuotYuanR;
}


std::any FaParser::QuotYuanRContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotYuanR(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotYuanRContext* FaParser::quotYuanR() {
  QuotYuanRContext *_localctx = _tracker.createInstance<QuotYuanRContext>(_ctx, getState());
  enterRule(_localctx, 28, FaParser::RuleQuotYuanR);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(309);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Lf

    || _la == FaParser::Semi) {
      setState(308);
      endl();
    }
    setState(311);
    match(FaParser::QYuanR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelfOp2Context ------------------------------------------------------------------

FaParser::SelfOp2Context::SelfOp2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::SelfOp2Context::AddOp() {
  return getToken(FaParser::AddOp, 0);
}

tree::TerminalNode* FaParser::SelfOp2Context::SubOp() {
  return getToken(FaParser::SubOp, 0);
}

tree::TerminalNode* FaParser::SelfOp2Context::StarOp() {
  return getToken(FaParser::StarOp, 0);
}

tree::TerminalNode* FaParser::SelfOp2Context::DivOp() {
  return getToken(FaParser::DivOp, 0);
}

tree::TerminalNode* FaParser::SelfOp2Context::StarStarOp() {
  return getToken(FaParser::StarStarOp, 0);
}

tree::TerminalNode* FaParser::SelfOp2Context::ModOp() {
  return getToken(FaParser::ModOp, 0);
}

tree::TerminalNode* FaParser::SelfOp2Context::AndOp() {
  return getToken(FaParser::AndOp, 0);
}

tree::TerminalNode* FaParser::SelfOp2Context::OrOp() {
  return getToken(FaParser::OrOp, 0);
}

tree::TerminalNode* FaParser::SelfOp2Context::XorOp() {
  return getToken(FaParser::XorOp, 0);
}

tree::TerminalNode* FaParser::SelfOp2Context::AndAndOp() {
  return getToken(FaParser::AndAndOp, 0);
}

tree::TerminalNode* FaParser::SelfOp2Context::OrOrOp() {
  return getToken(FaParser::OrOrOp, 0);
}

FaParser::ShiftLOpContext* FaParser::SelfOp2Context::shiftLOp() {
  return getRuleContext<FaParser::ShiftLOpContext>(0);
}

FaParser::ShiftROpContext* FaParser::SelfOp2Context::shiftROp() {
  return getRuleContext<FaParser::ShiftROpContext>(0);
}


size_t FaParser::SelfOp2Context::getRuleIndex() const {
  return FaParser::RuleSelfOp2;
}


std::any FaParser::SelfOp2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitSelfOp2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::SelfOp2Context* FaParser::selfOp2() {
  SelfOp2Context *_localctx = _tracker.createInstance<SelfOp2Context>(_ctx, getState());
  enterRule(_localctx, 30, FaParser::RuleSelfOp2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(326);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::AddOp: {
        enterOuterAlt(_localctx, 1);
        setState(313);
        match(FaParser::AddOp);
        break;
      }

      case FaParser::SubOp: {
        enterOuterAlt(_localctx, 2);
        setState(314);
        match(FaParser::SubOp);
        break;
      }

      case FaParser::StarOp: {
        enterOuterAlt(_localctx, 3);
        setState(315);
        match(FaParser::StarOp);
        break;
      }

      case FaParser::DivOp: {
        enterOuterAlt(_localctx, 4);
        setState(316);
        match(FaParser::DivOp);
        break;
      }

      case FaParser::StarStarOp: {
        enterOuterAlt(_localctx, 5);
        setState(317);
        match(FaParser::StarStarOp);
        break;
      }

      case FaParser::ModOp: {
        enterOuterAlt(_localctx, 6);
        setState(318);
        match(FaParser::ModOp);
        break;
      }

      case FaParser::AndOp: {
        enterOuterAlt(_localctx, 7);
        setState(319);
        match(FaParser::AndOp);
        break;
      }

      case FaParser::OrOp: {
        enterOuterAlt(_localctx, 8);
        setState(320);
        match(FaParser::OrOp);
        break;
      }

      case FaParser::XorOp: {
        enterOuterAlt(_localctx, 9);
        setState(321);
        match(FaParser::XorOp);
        break;
      }

      case FaParser::AndAndOp: {
        enterOuterAlt(_localctx, 10);
        setState(322);
        match(FaParser::AndAndOp);
        break;
      }

      case FaParser::OrOrOp: {
        enterOuterAlt(_localctx, 11);
        setState(323);
        match(FaParser::OrOrOp);
        break;
      }

      case FaParser::LessThan: {
        enterOuterAlt(_localctx, 12);
        setState(324);
        shiftLOp();
        break;
      }

      case FaParser::GreatThan: {
        enterOuterAlt(_localctx, 13);
        setState(325);
        shiftROp();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompareOp2Context ------------------------------------------------------------------

FaParser::CompareOp2Context::CompareOp2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::CompareOp2Context::LessThan() {
  return getToken(FaParser::LessThan, 0);
}

tree::TerminalNode* FaParser::CompareOp2Context::LtEqualOp() {
  return getToken(FaParser::LtEqualOp, 0);
}

tree::TerminalNode* FaParser::CompareOp2Context::GreatThan() {
  return getToken(FaParser::GreatThan, 0);
}

tree::TerminalNode* FaParser::CompareOp2Context::GtEqualOp() {
  return getToken(FaParser::GtEqualOp, 0);
}

tree::TerminalNode* FaParser::CompareOp2Context::EqualOp() {
  return getToken(FaParser::EqualOp, 0);
}

tree::TerminalNode* FaParser::CompareOp2Context::NotEqualOp() {
  return getToken(FaParser::NotEqualOp, 0);
}


size_t FaParser::CompareOp2Context::getRuleIndex() const {
  return FaParser::RuleCompareOp2;
}


std::any FaParser::CompareOp2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitCompareOp2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::CompareOp2Context* FaParser::compareOp2() {
  CompareOp2Context *_localctx = _tracker.createInstance<CompareOp2Context>(_ctx, getState());
  enterRule(_localctx, 32, FaParser::RuleCompareOp2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(328);
    _la = _input->LA(1);
    if (!(((((_la - 88) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 88)) & ((1ULL << (FaParser::LessThan - 88))
      | (1ULL << (FaParser::GreatThan - 88))
      | (1ULL << (FaParser::LtEqualOp - 88))
      | (1ULL << (FaParser::GtEqualOp - 88))
      | (1ULL << (FaParser::EqualOp - 88))
      | (1ULL << (FaParser::NotEqualOp - 88)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChangeOp2Context ------------------------------------------------------------------

FaParser::ChangeOp2Context::ChangeOp2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::ChangeOp2Context::QusQusOp() {
  return getToken(FaParser::QusQusOp, 0);
}

FaParser::CompareOp2Context* FaParser::ChangeOp2Context::compareOp2() {
  return getRuleContext<FaParser::CompareOp2Context>(0);
}


size_t FaParser::ChangeOp2Context::getRuleIndex() const {
  return FaParser::RuleChangeOp2;
}


std::any FaParser::ChangeOp2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitChangeOp2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ChangeOp2Context* FaParser::changeOp2() {
  ChangeOp2Context *_localctx = _tracker.createInstance<ChangeOp2Context>(_ctx, getState());
  enterRule(_localctx, 34, FaParser::RuleChangeOp2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(332);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::QusQusOp: {
        enterOuterAlt(_localctx, 1);
        setState(330);
        match(FaParser::QusQusOp);
        break;
      }

      case FaParser::LessThan:
      case FaParser::GreatThan:
      case FaParser::LtEqualOp:
      case FaParser::GtEqualOp:
      case FaParser::EqualOp:
      case FaParser::NotEqualOp: {
        enterOuterAlt(_localctx, 2);
        setState(331);
        compareOp2();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllOp2Context ------------------------------------------------------------------

FaParser::AllOp2Context::AllOp2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::SelfOp2Context* FaParser::AllOp2Context::selfOp2() {
  return getRuleContext<FaParser::SelfOp2Context>(0);
}

FaParser::ChangeOp2Context* FaParser::AllOp2Context::changeOp2() {
  return getRuleContext<FaParser::ChangeOp2Context>(0);
}


size_t FaParser::AllOp2Context::getRuleIndex() const {
  return FaParser::RuleAllOp2;
}


std::any FaParser::AllOp2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitAllOp2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::AllOp2Context* FaParser::allOp2() {
  AllOp2Context *_localctx = _tracker.createInstance<AllOp2Context>(_ctx, getState());
  enterRule(_localctx, 36, FaParser::RuleAllOp2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(336);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(334);
      selfOp2();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(335);
      changeOp2();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntNumContext ------------------------------------------------------------------

FaParser::IntNumContext::IntNumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::IntNumContext::IntLiteral() {
  return getToken(FaParser::IntLiteral, 0);
}

tree::TerminalNode* FaParser::IntNumContext::SubOp() {
  return getToken(FaParser::SubOp, 0);
}


size_t FaParser::IntNumContext::getRuleIndex() const {
  return FaParser::RuleIntNum;
}


std::any FaParser::IntNumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitIntNum(this);
  else
    return visitor->visitChildren(this);
}

FaParser::IntNumContext* FaParser::intNum() {
  IntNumContext *_localctx = _tracker.createInstance<IntNumContext>(_ctx, getState());
  enterRule(_localctx, 38, FaParser::RuleIntNum);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(339);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::SubOp) {
      setState(338);
      match(FaParser::SubOp);
    }
    setState(341);
    match(FaParser::IntLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatNumContext ------------------------------------------------------------------

FaParser::FloatNumContext::FloatNumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::FloatNumContext::FloatLiteral() {
  return getToken(FaParser::FloatLiteral, 0);
}

tree::TerminalNode* FaParser::FloatNumContext::SubOp() {
  return getToken(FaParser::SubOp, 0);
}


size_t FaParser::FloatNumContext::getRuleIndex() const {
  return FaParser::RuleFloatNum;
}


std::any FaParser::FloatNumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitFloatNum(this);
  else
    return visitor->visitChildren(this);
}

FaParser::FloatNumContext* FaParser::floatNum() {
  FloatNumContext *_localctx = _tracker.createInstance<FloatNumContext>(_ctx, getState());
  enterRule(_localctx, 40, FaParser::RuleFloatNum);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(344);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::SubOp) {
      setState(343);
      match(FaParser::SubOp);
    }
    setState(346);
    match(FaParser::FloatLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormatString1PartContext ------------------------------------------------------------------

FaParser::FormatString1PartContext::FormatString1PartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::MiddleExprContext* FaParser::FormatString1PartContext::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}

tree::TerminalNode* FaParser::FormatString1PartContext::Colon() {
  return getToken(FaParser::Colon, 0);
}

tree::TerminalNode* FaParser::FormatString1PartContext::FormatString() {
  return getToken(FaParser::FormatString, 0);
}

tree::TerminalNode* FaParser::FormatString1PartContext::QHuaLQHuaL() {
  return getToken(FaParser::QHuaLQHuaL, 0);
}

tree::TerminalNode* FaParser::FormatString1PartContext::QHuaRQHuaR() {
  return getToken(FaParser::QHuaRQHuaR, 0);
}

tree::TerminalNode* FaParser::FormatString1PartContext::RegularCharInside() {
  return getToken(FaParser::RegularCharInside, 0);
}

tree::TerminalNode* FaParser::FormatString1PartContext::RegularStringInside() {
  return getToken(FaParser::RegularStringInside, 0);
}


size_t FaParser::FormatString1PartContext::getRuleIndex() const {
  return FaParser::RuleFormatString1Part;
}


std::any FaParser::FormatString1PartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitFormatString1Part(this);
  else
    return visitor->visitChildren(this);
}

FaParser::FormatString1PartContext* FaParser::formatString1Part() {
  FormatString1PartContext *_localctx = _tracker.createInstance<FormatString1PartContext>(_ctx, getState());
  enterRule(_localctx, 42, FaParser::RuleFormatString1Part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(357);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::Calc:
      case FaParser::Cast:
      case FaParser::Expr:
      case FaParser::New:
      case FaParser::Stmt:
      case FaParser::ReverseOp:
      case FaParser::AddAddOp:
      case FaParser::SubSubOp:
      case FaParser::Exclam:
      case FaParser::SubOp:
      case FaParser::ColonColon:
      case FaParser::QFangL:
      case FaParser::QYuanL:
      case FaParser::BoolLiteral:
      case FaParser::HexLiteral:
      case FaParser::IntLiteral:
      case FaParser::FloatLiteral:
      case FaParser::String1Literal:
      case FaParser::String2Literal:
      case FaParser::String3Literal:
      case FaParser::FmtString1:
      case FaParser::FmtString2:
      case FaParser::Id: {
        enterOuterAlt(_localctx, 1);
        setState(348);
        middleExpr();
        setState(351);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FaParser::Colon) {
          setState(349);
          match(FaParser::Colon);
          setState(350);
          match(FaParser::FormatString);
        }
        break;
      }

      case FaParser::QHuaLQHuaL: {
        enterOuterAlt(_localctx, 2);
        setState(353);
        match(FaParser::QHuaLQHuaL);
        break;
      }

      case FaParser::QHuaRQHuaR: {
        enterOuterAlt(_localctx, 3);
        setState(354);
        match(FaParser::QHuaRQHuaR);
        break;
      }

      case FaParser::RegularCharInside: {
        enterOuterAlt(_localctx, 4);
        setState(355);
        match(FaParser::RegularCharInside);
        break;
      }

      case FaParser::RegularStringInside: {
        enterOuterAlt(_localctx, 5);
        setState(356);
        match(FaParser::RegularStringInside);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormatString1Context ------------------------------------------------------------------

FaParser::FormatString1Context::FormatString1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::FormatString1Context::FmtString1() {
  return getToken(FaParser::FmtString1, 0);
}

tree::TerminalNode* FaParser::FormatString1Context::DoubleQuoteInside() {
  return getToken(FaParser::DoubleQuoteInside, 0);
}

std::vector<FaParser::FormatString1PartContext *> FaParser::FormatString1Context::formatString1Part() {
  return getRuleContexts<FaParser::FormatString1PartContext>();
}

FaParser::FormatString1PartContext* FaParser::FormatString1Context::formatString1Part(size_t i) {
  return getRuleContext<FaParser::FormatString1PartContext>(i);
}


size_t FaParser::FormatString1Context::getRuleIndex() const {
  return FaParser::RuleFormatString1;
}


std::any FaParser::FormatString1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitFormatString1(this);
  else
    return visitor->visitChildren(this);
}

FaParser::FormatString1Context* FaParser::formatString1() {
  FormatString1Context *_localctx = _tracker.createInstance<FormatString1Context>(_ctx, getState());
  enterRule(_localctx, 44, FaParser::RuleFormatString1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(359);
    match(FaParser::FmtString1);
    setState(363);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Calc)
      | (1ULL << FaParser::Cast)
      | (1ULL << FaParser::Expr)
      | (1ULL << FaParser::New)
      | (1ULL << FaParser::Stmt)
      | (1ULL << FaParser::ReverseOp)
      | (1ULL << FaParser::AddAddOp)
      | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
      | (1ULL << (FaParser::SubOp - 64))
      | (1ULL << (FaParser::ColonColon - 64))
      | (1ULL << (FaParser::QFangL - 64))
      | (1ULL << (FaParser::QYuanL - 64))
      | (1ULL << (FaParser::BoolLiteral - 64))
      | (1ULL << (FaParser::HexLiteral - 64))
      | (1ULL << (FaParser::IntLiteral - 64))
      | (1ULL << (FaParser::FloatLiteral - 64))
      | (1ULL << (FaParser::String1Literal - 64))
      | (1ULL << (FaParser::String2Literal - 64))
      | (1ULL << (FaParser::String3Literal - 64))
      | (1ULL << (FaParser::FmtString1 - 64))
      | (1ULL << (FaParser::FmtString2 - 64))
      | (1ULL << (FaParser::Id - 64))
      | (1ULL << (FaParser::QHuaLQHuaL - 64))
      | (1ULL << (FaParser::QHuaRQHuaR - 64))
      | (1ULL << (FaParser::RegularCharInside - 64))
      | (1ULL << (FaParser::RegularStringInside - 64)))) != 0)) {
      setState(360);
      formatString1Part();
      setState(365);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(366);
    match(FaParser::DoubleQuoteInside);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormatString2PartContext ------------------------------------------------------------------

FaParser::FormatString2PartContext::FormatString2PartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::MiddleExprContext* FaParser::FormatString2PartContext::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}

tree::TerminalNode* FaParser::FormatString2PartContext::Colon() {
  return getToken(FaParser::Colon, 0);
}

tree::TerminalNode* FaParser::FormatString2PartContext::FormatString() {
  return getToken(FaParser::FormatString, 0);
}

tree::TerminalNode* FaParser::FormatString2PartContext::QHuaLQHuaL() {
  return getToken(FaParser::QHuaLQHuaL, 0);
}

tree::TerminalNode* FaParser::FormatString2PartContext::QHuaRQHuaR() {
  return getToken(FaParser::QHuaRQHuaR, 0);
}

tree::TerminalNode* FaParser::FormatString2PartContext::VerbatiumDoubleQuoteInside() {
  return getToken(FaParser::VerbatiumDoubleQuoteInside, 0);
}

tree::TerminalNode* FaParser::FormatString2PartContext::VerbatiumInsideString() {
  return getToken(FaParser::VerbatiumInsideString, 0);
}


size_t FaParser::FormatString2PartContext::getRuleIndex() const {
  return FaParser::RuleFormatString2Part;
}


std::any FaParser::FormatString2PartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitFormatString2Part(this);
  else
    return visitor->visitChildren(this);
}

FaParser::FormatString2PartContext* FaParser::formatString2Part() {
  FormatString2PartContext *_localctx = _tracker.createInstance<FormatString2PartContext>(_ctx, getState());
  enterRule(_localctx, 46, FaParser::RuleFormatString2Part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(376);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::Calc:
      case FaParser::Cast:
      case FaParser::Expr:
      case FaParser::New:
      case FaParser::Stmt:
      case FaParser::ReverseOp:
      case FaParser::AddAddOp:
      case FaParser::SubSubOp:
      case FaParser::Exclam:
      case FaParser::SubOp:
      case FaParser::ColonColon:
      case FaParser::QFangL:
      case FaParser::QYuanL:
      case FaParser::BoolLiteral:
      case FaParser::HexLiteral:
      case FaParser::IntLiteral:
      case FaParser::FloatLiteral:
      case FaParser::String1Literal:
      case FaParser::String2Literal:
      case FaParser::String3Literal:
      case FaParser::FmtString1:
      case FaParser::FmtString2:
      case FaParser::Id: {
        enterOuterAlt(_localctx, 1);
        setState(368);
        middleExpr();
        setState(369);
        match(FaParser::Colon);
        setState(370);
        match(FaParser::FormatString);
        break;
      }

      case FaParser::QHuaLQHuaL: {
        enterOuterAlt(_localctx, 2);
        setState(372);
        match(FaParser::QHuaLQHuaL);
        break;
      }

      case FaParser::QHuaRQHuaR: {
        enterOuterAlt(_localctx, 3);
        setState(373);
        match(FaParser::QHuaRQHuaR);
        break;
      }

      case FaParser::VerbatiumDoubleQuoteInside: {
        enterOuterAlt(_localctx, 4);
        setState(374);
        match(FaParser::VerbatiumDoubleQuoteInside);
        break;
      }

      case FaParser::VerbatiumInsideString: {
        enterOuterAlt(_localctx, 5);
        setState(375);
        match(FaParser::VerbatiumInsideString);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormatString2Context ------------------------------------------------------------------

FaParser::FormatString2Context::FormatString2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::FormatString2Context::FmtString2() {
  return getToken(FaParser::FmtString2, 0);
}

tree::TerminalNode* FaParser::FormatString2Context::DoubleQuoteInside() {
  return getToken(FaParser::DoubleQuoteInside, 0);
}

std::vector<FaParser::FormatString2PartContext *> FaParser::FormatString2Context::formatString2Part() {
  return getRuleContexts<FaParser::FormatString2PartContext>();
}

FaParser::FormatString2PartContext* FaParser::FormatString2Context::formatString2Part(size_t i) {
  return getRuleContext<FaParser::FormatString2PartContext>(i);
}


size_t FaParser::FormatString2Context::getRuleIndex() const {
  return FaParser::RuleFormatString2;
}


std::any FaParser::FormatString2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitFormatString2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::FormatString2Context* FaParser::formatString2() {
  FormatString2Context *_localctx = _tracker.createInstance<FormatString2Context>(_ctx, getState());
  enterRule(_localctx, 48, FaParser::RuleFormatString2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(378);
    match(FaParser::FmtString2);
    setState(382);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Calc)
      | (1ULL << FaParser::Cast)
      | (1ULL << FaParser::Expr)
      | (1ULL << FaParser::New)
      | (1ULL << FaParser::Stmt)
      | (1ULL << FaParser::ReverseOp)
      | (1ULL << FaParser::AddAddOp)
      | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
      | (1ULL << (FaParser::SubOp - 64))
      | (1ULL << (FaParser::ColonColon - 64))
      | (1ULL << (FaParser::QFangL - 64))
      | (1ULL << (FaParser::QYuanL - 64))
      | (1ULL << (FaParser::BoolLiteral - 64))
      | (1ULL << (FaParser::HexLiteral - 64))
      | (1ULL << (FaParser::IntLiteral - 64))
      | (1ULL << (FaParser::FloatLiteral - 64))
      | (1ULL << (FaParser::String1Literal - 64))
      | (1ULL << (FaParser::String2Literal - 64))
      | (1ULL << (FaParser::String3Literal - 64))
      | (1ULL << (FaParser::FmtString1 - 64))
      | (1ULL << (FaParser::FmtString2 - 64))
      | (1ULL << (FaParser::Id - 64))
      | (1ULL << (FaParser::QHuaLQHuaL - 64))
      | (1ULL << (FaParser::QHuaRQHuaR - 64))
      | (1ULL << (FaParser::VerbatiumDoubleQuoteInside - 64))
      | (1ULL << (FaParser::VerbatiumInsideString - 64)))) != 0)) {
      setState(379);
      formatString2Part();
      setState(384);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(385);
    match(FaParser::DoubleQuoteInside);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLiteralContext ------------------------------------------------------------------

FaParser::StringLiteralContext::StringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::StringLiteralContext::String1Literal() {
  return getToken(FaParser::String1Literal, 0);
}

tree::TerminalNode* FaParser::StringLiteralContext::String2Literal() {
  return getToken(FaParser::String2Literal, 0);
}

tree::TerminalNode* FaParser::StringLiteralContext::String3Literal() {
  return getToken(FaParser::String3Literal, 0);
}

FaParser::FormatString1Context* FaParser::StringLiteralContext::formatString1() {
  return getRuleContext<FaParser::FormatString1Context>(0);
}

FaParser::FormatString2Context* FaParser::StringLiteralContext::formatString2() {
  return getRuleContext<FaParser::FormatString2Context>(0);
}


size_t FaParser::StringLiteralContext::getRuleIndex() const {
  return FaParser::RuleStringLiteral;
}


std::any FaParser::StringLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitStringLiteral(this);
  else
    return visitor->visitChildren(this);
}

FaParser::StringLiteralContext* FaParser::stringLiteral() {
  StringLiteralContext *_localctx = _tracker.createInstance<StringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 50, FaParser::RuleStringLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(392);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::String1Literal: {
        enterOuterAlt(_localctx, 1);
        setState(387);
        match(FaParser::String1Literal);
        break;
      }

      case FaParser::String2Literal: {
        enterOuterAlt(_localctx, 2);
        setState(388);
        match(FaParser::String2Literal);
        break;
      }

      case FaParser::String3Literal: {
        enterOuterAlt(_localctx, 3);
        setState(389);
        match(FaParser::String3Literal);
        break;
      }

      case FaParser::FmtString1: {
        enterOuterAlt(_localctx, 4);
        setState(390);
        formatString1();
        break;
      }

      case FaParser::FmtString2: {
        enterOuterAlt(_localctx, 5);
        setState(391);
        formatString2();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

FaParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::LiteralContext::BoolLiteral() {
  return getToken(FaParser::BoolLiteral, 0);
}

tree::TerminalNode* FaParser::LiteralContext::HexLiteral() {
  return getToken(FaParser::HexLiteral, 0);
}

FaParser::IntNumContext* FaParser::LiteralContext::intNum() {
  return getRuleContext<FaParser::IntNumContext>(0);
}

FaParser::FloatNumContext* FaParser::LiteralContext::floatNum() {
  return getRuleContext<FaParser::FloatNumContext>(0);
}

FaParser::StringLiteralContext* FaParser::LiteralContext::stringLiteral() {
  return getRuleContext<FaParser::StringLiteralContext>(0);
}


size_t FaParser::LiteralContext::getRuleIndex() const {
  return FaParser::RuleLiteral;
}


std::any FaParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

FaParser::LiteralContext* FaParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 52, FaParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(399);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(394);
      match(FaParser::BoolLiteral);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(395);
      match(FaParser::HexLiteral);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(396);
      intNum();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(397);
      floatNum();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(398);
      stringLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdsContext ------------------------------------------------------------------

FaParser::IdsContext::IdsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FaParser::IdsContext::Id() {
  return getTokens(FaParser::Id);
}

tree::TerminalNode* FaParser::IdsContext::Id(size_t i) {
  return getToken(FaParser::Id, i);
}

std::vector<tree::TerminalNode *> FaParser::IdsContext::PointOp() {
  return getTokens(FaParser::PointOp);
}

tree::TerminalNode* FaParser::IdsContext::PointOp(size_t i) {
  return getToken(FaParser::PointOp, i);
}


size_t FaParser::IdsContext::getRuleIndex() const {
  return FaParser::RuleIds;
}


std::any FaParser::IdsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitIds(this);
  else
    return visitor->visitChildren(this);
}

FaParser::IdsContext* FaParser::ids() {
  IdsContext *_localctx = _tracker.createInstance<IdsContext>(_ctx, getState());
  enterRule(_localctx, 54, FaParser::RuleIds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(401);
    match(FaParser::Id);
    setState(406);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(402);
        match(FaParser::PointOp);
        setState(403);
        match(FaParser::Id); 
      }
      setState(408);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeAfterContext ------------------------------------------------------------------

FaParser::TypeAfterContext::TypeAfterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::QuotFangLContext* FaParser::TypeAfterContext::quotFangL() {
  return getRuleContext<FaParser::QuotFangLContext>(0);
}

FaParser::QuotFangRContext* FaParser::TypeAfterContext::quotFangR() {
  return getRuleContext<FaParser::QuotFangRContext>(0);
}

tree::TerminalNode* FaParser::TypeAfterContext::Qus() {
  return getToken(FaParser::Qus, 0);
}

tree::TerminalNode* FaParser::TypeAfterContext::ColonColon() {
  return getToken(FaParser::ColonColon, 0);
}

tree::TerminalNode* FaParser::TypeAfterContext::Base() {
  return getToken(FaParser::Base, 0);
}

tree::TerminalNode* FaParser::TypeAfterContext::IntLiteral() {
  return getToken(FaParser::IntLiteral, 0);
}

FaParser::QuotJianLContext* FaParser::TypeAfterContext::quotJianL() {
  return getRuleContext<FaParser::QuotJianLContext>(0);
}

FaParser::TypesContext* FaParser::TypeAfterContext::types() {
  return getRuleContext<FaParser::TypesContext>(0);
}

FaParser::QuotJianRContext* FaParser::TypeAfterContext::quotJianR() {
  return getRuleContext<FaParser::QuotJianRContext>(0);
}


size_t FaParser::TypeAfterContext::getRuleIndex() const {
  return FaParser::RuleTypeAfter;
}


std::any FaParser::TypeAfterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeAfter(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeAfterContext* FaParser::typeAfter() {
  TypeAfterContext *_localctx = _tracker.createInstance<TypeAfterContext>(_ctx, getState());
  enterRule(_localctx, 56, FaParser::RuleTypeAfter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(419);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::QFangL: {
        enterOuterAlt(_localctx, 1);
        setState(409);
        quotFangL();
        setState(410);
        quotFangR();
        break;
      }

      case FaParser::Qus: {
        enterOuterAlt(_localctx, 2);
        setState(412);
        match(FaParser::Qus);
        break;
      }

      case FaParser::ColonColon: {
        enterOuterAlt(_localctx, 3);
        setState(413);
        match(FaParser::ColonColon);
        setState(414);
        _la = _input->LA(1);
        if (!(_la == FaParser::Base || _la == FaParser::IntLiteral)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case FaParser::LessThan: {
        enterOuterAlt(_localctx, 4);
        setState(415);
        quotJianL();
        setState(416);
        types();
        setState(417);
        quotJianR();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeTupleContext ------------------------------------------------------------------

FaParser::TypeTupleContext::TypeTupleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::QuotYuanLContext* FaParser::TypeTupleContext::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

std::vector<FaParser::TypeVarContext *> FaParser::TypeTupleContext::typeVar() {
  return getRuleContexts<FaParser::TypeVarContext>();
}

FaParser::TypeVarContext* FaParser::TypeTupleContext::typeVar(size_t i) {
  return getRuleContext<FaParser::TypeVarContext>(i);
}

FaParser::QuotYuanRContext* FaParser::TypeTupleContext::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}

std::vector<tree::TerminalNode *> FaParser::TypeTupleContext::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::TypeTupleContext::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::TypeTupleContext::getRuleIndex() const {
  return FaParser::RuleTypeTuple;
}


std::any FaParser::TypeTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeTuple(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeTupleContext* FaParser::typeTuple() {
  TypeTupleContext *_localctx = _tracker.createInstance<TypeTupleContext>(_ctx, getState());
  enterRule(_localctx, 58, FaParser::RuleTypeTuple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(421);
    quotYuanL();
    setState(422);
    typeVar();
    setState(425); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(423);
      match(FaParser::Comma);
      setState(424);
      typeVar();
      setState(427); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FaParser::Comma);
    setState(429);
    quotYuanR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypesContext ------------------------------------------------------------------

FaParser::TypesContext::TypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::TypeContext *> FaParser::TypesContext::type() {
  return getRuleContexts<FaParser::TypeContext>();
}

FaParser::TypeContext* FaParser::TypesContext::type(size_t i) {
  return getRuleContext<FaParser::TypeContext>(i);
}

std::vector<tree::TerminalNode *> FaParser::TypesContext::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::TypesContext::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::TypesContext::getRuleIndex() const {
  return FaParser::RuleTypes;
}


std::any FaParser::TypesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypes(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypesContext* FaParser::types() {
  TypesContext *_localctx = _tracker.createInstance<TypesContext>(_ctx, getState());
  enterRule(_localctx, 60, FaParser::RuleTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(431);
    type();
    setState(436);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Comma) {
      setState(432);
      match(FaParser::Comma);
      setState(433);
      type();
      setState(438);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

FaParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::IdsContext* FaParser::TypeContext::ids() {
  return getRuleContext<FaParser::IdsContext>(0);
}

FaParser::TypeTupleContext* FaParser::TypeContext::typeTuple() {
  return getRuleContext<FaParser::TypeTupleContext>(0);
}

tree::TerminalNode* FaParser::TypeContext::Type() {
  return getToken(FaParser::Type, 0);
}

std::vector<FaParser::TypeAfterContext *> FaParser::TypeContext::typeAfter() {
  return getRuleContexts<FaParser::TypeAfterContext>();
}

FaParser::TypeAfterContext* FaParser::TypeContext::typeAfter(size_t i) {
  return getRuleContext<FaParser::TypeAfterContext>(i);
}


size_t FaParser::TypeContext::getRuleIndex() const {
  return FaParser::RuleType;
}


std::any FaParser::TypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitType(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeContext* FaParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 62, FaParser::RuleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(442);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::Id: {
        setState(439);
        ids();
        break;
      }

      case FaParser::QYuanL: {
        setState(440);
        typeTuple();
        break;
      }

      case FaParser::Type: {
        setState(441);
        match(FaParser::Type);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(447);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(444);
        typeAfter(); 
      }
      setState(449);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgAttrContext ------------------------------------------------------------------

FaParser::ArgAttrContext::ArgAttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::ArgAttrContext::Mut() {
  return getToken(FaParser::Mut, 0);
}

tree::TerminalNode* FaParser::ArgAttrContext::Params() {
  return getToken(FaParser::Params, 0);
}

tree::TerminalNode* FaParser::ArgAttrContext::Disperse() {
  return getToken(FaParser::Disperse, 0);
}


size_t FaParser::ArgAttrContext::getRuleIndex() const {
  return FaParser::RuleArgAttr;
}


std::any FaParser::ArgAttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitArgAttr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ArgAttrContext* FaParser::argAttr() {
  ArgAttrContext *_localctx = _tracker.createInstance<ArgAttrContext>(_ctx, getState());
  enterRule(_localctx, 64, FaParser::RuleArgAttr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(450);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Disperse)
      | (1ULL << FaParser::Mut)
      | (1ULL << FaParser::Params))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeVarContext ------------------------------------------------------------------

FaParser::TypeVarContext::TypeVarContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::TypeContext* FaParser::TypeVarContext::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}

tree::TerminalNode* FaParser::TypeVarContext::Id() {
  return getToken(FaParser::Id, 0);
}


size_t FaParser::TypeVarContext::getRuleIndex() const {
  return FaParser::RuleTypeVar;
}


std::any FaParser::TypeVarContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeVar(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeVarContext* FaParser::typeVar() {
  TypeVarContext *_localctx = _tracker.createInstance<TypeVarContext>(_ctx, getState());
  enterRule(_localctx, 66, FaParser::RuleTypeVar);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(452);
    type();
    setState(454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Id) {
      setState(453);
      match(FaParser::Id);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeVarListContext ------------------------------------------------------------------

FaParser::TypeVarListContext::TypeVarListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::TypeVarContext *> FaParser::TypeVarListContext::typeVar() {
  return getRuleContexts<FaParser::TypeVarContext>();
}

FaParser::TypeVarContext* FaParser::TypeVarListContext::typeVar(size_t i) {
  return getRuleContext<FaParser::TypeVarContext>(i);
}

std::vector<tree::TerminalNode *> FaParser::TypeVarListContext::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::TypeVarListContext::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::TypeVarListContext::getRuleIndex() const {
  return FaParser::RuleTypeVarList;
}


std::any FaParser::TypeVarListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeVarList(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeVarListContext* FaParser::typeVarList() {
  TypeVarListContext *_localctx = _tracker.createInstance<TypeVarListContext>(_ctx, getState());
  enterRule(_localctx, 68, FaParser::RuleTypeVarList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(456);
    typeVar();
    setState(461);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Comma) {
      setState(457);
      match(FaParser::Comma);
      setState(458);
      typeVar();
      setState(463);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeWrapVar1Context ------------------------------------------------------------------

FaParser::TypeWrapVar1Context::TypeWrapVar1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::TypeWrapVar1Context::Id() {
  return getToken(FaParser::Id, 0);
}

tree::TerminalNode* FaParser::TypeWrapVar1Context::Colon() {
  return getToken(FaParser::Colon, 0);
}

FaParser::TypeContext* FaParser::TypeWrapVar1Context::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}

FaParser::ArgAttrContext* FaParser::TypeWrapVar1Context::argAttr() {
  return getRuleContext<FaParser::ArgAttrContext>(0);
}


size_t FaParser::TypeWrapVar1Context::getRuleIndex() const {
  return FaParser::RuleTypeWrapVar1;
}


std::any FaParser::TypeWrapVar1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeWrapVar1(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeWrapVar1Context* FaParser::typeWrapVar1() {
  TypeWrapVar1Context *_localctx = _tracker.createInstance<TypeWrapVar1Context>(_ctx, getState());
  enterRule(_localctx, 70, FaParser::RuleTypeWrapVar1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(465);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Disperse)
      | (1ULL << FaParser::Mut)
      | (1ULL << FaParser::Params))) != 0)) {
      setState(464);
      argAttr();
    }
    setState(467);
    match(FaParser::Id);
    setState(468);
    match(FaParser::Colon);
    setState(469);
    type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeWrapVarList1Context ------------------------------------------------------------------

FaParser::TypeWrapVarList1Context::TypeWrapVarList1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::TypeWrapVar1Context *> FaParser::TypeWrapVarList1Context::typeWrapVar1() {
  return getRuleContexts<FaParser::TypeWrapVar1Context>();
}

FaParser::TypeWrapVar1Context* FaParser::TypeWrapVarList1Context::typeWrapVar1(size_t i) {
  return getRuleContext<FaParser::TypeWrapVar1Context>(i);
}

std::vector<tree::TerminalNode *> FaParser::TypeWrapVarList1Context::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::TypeWrapVarList1Context::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::TypeWrapVarList1Context::getRuleIndex() const {
  return FaParser::RuleTypeWrapVarList1;
}


std::any FaParser::TypeWrapVarList1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeWrapVarList1(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeWrapVarList1Context* FaParser::typeWrapVarList1() {
  TypeWrapVarList1Context *_localctx = _tracker.createInstance<TypeWrapVarList1Context>(_ctx, getState());
  enterRule(_localctx, 72, FaParser::RuleTypeWrapVarList1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(471);
    typeWrapVar1();
    setState(476);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Comma) {
      setState(472);
      match(FaParser::Comma);
      setState(473);
      typeWrapVar1();
      setState(478);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeWrapVar2Context ------------------------------------------------------------------

FaParser::TypeWrapVar2Context::TypeWrapVar2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::TypeContext* FaParser::TypeWrapVar2Context::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}

FaParser::ArgAttrContext* FaParser::TypeWrapVar2Context::argAttr() {
  return getRuleContext<FaParser::ArgAttrContext>(0);
}

tree::TerminalNode* FaParser::TypeWrapVar2Context::Id() {
  return getToken(FaParser::Id, 0);
}


size_t FaParser::TypeWrapVar2Context::getRuleIndex() const {
  return FaParser::RuleTypeWrapVar2;
}


std::any FaParser::TypeWrapVar2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeWrapVar2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeWrapVar2Context* FaParser::typeWrapVar2() {
  TypeWrapVar2Context *_localctx = _tracker.createInstance<TypeWrapVar2Context>(_ctx, getState());
  enterRule(_localctx, 74, FaParser::RuleTypeWrapVar2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(480);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Disperse)
      | (1ULL << FaParser::Mut)
      | (1ULL << FaParser::Params))) != 0)) {
      setState(479);
      argAttr();
    }
    setState(482);
    type();
    setState(484);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Id) {
      setState(483);
      match(FaParser::Id);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeWrapVarList2Context ------------------------------------------------------------------

FaParser::TypeWrapVarList2Context::TypeWrapVarList2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::TypeWrapVar2Context *> FaParser::TypeWrapVarList2Context::typeWrapVar2() {
  return getRuleContexts<FaParser::TypeWrapVar2Context>();
}

FaParser::TypeWrapVar2Context* FaParser::TypeWrapVarList2Context::typeWrapVar2(size_t i) {
  return getRuleContext<FaParser::TypeWrapVar2Context>(i);
}

std::vector<tree::TerminalNode *> FaParser::TypeWrapVarList2Context::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::TypeWrapVarList2Context::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::TypeWrapVarList2Context::getRuleIndex() const {
  return FaParser::RuleTypeWrapVarList2;
}


std::any FaParser::TypeWrapVarList2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeWrapVarList2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeWrapVarList2Context* FaParser::typeWrapVarList2() {
  TypeWrapVarList2Context *_localctx = _tracker.createInstance<TypeWrapVarList2Context>(_ctx, getState());
  enterRule(_localctx, 76, FaParser::RuleTypeWrapVarList2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(486);
    typeWrapVar2();
    setState(491);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Comma) {
      setState(487);
      match(FaParser::Comma);
      setState(488);
      typeWrapVar2();
      setState(493);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeWrapVar3Context ------------------------------------------------------------------

FaParser::TypeWrapVar3Context::TypeWrapVar3Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::TypeWrapVar3Context::Id() {
  return getToken(FaParser::Id, 0);
}

FaParser::TypeContext* FaParser::TypeWrapVar3Context::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}

FaParser::ArgAttrContext* FaParser::TypeWrapVar3Context::argAttr() {
  return getRuleContext<FaParser::ArgAttrContext>(0);
}


size_t FaParser::TypeWrapVar3Context::getRuleIndex() const {
  return FaParser::RuleTypeWrapVar3;
}


std::any FaParser::TypeWrapVar3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeWrapVar3(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeWrapVar3Context* FaParser::typeWrapVar3() {
  TypeWrapVar3Context *_localctx = _tracker.createInstance<TypeWrapVar3Context>(_ctx, getState());
  enterRule(_localctx, 78, FaParser::RuleTypeWrapVar3);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(498);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(495);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << FaParser::Disperse)
        | (1ULL << FaParser::Mut)
        | (1ULL << FaParser::Params))) != 0)) {
        setState(494);
        argAttr();
      }
      setState(497);
      type();
      break;
    }

    default:
      break;
    }
    setState(500);
    match(FaParser::Id);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeWrapVarList3Context ------------------------------------------------------------------

FaParser::TypeWrapVarList3Context::TypeWrapVarList3Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::TypeWrapVar3Context *> FaParser::TypeWrapVarList3Context::typeWrapVar3() {
  return getRuleContexts<FaParser::TypeWrapVar3Context>();
}

FaParser::TypeWrapVar3Context* FaParser::TypeWrapVarList3Context::typeWrapVar3(size_t i) {
  return getRuleContext<FaParser::TypeWrapVar3Context>(i);
}

std::vector<tree::TerminalNode *> FaParser::TypeWrapVarList3Context::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::TypeWrapVarList3Context::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::TypeWrapVarList3Context::getRuleIndex() const {
  return FaParser::RuleTypeWrapVarList3;
}


std::any FaParser::TypeWrapVarList3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeWrapVarList3(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeWrapVarList3Context* FaParser::typeWrapVarList3() {
  TypeWrapVarList3Context *_localctx = _tracker.createInstance<TypeWrapVarList3Context>(_ctx, getState());
  enterRule(_localctx, 80, FaParser::RuleTypeWrapVarList3);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(502);
    typeWrapVar3();
    setState(507);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Comma) {
      setState(503);
      match(FaParser::Comma);
      setState(504);
      typeWrapVar3();
      setState(509);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeWrapVar4Context ------------------------------------------------------------------

FaParser::TypeWrapVar4Context::TypeWrapVar4Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::TypeWrapVar4Context::Id() {
  return getToken(FaParser::Id, 0);
}

FaParser::ArgAttrContext* FaParser::TypeWrapVar4Context::argAttr() {
  return getRuleContext<FaParser::ArgAttrContext>(0);
}

tree::TerminalNode* FaParser::TypeWrapVar4Context::Colon() {
  return getToken(FaParser::Colon, 0);
}

FaParser::TypeContext* FaParser::TypeWrapVar4Context::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}


size_t FaParser::TypeWrapVar4Context::getRuleIndex() const {
  return FaParser::RuleTypeWrapVar4;
}


std::any FaParser::TypeWrapVar4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeWrapVar4(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeWrapVar4Context* FaParser::typeWrapVar4() {
  TypeWrapVar4Context *_localctx = _tracker.createInstance<TypeWrapVar4Context>(_ctx, getState());
  enterRule(_localctx, 82, FaParser::RuleTypeWrapVar4);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(511);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Disperse)
      | (1ULL << FaParser::Mut)
      | (1ULL << FaParser::Params))) != 0)) {
      setState(510);
      argAttr();
    }
    setState(513);
    match(FaParser::Id);
    setState(516);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Colon) {
      setState(514);
      match(FaParser::Colon);
      setState(515);
      type();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeWrapVarList4Context ------------------------------------------------------------------

FaParser::TypeWrapVarList4Context::TypeWrapVarList4Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::TypeWrapVar4Context *> FaParser::TypeWrapVarList4Context::typeWrapVar4() {
  return getRuleContexts<FaParser::TypeWrapVar4Context>();
}

FaParser::TypeWrapVar4Context* FaParser::TypeWrapVarList4Context::typeWrapVar4(size_t i) {
  return getRuleContext<FaParser::TypeWrapVar4Context>(i);
}

std::vector<tree::TerminalNode *> FaParser::TypeWrapVarList4Context::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::TypeWrapVarList4Context::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::TypeWrapVarList4Context::getRuleIndex() const {
  return FaParser::RuleTypeWrapVarList4;
}


std::any FaParser::TypeWrapVarList4Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeWrapVarList4(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeWrapVarList4Context* FaParser::typeWrapVarList4() {
  TypeWrapVarList4Context *_localctx = _tracker.createInstance<TypeWrapVarList4Context>(_ctx, getState());
  enterRule(_localctx, 84, FaParser::RuleTypeWrapVarList4);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(518);
    typeWrapVar4();
    setState(523);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Comma) {
      setState(519);
      match(FaParser::Comma);
      setState(520);
      typeWrapVar4();
      setState(525);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotStmtPartContext ------------------------------------------------------------------

FaParser::QuotStmtPartContext::QuotStmtPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::QuotHuaLContext* FaParser::QuotStmtPartContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::QuotStmtPartContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

std::vector<FaParser::StmtContext *> FaParser::QuotStmtPartContext::stmt() {
  return getRuleContexts<FaParser::StmtContext>();
}

FaParser::StmtContext* FaParser::QuotStmtPartContext::stmt(size_t i) {
  return getRuleContext<FaParser::StmtContext>(i);
}


size_t FaParser::QuotStmtPartContext::getRuleIndex() const {
  return FaParser::RuleQuotStmtPart;
}


std::any FaParser::QuotStmtPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotStmtPart(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotStmtPartContext* FaParser::quotStmtPart() {
  QuotStmtPartContext *_localctx = _tracker.createInstance<QuotStmtPartContext>(_ctx, getState());
  enterRule(_localctx, 86, FaParser::RuleQuotStmtPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(526);
    quotHuaL();
    setState(530);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Break)
      | (1ULL << FaParser::Calc)
      | (1ULL << FaParser::Continue)
      | (1ULL << FaParser::Cast)
      | (1ULL << FaParser::Do)
      | (1ULL << FaParser::Expr)
      | (1ULL << FaParser::For)
      | (1ULL << FaParser::If)
      | (1ULL << FaParser::New)
      | (1ULL << FaParser::Return)
      | (1ULL << FaParser::Stmt)
      | (1ULL << FaParser::Switch)
      | (1ULL << FaParser::Type)
      | (1ULL << FaParser::AstClassVar)
      | (1ULL << FaParser::While)
      | (1ULL << FaParser::ReverseOp)
      | (1ULL << FaParser::AddAddOp)
      | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
      | (1ULL << (FaParser::SubOp - 64))
      | (1ULL << (FaParser::ColonColon - 64))
      | (1ULL << (FaParser::QFangL - 64))
      | (1ULL << (FaParser::QHuaL - 64))
      | (1ULL << (FaParser::QYuanL - 64))
      | (1ULL << (FaParser::BoolLiteral - 64))
      | (1ULL << (FaParser::HexLiteral - 64))
      | (1ULL << (FaParser::IntLiteral - 64))
      | (1ULL << (FaParser::FloatLiteral - 64))
      | (1ULL << (FaParser::String1Literal - 64))
      | (1ULL << (FaParser::String2Literal - 64))
      | (1ULL << (FaParser::String3Literal - 64))
      | (1ULL << (FaParser::FmtString1 - 64))
      | (1ULL << (FaParser::FmtString2 - 64))
      | (1ULL << (FaParser::Id - 64)))) != 0)) {
      setState(527);
      stmt();
      setState(532);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(533);
    quotHuaR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

FaParser::IfStmtContext::IfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FaParser::IfStmtContext::If() {
  return getTokens(FaParser::If);
}

tree::TerminalNode* FaParser::IfStmtContext::If(size_t i) {
  return getToken(FaParser::If, i);
}

std::vector<FaParser::MiddleExprContext *> FaParser::IfStmtContext::middleExpr() {
  return getRuleContexts<FaParser::MiddleExprContext>();
}

FaParser::MiddleExprContext* FaParser::IfStmtContext::middleExpr(size_t i) {
  return getRuleContext<FaParser::MiddleExprContext>(i);
}

std::vector<FaParser::QuotStmtPartContext *> FaParser::IfStmtContext::quotStmtPart() {
  return getRuleContexts<FaParser::QuotStmtPartContext>();
}

FaParser::QuotStmtPartContext* FaParser::IfStmtContext::quotStmtPart(size_t i) {
  return getRuleContext<FaParser::QuotStmtPartContext>(i);
}

FaParser::EndlContext* FaParser::IfStmtContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<tree::TerminalNode *> FaParser::IfStmtContext::Else() {
  return getTokens(FaParser::Else);
}

tree::TerminalNode* FaParser::IfStmtContext::Else(size_t i) {
  return getToken(FaParser::Else, i);
}


size_t FaParser::IfStmtContext::getRuleIndex() const {
  return FaParser::RuleIfStmt;
}


std::any FaParser::IfStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitIfStmt(this);
  else
    return visitor->visitChildren(this);
}

FaParser::IfStmtContext* FaParser::ifStmt() {
  IfStmtContext *_localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
  enterRule(_localctx, 88, FaParser::RuleIfStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(535);
    match(FaParser::If);
    setState(536);
    middleExpr();
    setState(537);
    quotStmtPart();
    setState(545);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(538);
        match(FaParser::Else);
        setState(539);
        match(FaParser::If);
        setState(540);
        middleExpr();
        setState(541);
        quotStmtPart(); 
      }
      setState(547);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    }
    setState(550);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Else) {
      setState(548);
      match(FaParser::Else);
      setState(549);
      quotStmtPart();
    }
    setState(552);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotStmtExprContext ------------------------------------------------------------------

FaParser::QuotStmtExprContext::QuotStmtExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::QuotHuaLContext* FaParser::QuotStmtExprContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::ExprContext* FaParser::QuotStmtExprContext::expr() {
  return getRuleContext<FaParser::ExprContext>(0);
}

FaParser::QuotHuaRContext* FaParser::QuotStmtExprContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

std::vector<FaParser::StmtContext *> FaParser::QuotStmtExprContext::stmt() {
  return getRuleContexts<FaParser::StmtContext>();
}

FaParser::StmtContext* FaParser::QuotStmtExprContext::stmt(size_t i) {
  return getRuleContext<FaParser::StmtContext>(i);
}


size_t FaParser::QuotStmtExprContext::getRuleIndex() const {
  return FaParser::RuleQuotStmtExpr;
}


std::any FaParser::QuotStmtExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotStmtExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotStmtExprContext* FaParser::quotStmtExpr() {
  QuotStmtExprContext *_localctx = _tracker.createInstance<QuotStmtExprContext>(_ctx, getState());
  enterRule(_localctx, 90, FaParser::RuleQuotStmtExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(554);
    quotHuaL();
    setState(558);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(555);
        stmt(); 
      }
      setState(560);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    }
    setState(561);
    expr();
    setState(562);
    quotHuaR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfExprContext ------------------------------------------------------------------

FaParser::IfExprContext::IfExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FaParser::IfExprContext::If() {
  return getTokens(FaParser::If);
}

tree::TerminalNode* FaParser::IfExprContext::If(size_t i) {
  return getToken(FaParser::If, i);
}

std::vector<FaParser::MiddleExprContext *> FaParser::IfExprContext::middleExpr() {
  return getRuleContexts<FaParser::MiddleExprContext>();
}

FaParser::MiddleExprContext* FaParser::IfExprContext::middleExpr(size_t i) {
  return getRuleContext<FaParser::MiddleExprContext>(i);
}

std::vector<FaParser::QuotStmtExprContext *> FaParser::IfExprContext::quotStmtExpr() {
  return getRuleContexts<FaParser::QuotStmtExprContext>();
}

FaParser::QuotStmtExprContext* FaParser::IfExprContext::quotStmtExpr(size_t i) {
  return getRuleContext<FaParser::QuotStmtExprContext>(i);
}

std::vector<tree::TerminalNode *> FaParser::IfExprContext::Else() {
  return getTokens(FaParser::Else);
}

tree::TerminalNode* FaParser::IfExprContext::Else(size_t i) {
  return getToken(FaParser::Else, i);
}


size_t FaParser::IfExprContext::getRuleIndex() const {
  return FaParser::RuleIfExpr;
}


std::any FaParser::IfExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitIfExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::IfExprContext* FaParser::ifExpr() {
  IfExprContext *_localctx = _tracker.createInstance<IfExprContext>(_ctx, getState());
  enterRule(_localctx, 92, FaParser::RuleIfExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(564);
    match(FaParser::If);
    setState(565);
    middleExpr();
    setState(566);
    quotStmtExpr();
    setState(574);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(567);
        match(FaParser::Else);
        setState(568);
        match(FaParser::If);
        setState(569);
        middleExpr();
        setState(570);
        quotStmtExpr(); 
      }
      setState(576);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx);
    }
    setState(577);
    match(FaParser::Else);
    setState(578);
    quotStmtExpr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStmtContext ------------------------------------------------------------------

FaParser::WhileStmtContext::WhileStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::WhileStmtContext::While() {
  return getToken(FaParser::While, 0);
}

FaParser::MiddleExprContext* FaParser::WhileStmtContext::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}

FaParser::QuotHuaLContext* FaParser::WhileStmtContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::WhileStmtContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

FaParser::EndlContext* FaParser::WhileStmtContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<FaParser::StmtContext *> FaParser::WhileStmtContext::stmt() {
  return getRuleContexts<FaParser::StmtContext>();
}

FaParser::StmtContext* FaParser::WhileStmtContext::stmt(size_t i) {
  return getRuleContext<FaParser::StmtContext>(i);
}


size_t FaParser::WhileStmtContext::getRuleIndex() const {
  return FaParser::RuleWhileStmt;
}


std::any FaParser::WhileStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitWhileStmt(this);
  else
    return visitor->visitChildren(this);
}

FaParser::WhileStmtContext* FaParser::whileStmt() {
  WhileStmtContext *_localctx = _tracker.createInstance<WhileStmtContext>(_ctx, getState());
  enterRule(_localctx, 94, FaParser::RuleWhileStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(580);
    match(FaParser::While);
    setState(581);
    middleExpr();
    setState(582);
    quotHuaL();
    setState(586);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Break)
      | (1ULL << FaParser::Calc)
      | (1ULL << FaParser::Continue)
      | (1ULL << FaParser::Cast)
      | (1ULL << FaParser::Do)
      | (1ULL << FaParser::Expr)
      | (1ULL << FaParser::For)
      | (1ULL << FaParser::If)
      | (1ULL << FaParser::New)
      | (1ULL << FaParser::Return)
      | (1ULL << FaParser::Stmt)
      | (1ULL << FaParser::Switch)
      | (1ULL << FaParser::Type)
      | (1ULL << FaParser::AstClassVar)
      | (1ULL << FaParser::While)
      | (1ULL << FaParser::ReverseOp)
      | (1ULL << FaParser::AddAddOp)
      | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
      | (1ULL << (FaParser::SubOp - 64))
      | (1ULL << (FaParser::ColonColon - 64))
      | (1ULL << (FaParser::QFangL - 64))
      | (1ULL << (FaParser::QHuaL - 64))
      | (1ULL << (FaParser::QYuanL - 64))
      | (1ULL << (FaParser::BoolLiteral - 64))
      | (1ULL << (FaParser::HexLiteral - 64))
      | (1ULL << (FaParser::IntLiteral - 64))
      | (1ULL << (FaParser::FloatLiteral - 64))
      | (1ULL << (FaParser::String1Literal - 64))
      | (1ULL << (FaParser::String2Literal - 64))
      | (1ULL << (FaParser::String3Literal - 64))
      | (1ULL << (FaParser::FmtString1 - 64))
      | (1ULL << (FaParser::FmtString2 - 64))
      | (1ULL << (FaParser::Id - 64)))) != 0)) {
      setState(583);
      stmt();
      setState(588);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(589);
    quotHuaR();
    setState(590);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStmt2Context ------------------------------------------------------------------

FaParser::WhileStmt2Context::WhileStmt2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::WhileStmt2Context::Do() {
  return getToken(FaParser::Do, 0);
}

FaParser::QuotHuaLContext* FaParser::WhileStmt2Context::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::WhileStmt2Context::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

tree::TerminalNode* FaParser::WhileStmt2Context::While() {
  return getToken(FaParser::While, 0);
}

FaParser::MiddleExprContext* FaParser::WhileStmt2Context::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}

FaParser::EndlContext* FaParser::WhileStmt2Context::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<FaParser::StmtContext *> FaParser::WhileStmt2Context::stmt() {
  return getRuleContexts<FaParser::StmtContext>();
}

FaParser::StmtContext* FaParser::WhileStmt2Context::stmt(size_t i) {
  return getRuleContext<FaParser::StmtContext>(i);
}


size_t FaParser::WhileStmt2Context::getRuleIndex() const {
  return FaParser::RuleWhileStmt2;
}


std::any FaParser::WhileStmt2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitWhileStmt2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::WhileStmt2Context* FaParser::whileStmt2() {
  WhileStmt2Context *_localctx = _tracker.createInstance<WhileStmt2Context>(_ctx, getState());
  enterRule(_localctx, 96, FaParser::RuleWhileStmt2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    match(FaParser::Do);
    setState(593);
    quotHuaL();
    setState(597);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Break)
      | (1ULL << FaParser::Calc)
      | (1ULL << FaParser::Continue)
      | (1ULL << FaParser::Cast)
      | (1ULL << FaParser::Do)
      | (1ULL << FaParser::Expr)
      | (1ULL << FaParser::For)
      | (1ULL << FaParser::If)
      | (1ULL << FaParser::New)
      | (1ULL << FaParser::Return)
      | (1ULL << FaParser::Stmt)
      | (1ULL << FaParser::Switch)
      | (1ULL << FaParser::Type)
      | (1ULL << FaParser::AstClassVar)
      | (1ULL << FaParser::While)
      | (1ULL << FaParser::ReverseOp)
      | (1ULL << FaParser::AddAddOp)
      | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
      | (1ULL << (FaParser::SubOp - 64))
      | (1ULL << (FaParser::ColonColon - 64))
      | (1ULL << (FaParser::QFangL - 64))
      | (1ULL << (FaParser::QHuaL - 64))
      | (1ULL << (FaParser::QYuanL - 64))
      | (1ULL << (FaParser::BoolLiteral - 64))
      | (1ULL << (FaParser::HexLiteral - 64))
      | (1ULL << (FaParser::IntLiteral - 64))
      | (1ULL << (FaParser::FloatLiteral - 64))
      | (1ULL << (FaParser::String1Literal - 64))
      | (1ULL << (FaParser::String2Literal - 64))
      | (1ULL << (FaParser::String3Literal - 64))
      | (1ULL << (FaParser::FmtString1 - 64))
      | (1ULL << (FaParser::FmtString2 - 64))
      | (1ULL << (FaParser::Id - 64)))) != 0)) {
      setState(594);
      stmt();
      setState(599);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(600);
    quotHuaR();
    setState(601);
    match(FaParser::While);
    setState(602);
    middleExpr();
    setState(603);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForHeader1Context ------------------------------------------------------------------

FaParser::ForHeader1Context::ForHeader1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::ForHeader1Context::Colon() {
  return getToken(FaParser::Colon, 0);
}

FaParser::MiddleExprContext* FaParser::ForHeader1Context::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}

tree::TerminalNode* FaParser::ForHeader1Context::AstClassVar() {
  return getToken(FaParser::AstClassVar, 0);
}

FaParser::TypeContext* FaParser::ForHeader1Context::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}

std::vector<tree::TerminalNode *> FaParser::ForHeader1Context::Id() {
  return getTokens(FaParser::Id);
}

tree::TerminalNode* FaParser::ForHeader1Context::Id(size_t i) {
  return getToken(FaParser::Id, i);
}

FaParser::QuotYuanLContext* FaParser::ForHeader1Context::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

FaParser::QuotYuanRContext* FaParser::ForHeader1Context::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}

std::vector<tree::TerminalNode *> FaParser::ForHeader1Context::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::ForHeader1Context::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::ForHeader1Context::getRuleIndex() const {
  return FaParser::RuleForHeader1;
}


std::any FaParser::ForHeader1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitForHeader1(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ForHeader1Context* FaParser::forHeader1() {
  ForHeader1Context *_localctx = _tracker.createInstance<ForHeader1Context>(_ctx, getState());
  enterRule(_localctx, 98, FaParser::RuleForHeader1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(607);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::AstClassVar: {
        setState(605);
        match(FaParser::AstClassVar);
        break;
      }

      case FaParser::Type:
      case FaParser::QYuanL:
      case FaParser::Id: {
        setState(606);
        type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(621);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::Id: {
        setState(609);
        match(FaParser::Id);
        break;
      }

      case FaParser::QYuanL: {
        setState(610);
        quotYuanL();
        setState(611);
        match(FaParser::Id);
        setState(616);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FaParser::Comma) {
          setState(612);
          match(FaParser::Comma);
          setState(613);
          match(FaParser::Id);
          setState(618);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(619);
        quotYuanR();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(623);
    match(FaParser::Colon);
    setState(624);
    middleExpr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForHeader2Context ------------------------------------------------------------------

FaParser::ForHeader2Context::ForHeader2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FaParser::ForHeader2Context::Semi() {
  return getTokens(FaParser::Semi);
}

tree::TerminalNode* FaParser::ForHeader2Context::Semi(size_t i) {
  return getToken(FaParser::Semi, i);
}

FaParser::MiddleExprContext* FaParser::ForHeader2Context::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}

FaParser::ExprContext* FaParser::ForHeader2Context::expr() {
  return getRuleContext<FaParser::ExprContext>(0);
}

FaParser::DefVarStmtPartContext* FaParser::ForHeader2Context::defVarStmtPart() {
  return getRuleContext<FaParser::DefVarStmtPartContext>(0);
}

FaParser::DefVarStmt2PartContext* FaParser::ForHeader2Context::defVarStmt2Part() {
  return getRuleContext<FaParser::DefVarStmt2PartContext>(0);
}


size_t FaParser::ForHeader2Context::getRuleIndex() const {
  return FaParser::RuleForHeader2;
}


std::any FaParser::ForHeader2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitForHeader2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ForHeader2Context* FaParser::forHeader2() {
  ForHeader2Context *_localctx = _tracker.createInstance<ForHeader2Context>(_ctx, getState());
  enterRule(_localctx, 100, FaParser::RuleForHeader2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(628);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::AstClassVar: {
        setState(626);
        defVarStmtPart();
        break;
      }

      case FaParser::Type:
      case FaParser::QYuanL:
      case FaParser::Id: {
        setState(627);
        defVarStmt2Part();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(630);
    match(FaParser::Semi);
    setState(631);
    middleExpr();
    setState(632);
    match(FaParser::Semi);
    setState(633);
    expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForHeaderContext ------------------------------------------------------------------

FaParser::ForHeaderContext::ForHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::ForHeader1Context* FaParser::ForHeaderContext::forHeader1() {
  return getRuleContext<FaParser::ForHeader1Context>(0);
}

FaParser::ForHeader2Context* FaParser::ForHeaderContext::forHeader2() {
  return getRuleContext<FaParser::ForHeader2Context>(0);
}


size_t FaParser::ForHeaderContext::getRuleIndex() const {
  return FaParser::RuleForHeader;
}


std::any FaParser::ForHeaderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitForHeader(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ForHeaderContext* FaParser::forHeader() {
  ForHeaderContext *_localctx = _tracker.createInstance<ForHeaderContext>(_ctx, getState());
  enterRule(_localctx, 102, FaParser::RuleForHeader);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(637);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(635);
      forHeader1();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(636);
      forHeader2();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStmtContext ------------------------------------------------------------------

FaParser::ForStmtContext::ForStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::ForStmtContext::For() {
  return getToken(FaParser::For, 0);
}

FaParser::QuotHuaLContext* FaParser::ForStmtContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::ForStmtContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

FaParser::EndlContext* FaParser::ForStmtContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

FaParser::ForHeaderContext* FaParser::ForStmtContext::forHeader() {
  return getRuleContext<FaParser::ForHeaderContext>(0);
}

std::vector<FaParser::StmtContext *> FaParser::ForStmtContext::stmt() {
  return getRuleContexts<FaParser::StmtContext>();
}

FaParser::StmtContext* FaParser::ForStmtContext::stmt(size_t i) {
  return getRuleContext<FaParser::StmtContext>(i);
}

FaParser::QuotYuanLContext* FaParser::ForStmtContext::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

FaParser::QuotYuanRContext* FaParser::ForStmtContext::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}


size_t FaParser::ForStmtContext::getRuleIndex() const {
  return FaParser::RuleForStmt;
}


std::any FaParser::ForStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitForStmt(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ForStmtContext* FaParser::forStmt() {
  ForStmtContext *_localctx = _tracker.createInstance<ForStmtContext>(_ctx, getState());
  enterRule(_localctx, 104, FaParser::RuleForStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(639);
    match(FaParser::For);
    setState(645);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(640);
      forHeader();
      break;
    }

    case 2: {
      setState(641);
      quotYuanL();
      setState(642);
      forHeader();
      setState(643);
      quotYuanR();
      break;
    }

    default:
      break;
    }
    setState(647);
    quotHuaL();
    setState(651);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Break)
      | (1ULL << FaParser::Calc)
      | (1ULL << FaParser::Continue)
      | (1ULL << FaParser::Cast)
      | (1ULL << FaParser::Do)
      | (1ULL << FaParser::Expr)
      | (1ULL << FaParser::For)
      | (1ULL << FaParser::If)
      | (1ULL << FaParser::New)
      | (1ULL << FaParser::Return)
      | (1ULL << FaParser::Stmt)
      | (1ULL << FaParser::Switch)
      | (1ULL << FaParser::Type)
      | (1ULL << FaParser::AstClassVar)
      | (1ULL << FaParser::While)
      | (1ULL << FaParser::ReverseOp)
      | (1ULL << FaParser::AddAddOp)
      | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
      | (1ULL << (FaParser::SubOp - 64))
      | (1ULL << (FaParser::ColonColon - 64))
      | (1ULL << (FaParser::QFangL - 64))
      | (1ULL << (FaParser::QHuaL - 64))
      | (1ULL << (FaParser::QYuanL - 64))
      | (1ULL << (FaParser::BoolLiteral - 64))
      | (1ULL << (FaParser::HexLiteral - 64))
      | (1ULL << (FaParser::IntLiteral - 64))
      | (1ULL << (FaParser::FloatLiteral - 64))
      | (1ULL << (FaParser::String1Literal - 64))
      | (1ULL << (FaParser::String2Literal - 64))
      | (1ULL << (FaParser::String3Literal - 64))
      | (1ULL << (FaParser::FmtString1 - 64))
      | (1ULL << (FaParser::FmtString2 - 64))
      | (1ULL << (FaParser::Id - 64)))) != 0)) {
      setState(648);
      stmt();
      setState(653);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(654);
    quotHuaR();
    setState(655);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStmtPart2LastContext ------------------------------------------------------------------

FaParser::SwitchStmtPart2LastContext::SwitchStmtPart2LastContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::SwitchStmtPart2LastContext::Underline() {
  return getToken(FaParser::Underline, 0);
}

tree::TerminalNode* FaParser::SwitchStmtPart2LastContext::ExprFuncDef() {
  return getToken(FaParser::ExprFuncDef, 0);
}

FaParser::StmtContext* FaParser::SwitchStmtPart2LastContext::stmt() {
  return getRuleContext<FaParser::StmtContext>(0);
}


size_t FaParser::SwitchStmtPart2LastContext::getRuleIndex() const {
  return FaParser::RuleSwitchStmtPart2Last;
}


std::any FaParser::SwitchStmtPart2LastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchStmtPart2Last(this);
  else
    return visitor->visitChildren(this);
}

FaParser::SwitchStmtPart2LastContext* FaParser::switchStmtPart2Last() {
  SwitchStmtPart2LastContext *_localctx = _tracker.createInstance<SwitchStmtPart2LastContext>(_ctx, getState());
  enterRule(_localctx, 106, FaParser::RuleSwitchStmtPart2Last);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(657);
    match(FaParser::Underline);
    setState(658);
    match(FaParser::ExprFuncDef);
    setState(659);
    stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotStmtExprWrapContext ------------------------------------------------------------------

FaParser::QuotStmtExprWrapContext::QuotStmtExprWrapContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::QuotStmtExprContext* FaParser::QuotStmtExprWrapContext::quotStmtExpr() {
  return getRuleContext<FaParser::QuotStmtExprContext>(0);
}

FaParser::ExprContext* FaParser::QuotStmtExprWrapContext::expr() {
  return getRuleContext<FaParser::ExprContext>(0);
}


size_t FaParser::QuotStmtExprWrapContext::getRuleIndex() const {
  return FaParser::RuleQuotStmtExprWrap;
}


std::any FaParser::QuotStmtExprWrapContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotStmtExprWrap(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotStmtExprWrapContext* FaParser::quotStmtExprWrap() {
  QuotStmtExprWrapContext *_localctx = _tracker.createInstance<QuotStmtExprWrapContext>(_ctx, getState());
  enterRule(_localctx, 108, FaParser::RuleQuotStmtExprWrap);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(663);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::QHuaL: {
        enterOuterAlt(_localctx, 1);
        setState(661);
        quotStmtExpr();
        break;
      }

      case FaParser::Calc:
      case FaParser::Cast:
      case FaParser::Expr:
      case FaParser::New:
      case FaParser::Stmt:
      case FaParser::ReverseOp:
      case FaParser::AddAddOp:
      case FaParser::SubSubOp:
      case FaParser::Exclam:
      case FaParser::SubOp:
      case FaParser::ColonColon:
      case FaParser::QFangL:
      case FaParser::QYuanL:
      case FaParser::BoolLiteral:
      case FaParser::HexLiteral:
      case FaParser::IntLiteral:
      case FaParser::FloatLiteral:
      case FaParser::String1Literal:
      case FaParser::String2Literal:
      case FaParser::String3Literal:
      case FaParser::FmtString1:
      case FaParser::FmtString2:
      case FaParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(662);
        expr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchExprPartLastContext ------------------------------------------------------------------

FaParser::SwitchExprPartLastContext::SwitchExprPartLastContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::SwitchExprPartLastContext::Underline() {
  return getToken(FaParser::Underline, 0);
}

tree::TerminalNode* FaParser::SwitchExprPartLastContext::ExprFuncDef() {
  return getToken(FaParser::ExprFuncDef, 0);
}

FaParser::QuotStmtExprWrapContext* FaParser::SwitchExprPartLastContext::quotStmtExprWrap() {
  return getRuleContext<FaParser::QuotStmtExprWrapContext>(0);
}

FaParser::Endl2Context* FaParser::SwitchExprPartLastContext::endl2() {
  return getRuleContext<FaParser::Endl2Context>(0);
}


size_t FaParser::SwitchExprPartLastContext::getRuleIndex() const {
  return FaParser::RuleSwitchExprPartLast;
}


std::any FaParser::SwitchExprPartLastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchExprPartLast(this);
  else
    return visitor->visitChildren(this);
}

FaParser::SwitchExprPartLastContext* FaParser::switchExprPartLast() {
  SwitchExprPartLastContext *_localctx = _tracker.createInstance<SwitchExprPartLastContext>(_ctx, getState());
  enterRule(_localctx, 110, FaParser::RuleSwitchExprPartLast);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(665);
    match(FaParser::Underline);
    setState(666);
    match(FaParser::ExprFuncDef);
    setState(667);
    quotStmtExprWrap();
    setState(669);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      setState(668);
      endl2();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStmtPartContext ------------------------------------------------------------------

FaParser::SwitchStmtPartContext::SwitchStmtPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::ExprContext *> FaParser::SwitchStmtPartContext::expr() {
  return getRuleContexts<FaParser::ExprContext>();
}

FaParser::ExprContext* FaParser::SwitchStmtPartContext::expr(size_t i) {
  return getRuleContext<FaParser::ExprContext>(i);
}

tree::TerminalNode* FaParser::SwitchStmtPartContext::ExprFuncDef() {
  return getToken(FaParser::ExprFuncDef, 0);
}

FaParser::StmtContext* FaParser::SwitchStmtPartContext::stmt() {
  return getRuleContext<FaParser::StmtContext>(0);
}

tree::TerminalNode* FaParser::SwitchStmtPartContext::When() {
  return getToken(FaParser::When, 0);
}


size_t FaParser::SwitchStmtPartContext::getRuleIndex() const {
  return FaParser::RuleSwitchStmtPart;
}


std::any FaParser::SwitchStmtPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchStmtPart(this);
  else
    return visitor->visitChildren(this);
}

FaParser::SwitchStmtPartContext* FaParser::switchStmtPart() {
  SwitchStmtPartContext *_localctx = _tracker.createInstance<SwitchStmtPartContext>(_ctx, getState());
  enterRule(_localctx, 112, FaParser::RuleSwitchStmtPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(671);
    expr();
    setState(674);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::When) {
      setState(672);
      match(FaParser::When);
      setState(673);
      expr();
    }
    setState(676);
    match(FaParser::ExprFuncDef);
    setState(677);
    stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStmtContext ------------------------------------------------------------------

FaParser::SwitchStmtContext::SwitchStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::SwitchStmtContext::Switch() {
  return getToken(FaParser::Switch, 0);
}

FaParser::ExprContext* FaParser::SwitchStmtContext::expr() {
  return getRuleContext<FaParser::ExprContext>(0);
}

FaParser::QuotHuaLContext* FaParser::SwitchStmtContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::SwitchStmtContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

FaParser::EndlContext* FaParser::SwitchStmtContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<FaParser::SwitchStmtPartContext *> FaParser::SwitchStmtContext::switchStmtPart() {
  return getRuleContexts<FaParser::SwitchStmtPartContext>();
}

FaParser::SwitchStmtPartContext* FaParser::SwitchStmtContext::switchStmtPart(size_t i) {
  return getRuleContext<FaParser::SwitchStmtPartContext>(i);
}


size_t FaParser::SwitchStmtContext::getRuleIndex() const {
  return FaParser::RuleSwitchStmt;
}


std::any FaParser::SwitchStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchStmt(this);
  else
    return visitor->visitChildren(this);
}

FaParser::SwitchStmtContext* FaParser::switchStmt() {
  SwitchStmtContext *_localctx = _tracker.createInstance<SwitchStmtContext>(_ctx, getState());
  enterRule(_localctx, 114, FaParser::RuleSwitchStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(679);
    match(FaParser::Switch);
    setState(680);
    expr();
    setState(681);
    quotHuaL();
    setState(685);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Calc)
      | (1ULL << FaParser::Cast)
      | (1ULL << FaParser::Expr)
      | (1ULL << FaParser::New)
      | (1ULL << FaParser::Stmt)
      | (1ULL << FaParser::ReverseOp)
      | (1ULL << FaParser::AddAddOp)
      | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
      | (1ULL << (FaParser::SubOp - 64))
      | (1ULL << (FaParser::ColonColon - 64))
      | (1ULL << (FaParser::QFangL - 64))
      | (1ULL << (FaParser::QYuanL - 64))
      | (1ULL << (FaParser::BoolLiteral - 64))
      | (1ULL << (FaParser::HexLiteral - 64))
      | (1ULL << (FaParser::IntLiteral - 64))
      | (1ULL << (FaParser::FloatLiteral - 64))
      | (1ULL << (FaParser::String1Literal - 64))
      | (1ULL << (FaParser::String2Literal - 64))
      | (1ULL << (FaParser::String3Literal - 64))
      | (1ULL << (FaParser::FmtString1 - 64))
      | (1ULL << (FaParser::FmtString2 - 64))
      | (1ULL << (FaParser::Id - 64)))) != 0)) {
      setState(682);
      switchStmtPart();
      setState(687);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(688);
    quotHuaR();
    setState(689);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStmtPart2Context ------------------------------------------------------------------

FaParser::SwitchStmtPart2Context::SwitchStmtPart2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::SwitchStmtPart2Context::When() {
  return getToken(FaParser::When, 0);
}

FaParser::ExprContext* FaParser::SwitchStmtPart2Context::expr() {
  return getRuleContext<FaParser::ExprContext>(0);
}

tree::TerminalNode* FaParser::SwitchStmtPart2Context::ExprFuncDef() {
  return getToken(FaParser::ExprFuncDef, 0);
}

FaParser::StmtContext* FaParser::SwitchStmtPart2Context::stmt() {
  return getRuleContext<FaParser::StmtContext>(0);
}


size_t FaParser::SwitchStmtPart2Context::getRuleIndex() const {
  return FaParser::RuleSwitchStmtPart2;
}


std::any FaParser::SwitchStmtPart2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchStmtPart2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::SwitchStmtPart2Context* FaParser::switchStmtPart2() {
  SwitchStmtPart2Context *_localctx = _tracker.createInstance<SwitchStmtPart2Context>(_ctx, getState());
  enterRule(_localctx, 116, FaParser::RuleSwitchStmtPart2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(691);
    match(FaParser::When);
    setState(692);
    expr();
    setState(693);
    match(FaParser::ExprFuncDef);
    setState(694);
    stmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStmt2Context ------------------------------------------------------------------

FaParser::SwitchStmt2Context::SwitchStmt2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::SwitchStmt2Context::Switch() {
  return getToken(FaParser::Switch, 0);
}

FaParser::QuotHuaLContext* FaParser::SwitchStmt2Context::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::SwitchStmtPart2LastContext* FaParser::SwitchStmt2Context::switchStmtPart2Last() {
  return getRuleContext<FaParser::SwitchStmtPart2LastContext>(0);
}

FaParser::QuotHuaRContext* FaParser::SwitchStmt2Context::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

FaParser::EndlContext* FaParser::SwitchStmt2Context::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<FaParser::SwitchStmtPart2Context *> FaParser::SwitchStmt2Context::switchStmtPart2() {
  return getRuleContexts<FaParser::SwitchStmtPart2Context>();
}

FaParser::SwitchStmtPart2Context* FaParser::SwitchStmt2Context::switchStmtPart2(size_t i) {
  return getRuleContext<FaParser::SwitchStmtPart2Context>(i);
}


size_t FaParser::SwitchStmt2Context::getRuleIndex() const {
  return FaParser::RuleSwitchStmt2;
}


std::any FaParser::SwitchStmt2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchStmt2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::SwitchStmt2Context* FaParser::switchStmt2() {
  SwitchStmt2Context *_localctx = _tracker.createInstance<SwitchStmt2Context>(_ctx, getState());
  enterRule(_localctx, 118, FaParser::RuleSwitchStmt2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(696);
    match(FaParser::Switch);
    setState(697);
    quotHuaL();
    setState(701);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::When) {
      setState(698);
      switchStmtPart2();
      setState(703);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(704);
    switchStmtPart2Last();
    setState(705);
    quotHuaR();
    setState(706);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchExprPartContext ------------------------------------------------------------------

FaParser::SwitchExprPartContext::SwitchExprPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::ExprContext *> FaParser::SwitchExprPartContext::expr() {
  return getRuleContexts<FaParser::ExprContext>();
}

FaParser::ExprContext* FaParser::SwitchExprPartContext::expr(size_t i) {
  return getRuleContext<FaParser::ExprContext>(i);
}

tree::TerminalNode* FaParser::SwitchExprPartContext::ExprFuncDef() {
  return getToken(FaParser::ExprFuncDef, 0);
}

FaParser::QuotStmtExprWrapContext* FaParser::SwitchExprPartContext::quotStmtExprWrap() {
  return getRuleContext<FaParser::QuotStmtExprWrapContext>(0);
}

FaParser::Endl2Context* FaParser::SwitchExprPartContext::endl2() {
  return getRuleContext<FaParser::Endl2Context>(0);
}

tree::TerminalNode* FaParser::SwitchExprPartContext::When() {
  return getToken(FaParser::When, 0);
}


size_t FaParser::SwitchExprPartContext::getRuleIndex() const {
  return FaParser::RuleSwitchExprPart;
}


std::any FaParser::SwitchExprPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchExprPart(this);
  else
    return visitor->visitChildren(this);
}

FaParser::SwitchExprPartContext* FaParser::switchExprPart() {
  SwitchExprPartContext *_localctx = _tracker.createInstance<SwitchExprPartContext>(_ctx, getState());
  enterRule(_localctx, 120, FaParser::RuleSwitchExprPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(708);
    expr();
    setState(711);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::When) {
      setState(709);
      match(FaParser::When);
      setState(710);
      expr();
    }
    setState(713);
    match(FaParser::ExprFuncDef);
    setState(714);
    quotStmtExprWrap();
    setState(715);
    endl2();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchExpr1Context ------------------------------------------------------------------

FaParser::SwitchExpr1Context::SwitchExpr1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::SwitchExpr1Context::SwitchExpr() {
  return getToken(FaParser::SwitchExpr, 0);
}

FaParser::ExprContext* FaParser::SwitchExpr1Context::expr() {
  return getRuleContext<FaParser::ExprContext>(0);
}

FaParser::QuotHuaLContext* FaParser::SwitchExpr1Context::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::SwitchExprPartLastContext* FaParser::SwitchExpr1Context::switchExprPartLast() {
  return getRuleContext<FaParser::SwitchExprPartLastContext>(0);
}

FaParser::QuotHuaRContext* FaParser::SwitchExpr1Context::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

std::vector<FaParser::SwitchExprPartContext *> FaParser::SwitchExpr1Context::switchExprPart() {
  return getRuleContexts<FaParser::SwitchExprPartContext>();
}

FaParser::SwitchExprPartContext* FaParser::SwitchExpr1Context::switchExprPart(size_t i) {
  return getRuleContext<FaParser::SwitchExprPartContext>(i);
}


size_t FaParser::SwitchExpr1Context::getRuleIndex() const {
  return FaParser::RuleSwitchExpr1;
}


std::any FaParser::SwitchExpr1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchExpr1(this);
  else
    return visitor->visitChildren(this);
}

FaParser::SwitchExpr1Context* FaParser::switchExpr1() {
  SwitchExpr1Context *_localctx = _tracker.createInstance<SwitchExpr1Context>(_ctx, getState());
  enterRule(_localctx, 122, FaParser::RuleSwitchExpr1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(717);
    match(FaParser::SwitchExpr);
    setState(718);
    expr();
    setState(719);
    quotHuaL();
    setState(723);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Calc)
      | (1ULL << FaParser::Cast)
      | (1ULL << FaParser::Expr)
      | (1ULL << FaParser::New)
      | (1ULL << FaParser::Stmt)
      | (1ULL << FaParser::ReverseOp)
      | (1ULL << FaParser::AddAddOp)
      | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
      | (1ULL << (FaParser::SubOp - 64))
      | (1ULL << (FaParser::ColonColon - 64))
      | (1ULL << (FaParser::QFangL - 64))
      | (1ULL << (FaParser::QYuanL - 64))
      | (1ULL << (FaParser::BoolLiteral - 64))
      | (1ULL << (FaParser::HexLiteral - 64))
      | (1ULL << (FaParser::IntLiteral - 64))
      | (1ULL << (FaParser::FloatLiteral - 64))
      | (1ULL << (FaParser::String1Literal - 64))
      | (1ULL << (FaParser::String2Literal - 64))
      | (1ULL << (FaParser::String3Literal - 64))
      | (1ULL << (FaParser::FmtString1 - 64))
      | (1ULL << (FaParser::FmtString2 - 64))
      | (1ULL << (FaParser::Id - 64)))) != 0)) {
      setState(720);
      switchExprPart();
      setState(725);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(726);
    switchExprPartLast();
    setState(727);
    quotHuaR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchExprPart2Context ------------------------------------------------------------------

FaParser::SwitchExprPart2Context::SwitchExprPart2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::SwitchExprPart2Context::When() {
  return getToken(FaParser::When, 0);
}

FaParser::ExprContext* FaParser::SwitchExprPart2Context::expr() {
  return getRuleContext<FaParser::ExprContext>(0);
}

tree::TerminalNode* FaParser::SwitchExprPart2Context::ExprFuncDef() {
  return getToken(FaParser::ExprFuncDef, 0);
}

FaParser::QuotStmtExprWrapContext* FaParser::SwitchExprPart2Context::quotStmtExprWrap() {
  return getRuleContext<FaParser::QuotStmtExprWrapContext>(0);
}

FaParser::Endl2Context* FaParser::SwitchExprPart2Context::endl2() {
  return getRuleContext<FaParser::Endl2Context>(0);
}


size_t FaParser::SwitchExprPart2Context::getRuleIndex() const {
  return FaParser::RuleSwitchExprPart2;
}


std::any FaParser::SwitchExprPart2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchExprPart2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::SwitchExprPart2Context* FaParser::switchExprPart2() {
  SwitchExprPart2Context *_localctx = _tracker.createInstance<SwitchExprPart2Context>(_ctx, getState());
  enterRule(_localctx, 124, FaParser::RuleSwitchExprPart2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(729);
    match(FaParser::When);
    setState(730);
    expr();
    setState(731);
    match(FaParser::ExprFuncDef);
    setState(732);
    quotStmtExprWrap();
    setState(733);
    endl2();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchExpr2Context ------------------------------------------------------------------

FaParser::SwitchExpr2Context::SwitchExpr2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::SwitchExpr2Context::SwitchExpr() {
  return getToken(FaParser::SwitchExpr, 0);
}

FaParser::QuotHuaLContext* FaParser::SwitchExpr2Context::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::SwitchExprPartLastContext* FaParser::SwitchExpr2Context::switchExprPartLast() {
  return getRuleContext<FaParser::SwitchExprPartLastContext>(0);
}

FaParser::QuotHuaRContext* FaParser::SwitchExpr2Context::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

std::vector<FaParser::SwitchExprPart2Context *> FaParser::SwitchExpr2Context::switchExprPart2() {
  return getRuleContexts<FaParser::SwitchExprPart2Context>();
}

FaParser::SwitchExprPart2Context* FaParser::SwitchExpr2Context::switchExprPart2(size_t i) {
  return getRuleContext<FaParser::SwitchExprPart2Context>(i);
}


size_t FaParser::SwitchExpr2Context::getRuleIndex() const {
  return FaParser::RuleSwitchExpr2;
}


std::any FaParser::SwitchExpr2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchExpr2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::SwitchExpr2Context* FaParser::switchExpr2() {
  SwitchExpr2Context *_localctx = _tracker.createInstance<SwitchExpr2Context>(_ctx, getState());
  enterRule(_localctx, 126, FaParser::RuleSwitchExpr2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(735);
    match(FaParser::SwitchExpr);
    setState(736);
    quotHuaL();
    setState(740);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::When) {
      setState(737);
      switchExprPart2();
      setState(742);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(743);
    switchExprPartLast();
    setState(744);
    quotHuaR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotExprContext ------------------------------------------------------------------

FaParser::QuotExprContext::QuotExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::QuotYuanLContext* FaParser::QuotExprContext::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

FaParser::ExprContext* FaParser::QuotExprContext::expr() {
  return getRuleContext<FaParser::ExprContext>(0);
}

FaParser::QuotYuanRContext* FaParser::QuotExprContext::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}


size_t FaParser::QuotExprContext::getRuleIndex() const {
  return FaParser::RuleQuotExpr;
}


std::any FaParser::QuotExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitQuotExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::QuotExprContext* FaParser::quotExpr() {
  QuotExprContext *_localctx = _tracker.createInstance<QuotExprContext>(_ctx, getState());
  enterRule(_localctx, 128, FaParser::RuleQuotExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(746);
    quotYuanL();
    setState(747);
    expr();
    setState(748);
    quotYuanR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleExprItemContext ------------------------------------------------------------------

FaParser::TupleExprItemContext::TupleExprItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::MiddleExprContext* FaParser::TupleExprItemContext::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}

tree::TerminalNode* FaParser::TupleExprItemContext::Id() {
  return getToken(FaParser::Id, 0);
}

tree::TerminalNode* FaParser::TupleExprItemContext::Colon() {
  return getToken(FaParser::Colon, 0);
}


size_t FaParser::TupleExprItemContext::getRuleIndex() const {
  return FaParser::RuleTupleExprItem;
}


std::any FaParser::TupleExprItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTupleExprItem(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TupleExprItemContext* FaParser::tupleExprItem() {
  TupleExprItemContext *_localctx = _tracker.createInstance<TupleExprItemContext>(_ctx, getState());
  enterRule(_localctx, 130, FaParser::RuleTupleExprItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(752);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      setState(750);
      match(FaParser::Id);
      setState(751);
      match(FaParser::Colon);
      break;
    }

    default:
      break;
    }
    setState(754);
    middleExpr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleExprContext ------------------------------------------------------------------

FaParser::TupleExprContext::TupleExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::QuotYuanLContext* FaParser::TupleExprContext::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

std::vector<FaParser::TupleExprItemContext *> FaParser::TupleExprContext::tupleExprItem() {
  return getRuleContexts<FaParser::TupleExprItemContext>();
}

FaParser::TupleExprItemContext* FaParser::TupleExprContext::tupleExprItem(size_t i) {
  return getRuleContext<FaParser::TupleExprItemContext>(i);
}

FaParser::QuotYuanRContext* FaParser::TupleExprContext::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}

std::vector<tree::TerminalNode *> FaParser::TupleExprContext::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::TupleExprContext::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::TupleExprContext::getRuleIndex() const {
  return FaParser::RuleTupleExpr;
}


std::any FaParser::TupleExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTupleExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TupleExprContext* FaParser::tupleExpr() {
  TupleExprContext *_localctx = _tracker.createInstance<TupleExprContext>(_ctx, getState());
  enterRule(_localctx, 132, FaParser::RuleTupleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(756);
    quotYuanL();
    setState(757);
    tupleExprItem();
    setState(765);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
    case 1: {
      setState(758);
      match(FaParser::Comma);
      break;
    }

    case 2: {
      setState(761); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(759);
        match(FaParser::Comma);
        setState(760);
        tupleExprItem();
        setState(763); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FaParser::Comma);
      break;
    }

    default:
      break;
    }
    setState(767);
    quotYuanR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprOptContext ------------------------------------------------------------------

FaParser::ExprOptContext::ExprOptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::ExprContext* FaParser::ExprOptContext::expr() {
  return getRuleContext<FaParser::ExprContext>(0);
}


size_t FaParser::ExprOptContext::getRuleIndex() const {
  return FaParser::RuleExprOpt;
}


std::any FaParser::ExprOptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitExprOpt(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ExprOptContext* FaParser::exprOpt() {
  ExprOptContext *_localctx = _tracker.createInstance<ExprOptContext>(_ctx, getState());
  enterRule(_localctx, 134, FaParser::RuleExprOpt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(770);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Calc)
      | (1ULL << FaParser::Cast)
      | (1ULL << FaParser::Expr)
      | (1ULL << FaParser::New)
      | (1ULL << FaParser::Stmt)
      | (1ULL << FaParser::ReverseOp)
      | (1ULL << FaParser::AddAddOp)
      | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
      | (1ULL << (FaParser::SubOp - 64))
      | (1ULL << (FaParser::ColonColon - 64))
      | (1ULL << (FaParser::QFangL - 64))
      | (1ULL << (FaParser::QYuanL - 64))
      | (1ULL << (FaParser::BoolLiteral - 64))
      | (1ULL << (FaParser::HexLiteral - 64))
      | (1ULL << (FaParser::IntLiteral - 64))
      | (1ULL << (FaParser::FloatLiteral - 64))
      | (1ULL << (FaParser::String1Literal - 64))
      | (1ULL << (FaParser::String2Literal - 64))
      | (1ULL << (FaParser::String3Literal - 64))
      | (1ULL << (FaParser::FmtString1 - 64))
      | (1ULL << (FaParser::FmtString2 - 64))
      | (1ULL << (FaParser::Id - 64)))) != 0)) {
      setState(769);
      expr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewExprItemContext ------------------------------------------------------------------

FaParser::NewExprItemContext::NewExprItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::NewExprItemContext::Id() {
  return getToken(FaParser::Id, 0);
}

tree::TerminalNode* FaParser::NewExprItemContext::AssignOp() {
  return getToken(FaParser::AssignOp, 0);
}

FaParser::MiddleExprContext* FaParser::NewExprItemContext::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}


size_t FaParser::NewExprItemContext::getRuleIndex() const {
  return FaParser::RuleNewExprItem;
}


std::any FaParser::NewExprItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitNewExprItem(this);
  else
    return visitor->visitChildren(this);
}

FaParser::NewExprItemContext* FaParser::newExprItem() {
  NewExprItemContext *_localctx = _tracker.createInstance<NewExprItemContext>(_ctx, getState());
  enterRule(_localctx, 136, FaParser::RuleNewExprItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(772);
    match(FaParser::Id);
    setState(775);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::AssignOp) {
      setState(773);
      match(FaParser::AssignOp);
      setState(774);
      middleExpr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewExpr1Context ------------------------------------------------------------------

FaParser::NewExpr1Context::NewExpr1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::NewExpr1Context::New() {
  return getToken(FaParser::New, 0);
}

FaParser::QuotHuaLContext* FaParser::NewExpr1Context::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::NewExpr1Context::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

FaParser::TypeContext* FaParser::NewExpr1Context::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}

std::vector<FaParser::NewExprItemContext *> FaParser::NewExpr1Context::newExprItem() {
  return getRuleContexts<FaParser::NewExprItemContext>();
}

FaParser::NewExprItemContext* FaParser::NewExpr1Context::newExprItem(size_t i) {
  return getRuleContext<FaParser::NewExprItemContext>(i);
}

std::vector<tree::TerminalNode *> FaParser::NewExpr1Context::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::NewExpr1Context::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::NewExpr1Context::getRuleIndex() const {
  return FaParser::RuleNewExpr1;
}


std::any FaParser::NewExpr1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitNewExpr1(this);
  else
    return visitor->visitChildren(this);
}

FaParser::NewExpr1Context* FaParser::newExpr1() {
  NewExpr1Context *_localctx = _tracker.createInstance<NewExpr1Context>(_ctx, getState());
  enterRule(_localctx, 138, FaParser::RuleNewExpr1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(777);
    match(FaParser::New);
    setState(779);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Type || _la == FaParser::QYuanL

    || _la == FaParser::Id) {
      setState(778);
      type();
    }
    setState(781);
    quotHuaL();
    setState(790);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Id) {
      setState(782);
      newExprItem();
      setState(787);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FaParser::Comma) {
        setState(783);
        match(FaParser::Comma);
        setState(784);
        newExprItem();
        setState(789);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(792);
    quotHuaR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewExpr2Context ------------------------------------------------------------------

FaParser::NewExpr2Context::NewExpr2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::NewExpr2Context::New() {
  return getToken(FaParser::New, 0);
}

FaParser::QuotYuanLContext* FaParser::NewExpr2Context::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

FaParser::QuotYuanRContext* FaParser::NewExpr2Context::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}

FaParser::TypeContext* FaParser::NewExpr2Context::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}

std::vector<FaParser::MiddleExprContext *> FaParser::NewExpr2Context::middleExpr() {
  return getRuleContexts<FaParser::MiddleExprContext>();
}

FaParser::MiddleExprContext* FaParser::NewExpr2Context::middleExpr(size_t i) {
  return getRuleContext<FaParser::MiddleExprContext>(i);
}

std::vector<tree::TerminalNode *> FaParser::NewExpr2Context::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::NewExpr2Context::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::NewExpr2Context::getRuleIndex() const {
  return FaParser::RuleNewExpr2;
}


std::any FaParser::NewExpr2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitNewExpr2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::NewExpr2Context* FaParser::newExpr2() {
  NewExpr2Context *_localctx = _tracker.createInstance<NewExpr2Context>(_ctx, getState());
  enterRule(_localctx, 140, FaParser::RuleNewExpr2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(794);
    match(FaParser::New);
    setState(796);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      setState(795);
      type();
      break;
    }

    default:
      break;
    }
    setState(798);
    quotYuanL();
    setState(807);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Calc)
      | (1ULL << FaParser::Cast)
      | (1ULL << FaParser::Expr)
      | (1ULL << FaParser::New)
      | (1ULL << FaParser::Stmt)
      | (1ULL << FaParser::ReverseOp)
      | (1ULL << FaParser::AddAddOp)
      | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
      | (1ULL << (FaParser::SubOp - 64))
      | (1ULL << (FaParser::ColonColon - 64))
      | (1ULL << (FaParser::QFangL - 64))
      | (1ULL << (FaParser::QYuanL - 64))
      | (1ULL << (FaParser::BoolLiteral - 64))
      | (1ULL << (FaParser::HexLiteral - 64))
      | (1ULL << (FaParser::IntLiteral - 64))
      | (1ULL << (FaParser::FloatLiteral - 64))
      | (1ULL << (FaParser::String1Literal - 64))
      | (1ULL << (FaParser::String2Literal - 64))
      | (1ULL << (FaParser::String3Literal - 64))
      | (1ULL << (FaParser::FmtString1 - 64))
      | (1ULL << (FaParser::FmtString2 - 64))
      | (1ULL << (FaParser::Id - 64)))) != 0)) {
      setState(799);
      middleExpr();
      setState(804);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FaParser::Comma) {
        setState(800);
        match(FaParser::Comma);
        setState(801);
        middleExpr();
        setState(806);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(809);
    quotYuanR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayExpr1CondContext ------------------------------------------------------------------

FaParser::ArrayExpr1CondContext::ArrayExpr1CondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::ArrayExpr1CondContext::Where() {
  return getToken(FaParser::Where, 0);
}

FaParser::MiddleExprContext* FaParser::ArrayExpr1CondContext::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}


size_t FaParser::ArrayExpr1CondContext::getRuleIndex() const {
  return FaParser::RuleArrayExpr1Cond;
}


std::any FaParser::ArrayExpr1CondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitArrayExpr1Cond(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ArrayExpr1CondContext* FaParser::arrayExpr1Cond() {
  ArrayExpr1CondContext *_localctx = _tracker.createInstance<ArrayExpr1CondContext>(_ctx, getState());
  enterRule(_localctx, 142, FaParser::RuleArrayExpr1Cond);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(811);
    match(FaParser::Where);
    setState(812);
    middleExpr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayExpr1Context ------------------------------------------------------------------

FaParser::ArrayExpr1Context::ArrayExpr1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::QuotFangLContext* FaParser::ArrayExpr1Context::quotFangL() {
  return getRuleContext<FaParser::QuotFangLContext>(0);
}

tree::TerminalNode* FaParser::ArrayExpr1Context::From() {
  return getToken(FaParser::From, 0);
}

tree::TerminalNode* FaParser::ArrayExpr1Context::In() {
  return getToken(FaParser::In, 0);
}

std::vector<FaParser::MiddleExprContext *> FaParser::ArrayExpr1Context::middleExpr() {
  return getRuleContexts<FaParser::MiddleExprContext>();
}

FaParser::MiddleExprContext* FaParser::ArrayExpr1Context::middleExpr(size_t i) {
  return getRuleContext<FaParser::MiddleExprContext>(i);
}

FaParser::QuotFangRContext* FaParser::ArrayExpr1Context::quotFangR() {
  return getRuleContext<FaParser::QuotFangRContext>(0);
}

tree::TerminalNode* FaParser::ArrayExpr1Context::Select() {
  return getToken(FaParser::Select, 0);
}

tree::TerminalNode* FaParser::ArrayExpr1Context::Run() {
  return getToken(FaParser::Run, 0);
}

std::vector<tree::TerminalNode *> FaParser::ArrayExpr1Context::Id() {
  return getTokens(FaParser::Id);
}

tree::TerminalNode* FaParser::ArrayExpr1Context::Id(size_t i) {
  return getToken(FaParser::Id, i);
}

std::vector<FaParser::ArrayExpr1CondContext *> FaParser::ArrayExpr1Context::arrayExpr1Cond() {
  return getRuleContexts<FaParser::ArrayExpr1CondContext>();
}

FaParser::ArrayExpr1CondContext* FaParser::ArrayExpr1Context::arrayExpr1Cond(size_t i) {
  return getRuleContext<FaParser::ArrayExpr1CondContext>(i);
}

FaParser::QuotYuanLContext* FaParser::ArrayExpr1Context::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

FaParser::QuotYuanRContext* FaParser::ArrayExpr1Context::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}

std::vector<tree::TerminalNode *> FaParser::ArrayExpr1Context::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::ArrayExpr1Context::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::ArrayExpr1Context::getRuleIndex() const {
  return FaParser::RuleArrayExpr1;
}


std::any FaParser::ArrayExpr1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitArrayExpr1(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ArrayExpr1Context* FaParser::arrayExpr1() {
  ArrayExpr1Context *_localctx = _tracker.createInstance<ArrayExpr1Context>(_ctx, getState());
  enterRule(_localctx, 144, FaParser::RuleArrayExpr1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(814);
    quotFangL();
    setState(815);
    match(FaParser::From);
    setState(828);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::Id: {
        setState(816);
        match(FaParser::Id);
        break;
      }

      case FaParser::QYuanL: {
        setState(817);
        quotYuanL();
        setState(818);
        match(FaParser::Id);
        setState(823);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FaParser::Comma) {
          setState(819);
          match(FaParser::Comma);
          setState(820);
          match(FaParser::Id);
          setState(825);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(826);
        quotYuanR();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(830);
    match(FaParser::In);
    setState(831);
    middleExpr();
    setState(835);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Where) {
      setState(832);
      arrayExpr1Cond();
      setState(837);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(838);
    _la = _input->LA(1);
    if (!(_la == FaParser::Run

    || _la == FaParser::Select)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(839);
    middleExpr();
    setState(840);
    quotFangR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayExpr2Context ------------------------------------------------------------------

FaParser::ArrayExpr2Context::ArrayExpr2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::QuotFangLContext* FaParser::ArrayExpr2Context::quotFangL() {
  return getRuleContext<FaParser::QuotFangLContext>(0);
}

FaParser::QuotFangRContext* FaParser::ArrayExpr2Context::quotFangR() {
  return getRuleContext<FaParser::QuotFangRContext>(0);
}

std::vector<FaParser::MiddleExprContext *> FaParser::ArrayExpr2Context::middleExpr() {
  return getRuleContexts<FaParser::MiddleExprContext>();
}

FaParser::MiddleExprContext* FaParser::ArrayExpr2Context::middleExpr(size_t i) {
  return getRuleContext<FaParser::MiddleExprContext>(i);
}

std::vector<tree::TerminalNode *> FaParser::ArrayExpr2Context::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::ArrayExpr2Context::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::ArrayExpr2Context::getRuleIndex() const {
  return FaParser::RuleArrayExpr2;
}


std::any FaParser::ArrayExpr2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitArrayExpr2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ArrayExpr2Context* FaParser::arrayExpr2() {
  ArrayExpr2Context *_localctx = _tracker.createInstance<ArrayExpr2Context>(_ctx, getState());
  enterRule(_localctx, 146, FaParser::RuleArrayExpr2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(842);
    quotFangL();
    setState(851);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Calc)
      | (1ULL << FaParser::Cast)
      | (1ULL << FaParser::Expr)
      | (1ULL << FaParser::New)
      | (1ULL << FaParser::Stmt)
      | (1ULL << FaParser::ReverseOp)
      | (1ULL << FaParser::AddAddOp)
      | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
      | (1ULL << (FaParser::SubOp - 64))
      | (1ULL << (FaParser::ColonColon - 64))
      | (1ULL << (FaParser::QFangL - 64))
      | (1ULL << (FaParser::QYuanL - 64))
      | (1ULL << (FaParser::BoolLiteral - 64))
      | (1ULL << (FaParser::HexLiteral - 64))
      | (1ULL << (FaParser::IntLiteral - 64))
      | (1ULL << (FaParser::FloatLiteral - 64))
      | (1ULL << (FaParser::String1Literal - 64))
      | (1ULL << (FaParser::String2Literal - 64))
      | (1ULL << (FaParser::String3Literal - 64))
      | (1ULL << (FaParser::FmtString1 - 64))
      | (1ULL << (FaParser::FmtString2 - 64))
      | (1ULL << (FaParser::Id - 64)))) != 0)) {
      setState(843);
      middleExpr();
      setState(848);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FaParser::Comma) {
        setState(844);
        match(FaParser::Comma);
        setState(845);
        middleExpr();
        setState(850);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(853);
    quotFangR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayExpr3Context ------------------------------------------------------------------

FaParser::ArrayExpr3Context::ArrayExpr3Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::QuotFangLContext* FaParser::ArrayExpr3Context::quotFangL() {
  return getRuleContext<FaParser::QuotFangLContext>(0);
}

std::vector<FaParser::MiddleExprContext *> FaParser::ArrayExpr3Context::middleExpr() {
  return getRuleContexts<FaParser::MiddleExprContext>();
}

FaParser::MiddleExprContext* FaParser::ArrayExpr3Context::middleExpr(size_t i) {
  return getRuleContext<FaParser::MiddleExprContext>(i);
}

tree::TerminalNode* FaParser::ArrayExpr3Context::PointPoint() {
  return getToken(FaParser::PointPoint, 0);
}

FaParser::QuotFangRContext* FaParser::ArrayExpr3Context::quotFangR() {
  return getRuleContext<FaParser::QuotFangRContext>(0);
}

tree::TerminalNode* FaParser::ArrayExpr3Context::Comma() {
  return getToken(FaParser::Comma, 0);
}


size_t FaParser::ArrayExpr3Context::getRuleIndex() const {
  return FaParser::RuleArrayExpr3;
}


std::any FaParser::ArrayExpr3Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitArrayExpr3(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ArrayExpr3Context* FaParser::arrayExpr3() {
  ArrayExpr3Context *_localctx = _tracker.createInstance<ArrayExpr3Context>(_ctx, getState());
  enterRule(_localctx, 148, FaParser::RuleArrayExpr3);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(855);
    quotFangL();
    setState(856);
    middleExpr();
    setState(859);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Comma) {
      setState(857);
      match(FaParser::Comma);
      setState(858);
      middleExpr();
    }
    setState(861);
    match(FaParser::PointPoint);
    setState(862);
    middleExpr();
    setState(863);
    quotFangR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaExprContext ------------------------------------------------------------------

FaParser::LambdaExprContext::LambdaExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::LambdaExprContext::Id() {
  return getToken(FaParser::Id, 0);
}

tree::TerminalNode* FaParser::LambdaExprContext::ExprFuncDef() {
  return getToken(FaParser::ExprFuncDef, 0);
}

FaParser::QuotYuanLContext* FaParser::LambdaExprContext::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

FaParser::QuotYuanRContext* FaParser::LambdaExprContext::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}

FaParser::MiddleExprContext* FaParser::LambdaExprContext::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}

FaParser::QuotHuaLContext* FaParser::LambdaExprContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::LambdaExprContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

FaParser::TypeWrapVarList3Context* FaParser::LambdaExprContext::typeWrapVarList3() {
  return getRuleContext<FaParser::TypeWrapVarList3Context>(0);
}

FaParser::TypeWrapVarList4Context* FaParser::LambdaExprContext::typeWrapVarList4() {
  return getRuleContext<FaParser::TypeWrapVarList4Context>(0);
}

std::vector<FaParser::StmtContext *> FaParser::LambdaExprContext::stmt() {
  return getRuleContexts<FaParser::StmtContext>();
}

FaParser::StmtContext* FaParser::LambdaExprContext::stmt(size_t i) {
  return getRuleContext<FaParser::StmtContext>(i);
}


size_t FaParser::LambdaExprContext::getRuleIndex() const {
  return FaParser::RuleLambdaExpr;
}


std::any FaParser::LambdaExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitLambdaExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::LambdaExprContext* FaParser::lambdaExpr() {
  LambdaExprContext *_localctx = _tracker.createInstance<LambdaExprContext>(_ctx, getState());
  enterRule(_localctx, 150, FaParser::RuleLambdaExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(886);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::Id: {
        enterOuterAlt(_localctx, 1);
        setState(865);
        match(FaParser::Id);
        break;
      }

      case FaParser::QYuanL: {
        enterOuterAlt(_localctx, 2);
        setState(866);
        quotYuanL();
        setState(869);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
        case 1: {
          setState(867);
          typeWrapVarList3();
          break;
        }

        case 2: {
          setState(868);
          typeWrapVarList4();
          break;
        }

        default:
          break;
        }
        setState(871);
        quotYuanR();
        setState(873);
        match(FaParser::ExprFuncDef);
        setState(884);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FaParser::Calc:
          case FaParser::Cast:
          case FaParser::Expr:
          case FaParser::New:
          case FaParser::Stmt:
          case FaParser::ReverseOp:
          case FaParser::AddAddOp:
          case FaParser::SubSubOp:
          case FaParser::Exclam:
          case FaParser::SubOp:
          case FaParser::ColonColon:
          case FaParser::QFangL:
          case FaParser::QYuanL:
          case FaParser::BoolLiteral:
          case FaParser::HexLiteral:
          case FaParser::IntLiteral:
          case FaParser::FloatLiteral:
          case FaParser::String1Literal:
          case FaParser::String2Literal:
          case FaParser::String3Literal:
          case FaParser::FmtString1:
          case FaParser::FmtString2:
          case FaParser::Id: {
            setState(874);
            middleExpr();
            break;
          }

          case FaParser::QHuaL: {
            setState(875);
            quotHuaL();
            setState(879);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & ((1ULL << FaParser::Break)
              | (1ULL << FaParser::Calc)
              | (1ULL << FaParser::Continue)
              | (1ULL << FaParser::Cast)
              | (1ULL << FaParser::Do)
              | (1ULL << FaParser::Expr)
              | (1ULL << FaParser::For)
              | (1ULL << FaParser::If)
              | (1ULL << FaParser::New)
              | (1ULL << FaParser::Return)
              | (1ULL << FaParser::Stmt)
              | (1ULL << FaParser::Switch)
              | (1ULL << FaParser::Type)
              | (1ULL << FaParser::AstClassVar)
              | (1ULL << FaParser::While)
              | (1ULL << FaParser::ReverseOp)
              | (1ULL << FaParser::AddAddOp)
              | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
              | (1ULL << (FaParser::SubOp - 64))
              | (1ULL << (FaParser::ColonColon - 64))
              | (1ULL << (FaParser::QFangL - 64))
              | (1ULL << (FaParser::QHuaL - 64))
              | (1ULL << (FaParser::QYuanL - 64))
              | (1ULL << (FaParser::BoolLiteral - 64))
              | (1ULL << (FaParser::HexLiteral - 64))
              | (1ULL << (FaParser::IntLiteral - 64))
              | (1ULL << (FaParser::FloatLiteral - 64))
              | (1ULL << (FaParser::String1Literal - 64))
              | (1ULL << (FaParser::String2Literal - 64))
              | (1ULL << (FaParser::String3Literal - 64))
              | (1ULL << (FaParser::FmtString1 - 64))
              | (1ULL << (FaParser::FmtString2 - 64))
              | (1ULL << (FaParser::Id - 64)))) != 0)) {
              setState(876);
              stmt();
              setState(881);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            setState(882);
            quotHuaR();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrongExprBaseContext ------------------------------------------------------------------

FaParser::StrongExprBaseContext::StrongExprBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::IdsContext* FaParser::StrongExprBaseContext::ids() {
  return getRuleContext<FaParser::IdsContext>(0);
}

tree::TerminalNode* FaParser::StrongExprBaseContext::ColonColon() {
  return getToken(FaParser::ColonColon, 0);
}

FaParser::LiteralContext* FaParser::StrongExprBaseContext::literal() {
  return getRuleContext<FaParser::LiteralContext>(0);
}

FaParser::LambdaExprContext* FaParser::StrongExprBaseContext::lambdaExpr() {
  return getRuleContext<FaParser::LambdaExprContext>(0);
}

FaParser::QuotExprContext* FaParser::StrongExprBaseContext::quotExpr() {
  return getRuleContext<FaParser::QuotExprContext>(0);
}

FaParser::TupleExprContext* FaParser::StrongExprBaseContext::tupleExpr() {
  return getRuleContext<FaParser::TupleExprContext>(0);
}

FaParser::NewExpr1Context* FaParser::StrongExprBaseContext::newExpr1() {
  return getRuleContext<FaParser::NewExpr1Context>(0);
}

FaParser::NewExpr2Context* FaParser::StrongExprBaseContext::newExpr2() {
  return getRuleContext<FaParser::NewExpr2Context>(0);
}

FaParser::ArrayExpr1Context* FaParser::StrongExprBaseContext::arrayExpr1() {
  return getRuleContext<FaParser::ArrayExpr1Context>(0);
}

FaParser::ArrayExpr2Context* FaParser::StrongExprBaseContext::arrayExpr2() {
  return getRuleContext<FaParser::ArrayExpr2Context>(0);
}

FaParser::ArrayExpr3Context* FaParser::StrongExprBaseContext::arrayExpr3() {
  return getRuleContext<FaParser::ArrayExpr3Context>(0);
}


size_t FaParser::StrongExprBaseContext::getRuleIndex() const {
  return FaParser::RuleStrongExprBase;
}


std::any FaParser::StrongExprBaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitStrongExprBase(this);
  else
    return visitor->visitChildren(this);
}

FaParser::StrongExprBaseContext* FaParser::strongExprBase() {
  StrongExprBaseContext *_localctx = _tracker.createInstance<StrongExprBaseContext>(_ctx, getState());
  enterRule(_localctx, 152, FaParser::RuleStrongExprBase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(901);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(889);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FaParser::ColonColon) {
        setState(888);
        match(FaParser::ColonColon);
      }
      setState(891);
      ids();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(892);
      literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(893);
      lambdaExpr();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(894);
      quotExpr();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(895);
      tupleExpr();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(896);
      newExpr1();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(897);
      newExpr2();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(898);
      arrayExpr1();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(899);
      arrayExpr2();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(900);
      arrayExpr3();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrongExprPrefixContext ------------------------------------------------------------------

FaParser::StrongExprPrefixContext::StrongExprPrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::StrongExprPrefixContext::SubOp() {
  return getToken(FaParser::SubOp, 0);
}

tree::TerminalNode* FaParser::StrongExprPrefixContext::AddAddOp() {
  return getToken(FaParser::AddAddOp, 0);
}

tree::TerminalNode* FaParser::StrongExprPrefixContext::SubSubOp() {
  return getToken(FaParser::SubSubOp, 0);
}

tree::TerminalNode* FaParser::StrongExprPrefixContext::ReverseOp() {
  return getToken(FaParser::ReverseOp, 0);
}

tree::TerminalNode* FaParser::StrongExprPrefixContext::Exclam() {
  return getToken(FaParser::Exclam, 0);
}

tree::TerminalNode* FaParser::StrongExprPrefixContext::Cast() {
  return getToken(FaParser::Cast, 0);
}

FaParser::QuotJianLContext* FaParser::StrongExprPrefixContext::quotJianL() {
  return getRuleContext<FaParser::QuotJianLContext>(0);
}

FaParser::TypeContext* FaParser::StrongExprPrefixContext::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}

FaParser::QuotJianRContext* FaParser::StrongExprPrefixContext::quotJianR() {
  return getRuleContext<FaParser::QuotJianRContext>(0);
}


size_t FaParser::StrongExprPrefixContext::getRuleIndex() const {
  return FaParser::RuleStrongExprPrefix;
}


std::any FaParser::StrongExprPrefixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitStrongExprPrefix(this);
  else
    return visitor->visitChildren(this);
}

FaParser::StrongExprPrefixContext* FaParser::strongExprPrefix() {
  StrongExprPrefixContext *_localctx = _tracker.createInstance<StrongExprPrefixContext>(_ctx, getState());
  enterRule(_localctx, 154, FaParser::RuleStrongExprPrefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(915);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::SubOp: {
        enterOuterAlt(_localctx, 1);
        setState(903);
        match(FaParser::SubOp);
        break;
      }

      case FaParser::AddAddOp: {
        enterOuterAlt(_localctx, 2);
        setState(904);
        match(FaParser::AddAddOp);
        break;
      }

      case FaParser::SubSubOp: {
        enterOuterAlt(_localctx, 3);
        setState(905);
        match(FaParser::SubSubOp);
        break;
      }

      case FaParser::ReverseOp: {
        enterOuterAlt(_localctx, 4);
        setState(906);
        match(FaParser::ReverseOp);
        break;
      }

      case FaParser::Exclam: {
        enterOuterAlt(_localctx, 5);
        setState(907);
        match(FaParser::Exclam);
        break;
      }

      case FaParser::Cast: {
        enterOuterAlt(_localctx, 6);
        setState(908);
        match(FaParser::Cast);
        setState(913);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FaParser::LessThan) {
          setState(909);
          quotJianL();
          setState(910);
          type();
          setState(911);
          quotJianR();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrongExprSuffixContext ------------------------------------------------------------------

FaParser::StrongExprSuffixContext::StrongExprSuffixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::StrongExprSuffixContext::AddAddOp() {
  return getToken(FaParser::AddAddOp, 0);
}

tree::TerminalNode* FaParser::StrongExprSuffixContext::SubSubOp() {
  return getToken(FaParser::SubSubOp, 0);
}

FaParser::QuotYuanLContext* FaParser::StrongExprSuffixContext::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

FaParser::QuotYuanRContext* FaParser::StrongExprSuffixContext::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}

std::vector<FaParser::MiddleExprContext *> FaParser::StrongExprSuffixContext::middleExpr() {
  return getRuleContexts<FaParser::MiddleExprContext>();
}

FaParser::MiddleExprContext* FaParser::StrongExprSuffixContext::middleExpr(size_t i) {
  return getRuleContext<FaParser::MiddleExprContext>(i);
}

std::vector<FaParser::Endl2Context *> FaParser::StrongExprSuffixContext::endl2() {
  return getRuleContexts<FaParser::Endl2Context>();
}

FaParser::Endl2Context* FaParser::StrongExprSuffixContext::endl2(size_t i) {
  return getRuleContext<FaParser::Endl2Context>(i);
}

FaParser::QuotFangLContext* FaParser::StrongExprSuffixContext::quotFangL() {
  return getRuleContext<FaParser::QuotFangLContext>(0);
}

FaParser::QuotFangRContext* FaParser::StrongExprSuffixContext::quotFangR() {
  return getRuleContext<FaParser::QuotFangRContext>(0);
}

std::vector<FaParser::ExprOptContext *> FaParser::StrongExprSuffixContext::exprOpt() {
  return getRuleContexts<FaParser::ExprOptContext>();
}

FaParser::ExprOptContext* FaParser::StrongExprSuffixContext::exprOpt(size_t i) {
  return getRuleContext<FaParser::ExprOptContext>(i);
}

std::vector<tree::TerminalNode *> FaParser::StrongExprSuffixContext::Colon() {
  return getTokens(FaParser::Colon);
}

tree::TerminalNode* FaParser::StrongExprSuffixContext::Colon(size_t i) {
  return getToken(FaParser::Colon, i);
}

FaParser::QuotJianLContext* FaParser::StrongExprSuffixContext::quotJianL() {
  return getRuleContext<FaParser::QuotJianLContext>(0);
}

std::vector<FaParser::TypeContext *> FaParser::StrongExprSuffixContext::type() {
  return getRuleContexts<FaParser::TypeContext>();
}

FaParser::TypeContext* FaParser::StrongExprSuffixContext::type(size_t i) {
  return getRuleContext<FaParser::TypeContext>(i);
}

FaParser::QuotJianRContext* FaParser::StrongExprSuffixContext::quotJianR() {
  return getRuleContext<FaParser::QuotJianRContext>(0);
}

std::vector<tree::TerminalNode *> FaParser::StrongExprSuffixContext::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::StrongExprSuffixContext::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}

tree::TerminalNode* FaParser::StrongExprSuffixContext::PointOp() {
  return getToken(FaParser::PointOp, 0);
}

tree::TerminalNode* FaParser::StrongExprSuffixContext::Id() {
  return getToken(FaParser::Id, 0);
}

tree::TerminalNode* FaParser::StrongExprSuffixContext::Qus() {
  return getToken(FaParser::Qus, 0);
}

tree::TerminalNode* FaParser::StrongExprSuffixContext::Is() {
  return getToken(FaParser::Is, 0);
}


size_t FaParser::StrongExprSuffixContext::getRuleIndex() const {
  return FaParser::RuleStrongExprSuffix;
}


std::any FaParser::StrongExprSuffixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitStrongExprSuffix(this);
  else
    return visitor->visitChildren(this);
}

FaParser::StrongExprSuffixContext* FaParser::strongExprSuffix() {
  StrongExprSuffixContext *_localctx = _tracker.createInstance<StrongExprSuffixContext>(_ctx, getState());
  enterRule(_localctx, 156, FaParser::RuleStrongExprSuffix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(965);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::AddAddOp: {
        enterOuterAlt(_localctx, 1);
        setState(917);
        match(FaParser::AddAddOp);
        break;
      }

      case FaParser::SubSubOp: {
        enterOuterAlt(_localctx, 2);
        setState(918);
        match(FaParser::SubSubOp);
        break;
      }

      case FaParser::QYuanL: {
        enterOuterAlt(_localctx, 3);
        setState(919);
        quotYuanL();
        setState(929);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << FaParser::Calc)
          | (1ULL << FaParser::Cast)
          | (1ULL << FaParser::Expr)
          | (1ULL << FaParser::New)
          | (1ULL << FaParser::Stmt)
          | (1ULL << FaParser::ReverseOp)
          | (1ULL << FaParser::AddAddOp)
          | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
          | (1ULL << (FaParser::SubOp - 64))
          | (1ULL << (FaParser::ColonColon - 64))
          | (1ULL << (FaParser::QFangL - 64))
          | (1ULL << (FaParser::QYuanL - 64))
          | (1ULL << (FaParser::BoolLiteral - 64))
          | (1ULL << (FaParser::HexLiteral - 64))
          | (1ULL << (FaParser::IntLiteral - 64))
          | (1ULL << (FaParser::FloatLiteral - 64))
          | (1ULL << (FaParser::String1Literal - 64))
          | (1ULL << (FaParser::String2Literal - 64))
          | (1ULL << (FaParser::String3Literal - 64))
          | (1ULL << (FaParser::FmtString1 - 64))
          | (1ULL << (FaParser::FmtString2 - 64))
          | (1ULL << (FaParser::Id - 64)))) != 0)) {
          setState(920);
          middleExpr();
          setState(926);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
          while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
              setState(921);
              endl2();
              setState(922);
              middleExpr(); 
            }
            setState(928);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
          }
        }
        setState(931);
        quotYuanR();
        break;
      }

      case FaParser::QFangL: {
        enterOuterAlt(_localctx, 4);
        setState(933);
        quotFangL();

        setState(934);
        exprOpt();
        setState(939);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FaParser::Colon) {
          setState(935);
          match(FaParser::Colon);
          setState(936);
          exprOpt();
          setState(941);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(942);
        quotFangR();
        break;
      }

      case FaParser::LessThan: {
        enterOuterAlt(_localctx, 5);
        setState(944);
        quotJianL();
        setState(945);
        type();
        setState(950);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FaParser::Comma) {
          setState(946);
          match(FaParser::Comma);
          setState(947);
          type();
          setState(952);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(953);
        quotJianR();
        break;
      }

      case FaParser::PointOp: {
        enterOuterAlt(_localctx, 6);
        setState(955);
        match(FaParser::PointOp);
        setState(956);
        match(FaParser::Id);
        break;
      }

      case FaParser::Qus: {
        enterOuterAlt(_localctx, 7);
        setState(957);
        match(FaParser::Qus);
        setState(958);
        match(FaParser::PointOp);
        setState(959);
        match(FaParser::Id);
        break;
      }

      case FaParser::Is: {
        enterOuterAlt(_localctx, 8);
        setState(960);
        match(FaParser::Is);
        setState(961);
        type();
        setState(963);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
        case 1: {
          setState(962);
          match(FaParser::Id);
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrongExprContext ------------------------------------------------------------------

FaParser::StrongExprContext::StrongExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::StrongExprBaseContext* FaParser::StrongExprContext::strongExprBase() {
  return getRuleContext<FaParser::StrongExprBaseContext>(0);
}

std::vector<FaParser::StrongExprPrefixContext *> FaParser::StrongExprContext::strongExprPrefix() {
  return getRuleContexts<FaParser::StrongExprPrefixContext>();
}

FaParser::StrongExprPrefixContext* FaParser::StrongExprContext::strongExprPrefix(size_t i) {
  return getRuleContext<FaParser::StrongExprPrefixContext>(i);
}

std::vector<FaParser::StrongExprSuffixContext *> FaParser::StrongExprContext::strongExprSuffix() {
  return getRuleContexts<FaParser::StrongExprSuffixContext>();
}

FaParser::StrongExprSuffixContext* FaParser::StrongExprContext::strongExprSuffix(size_t i) {
  return getRuleContext<FaParser::StrongExprSuffixContext>(i);
}


size_t FaParser::StrongExprContext::getRuleIndex() const {
  return FaParser::RuleStrongExpr;
}


std::any FaParser::StrongExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitStrongExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::StrongExprContext* FaParser::strongExpr() {
  StrongExprContext *_localctx = _tracker.createInstance<StrongExprContext>(_ctx, getState());
  enterRule(_localctx, 158, FaParser::RuleStrongExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(970);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(967);
        strongExprPrefix(); 
      }
      setState(972);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
    }
    setState(973);
    strongExprBase();
    setState(977);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(974);
        strongExprSuffix(); 
      }
      setState(979);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Middle3OpExprContext ------------------------------------------------------------------

FaParser::Middle3OpExprContext::Middle3OpExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::StrongExprContext *> FaParser::Middle3OpExprContext::strongExpr() {
  return getRuleContexts<FaParser::StrongExprContext>();
}

FaParser::StrongExprContext* FaParser::Middle3OpExprContext::strongExpr(size_t i) {
  return getRuleContext<FaParser::StrongExprContext>(i);
}

tree::TerminalNode* FaParser::Middle3OpExprContext::Qus() {
  return getToken(FaParser::Qus, 0);
}

tree::TerminalNode* FaParser::Middle3OpExprContext::Colon() {
  return getToken(FaParser::Colon, 0);
}


size_t FaParser::Middle3OpExprContext::getRuleIndex() const {
  return FaParser::RuleMiddle3OpExpr;
}


std::any FaParser::Middle3OpExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitMiddle3OpExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::Middle3OpExprContext* FaParser::middle3OpExpr() {
  Middle3OpExprContext *_localctx = _tracker.createInstance<Middle3OpExprContext>(_ctx, getState());
  enterRule(_localctx, 160, FaParser::RuleMiddle3OpExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(980);
    strongExpr();
    setState(981);
    match(FaParser::Qus);
    setState(982);
    strongExpr();
    setState(983);
    match(FaParser::Colon);
    setState(984);
    strongExpr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Middle2OpExprContext ------------------------------------------------------------------

FaParser::Middle2OpExprContext::Middle2OpExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::StrongExprContext *> FaParser::Middle2OpExprContext::strongExpr() {
  return getRuleContexts<FaParser::StrongExprContext>();
}

FaParser::StrongExprContext* FaParser::Middle2OpExprContext::strongExpr(size_t i) {
  return getRuleContext<FaParser::StrongExprContext>(i);
}

std::vector<FaParser::AllOp2Context *> FaParser::Middle2OpExprContext::allOp2() {
  return getRuleContexts<FaParser::AllOp2Context>();
}

FaParser::AllOp2Context* FaParser::Middle2OpExprContext::allOp2(size_t i) {
  return getRuleContext<FaParser::AllOp2Context>(i);
}


size_t FaParser::Middle2OpExprContext::getRuleIndex() const {
  return FaParser::RuleMiddle2OpExpr;
}


std::any FaParser::Middle2OpExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitMiddle2OpExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::Middle2OpExprContext* FaParser::middle2OpExpr() {
  Middle2OpExprContext *_localctx = _tracker.createInstance<Middle2OpExprContext>(_ctx, getState());
  enterRule(_localctx, 162, FaParser::RuleMiddle2OpExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(986);
    strongExpr();
    setState(992);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(987);
        allOp2();
        setState(988);
        strongExpr(); 
      }
      setState(994);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MiddleAstExprContext ------------------------------------------------------------------

FaParser::MiddleAstExprContext::MiddleAstExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::MiddleAstExprContext::Stmt() {
  return getToken(FaParser::Stmt, 0);
}

FaParser::NormalStmtPartContext* FaParser::MiddleAstExprContext::normalStmtPart() {
  return getRuleContext<FaParser::NormalStmtPartContext>(0);
}

tree::TerminalNode* FaParser::MiddleAstExprContext::Expr() {
  return getToken(FaParser::Expr, 0);
}

FaParser::Middle2OpExprContext* FaParser::MiddleAstExprContext::middle2OpExpr() {
  return getRuleContext<FaParser::Middle2OpExprContext>(0);
}


size_t FaParser::MiddleAstExprContext::getRuleIndex() const {
  return FaParser::RuleMiddleAstExpr;
}


std::any FaParser::MiddleAstExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitMiddleAstExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::MiddleAstExprContext* FaParser::middleAstExpr() {
  MiddleAstExprContext *_localctx = _tracker.createInstance<MiddleAstExprContext>(_ctx, getState());
  enterRule(_localctx, 164, FaParser::RuleMiddleAstExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(999);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::Stmt: {
        enterOuterAlt(_localctx, 1);
        setState(995);
        match(FaParser::Stmt);
        setState(996);
        normalStmtPart();
        break;
      }

      case FaParser::Expr: {
        enterOuterAlt(_localctx, 2);
        setState(997);
        match(FaParser::Expr);
        setState(998);
        middle2OpExpr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MiddleExprContext ------------------------------------------------------------------

FaParser::MiddleExprContext::MiddleExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::Middle3OpExprContext* FaParser::MiddleExprContext::middle3OpExpr() {
  return getRuleContext<FaParser::Middle3OpExprContext>(0);
}

FaParser::Middle2OpExprContext* FaParser::MiddleExprContext::middle2OpExpr() {
  return getRuleContext<FaParser::Middle2OpExprContext>(0);
}

FaParser::MiddleAstExprContext* FaParser::MiddleExprContext::middleAstExpr() {
  return getRuleContext<FaParser::MiddleAstExprContext>(0);
}

tree::TerminalNode* FaParser::MiddleExprContext::Calc() {
  return getToken(FaParser::Calc, 0);
}


size_t FaParser::MiddleExprContext::getRuleIndex() const {
  return FaParser::RuleMiddleExpr;
}


std::any FaParser::MiddleExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitMiddleExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::MiddleExprContext* FaParser::middleExpr() {
  MiddleExprContext *_localctx = _tracker.createInstance<MiddleExprContext>(_ctx, getState());
  enterRule(_localctx, 166, FaParser::RuleMiddleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1002);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Calc) {
      setState(1001);
      match(FaParser::Calc);
    }
    setState(1007);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
    case 1: {
      setState(1004);
      middle3OpExpr();
      break;
    }

    case 2: {
      setState(1005);
      middle2OpExpr();
      break;
    }

    case 3: {
      setState(1006);
      middleAstExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

FaParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::IfExprContext* FaParser::ExprContext::ifExpr() {
  return getRuleContext<FaParser::IfExprContext>(0);
}

FaParser::SwitchExpr2Context* FaParser::ExprContext::switchExpr2() {
  return getRuleContext<FaParser::SwitchExpr2Context>(0);
}

FaParser::SwitchExpr1Context* FaParser::ExprContext::switchExpr1() {
  return getRuleContext<FaParser::SwitchExpr1Context>(0);
}

FaParser::MiddleExprContext* FaParser::ExprContext::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}

std::vector<FaParser::StrongExprContext *> FaParser::ExprContext::strongExpr() {
  return getRuleContexts<FaParser::StrongExprContext>();
}

FaParser::StrongExprContext* FaParser::ExprContext::strongExpr(size_t i) {
  return getRuleContext<FaParser::StrongExprContext>(i);
}

std::vector<FaParser::AllAssignOpContext *> FaParser::ExprContext::allAssignOp() {
  return getRuleContexts<FaParser::AllAssignOpContext>();
}

FaParser::AllAssignOpContext* FaParser::ExprContext::allAssignOp(size_t i) {
  return getRuleContext<FaParser::AllAssignOpContext>(i);
}


size_t FaParser::ExprContext::getRuleIndex() const {
  return FaParser::RuleExpr;
}


std::any FaParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ExprContext* FaParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 168, FaParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1023);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1012); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1009);
                strongExpr();
                setState(1010);
                allAssignOp();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1014); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1020);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
      case 1: {
        setState(1016);
        ifExpr();
        break;
      }

      case 2: {
        setState(1017);
        switchExpr2();
        break;
      }

      case 3: {
        setState(1018);
        switchExpr1();
        break;
      }

      case 4: {
        setState(1019);
        middleExpr();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1022);
      middleExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdAssignOpExprContext ------------------------------------------------------------------

FaParser::IdAssignOpExprContext::IdAssignOpExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::IdAssignOpExprContext::Id() {
  return getToken(FaParser::Id, 0);
}

tree::TerminalNode* FaParser::IdAssignOpExprContext::AssignOp() {
  return getToken(FaParser::AssignOp, 0);
}

FaParser::MiddleExprContext* FaParser::IdAssignOpExprContext::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}

tree::TerminalNode* FaParser::IdAssignOpExprContext::Colon() {
  return getToken(FaParser::Colon, 0);
}

FaParser::TypeContext* FaParser::IdAssignOpExprContext::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}


size_t FaParser::IdAssignOpExprContext::getRuleIndex() const {
  return FaParser::RuleIdAssignOpExpr;
}


std::any FaParser::IdAssignOpExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitIdAssignOpExpr(this);
  else
    return visitor->visitChildren(this);
}

FaParser::IdAssignOpExprContext* FaParser::idAssignOpExpr() {
  IdAssignOpExprContext *_localctx = _tracker.createInstance<IdAssignOpExprContext>(_ctx, getState());
  enterRule(_localctx, 170, FaParser::RuleIdAssignOpExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1025);
    match(FaParser::Id);
    setState(1028);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Colon) {
      setState(1026);
      match(FaParser::Colon);
      setState(1027);
      type();
    }
    setState(1030);
    match(FaParser::AssignOp);
    setState(1031);
    middleExpr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefVarStmtPartContext ------------------------------------------------------------------

FaParser::DefVarStmtPartContext::DefVarStmtPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::DefVarStmtPartContext::AstClassVar() {
  return getToken(FaParser::AstClassVar, 0);
}

std::vector<FaParser::IdAssignOpExprContext *> FaParser::DefVarStmtPartContext::idAssignOpExpr() {
  return getRuleContexts<FaParser::IdAssignOpExprContext>();
}

FaParser::IdAssignOpExprContext* FaParser::DefVarStmtPartContext::idAssignOpExpr(size_t i) {
  return getRuleContext<FaParser::IdAssignOpExprContext>(i);
}

std::vector<tree::TerminalNode *> FaParser::DefVarStmtPartContext::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::DefVarStmtPartContext::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::DefVarStmtPartContext::getRuleIndex() const {
  return FaParser::RuleDefVarStmtPart;
}


std::any FaParser::DefVarStmtPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitDefVarStmtPart(this);
  else
    return visitor->visitChildren(this);
}

FaParser::DefVarStmtPartContext* FaParser::defVarStmtPart() {
  DefVarStmtPartContext *_localctx = _tracker.createInstance<DefVarStmtPartContext>(_ctx, getState());
  enterRule(_localctx, 172, FaParser::RuleDefVarStmtPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1033);
    match(FaParser::AstClassVar);
    setState(1034);
    idAssignOpExpr();
    setState(1039);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1035);
        match(FaParser::Comma);
        setState(1036);
        idAssignOpExpr(); 
      }
      setState(1041);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdAssignOpExpr2Context ------------------------------------------------------------------

FaParser::IdAssignOpExpr2Context::IdAssignOpExpr2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::IdAssignOpExpr2Context::Id() {
  return getToken(FaParser::Id, 0);
}

tree::TerminalNode* FaParser::IdAssignOpExpr2Context::AssignOp() {
  return getToken(FaParser::AssignOp, 0);
}

FaParser::MiddleExprContext* FaParser::IdAssignOpExpr2Context::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}


size_t FaParser::IdAssignOpExpr2Context::getRuleIndex() const {
  return FaParser::RuleIdAssignOpExpr2;
}


std::any FaParser::IdAssignOpExpr2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitIdAssignOpExpr2(this);
  else
    return visitor->visitChildren(this);
}

FaParser::IdAssignOpExpr2Context* FaParser::idAssignOpExpr2() {
  IdAssignOpExpr2Context *_localctx = _tracker.createInstance<IdAssignOpExpr2Context>(_ctx, getState());
  enterRule(_localctx, 174, FaParser::RuleIdAssignOpExpr2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1042);
    match(FaParser::Id);
    setState(1043);
    match(FaParser::AssignOp);
    setState(1044);
    middleExpr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefVarStmt2PartContext ------------------------------------------------------------------

FaParser::DefVarStmt2PartContext::DefVarStmt2PartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::TypeContext* FaParser::DefVarStmt2PartContext::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}

std::vector<FaParser::IdAssignOpExpr2Context *> FaParser::DefVarStmt2PartContext::idAssignOpExpr2() {
  return getRuleContexts<FaParser::IdAssignOpExpr2Context>();
}

FaParser::IdAssignOpExpr2Context* FaParser::DefVarStmt2PartContext::idAssignOpExpr2(size_t i) {
  return getRuleContext<FaParser::IdAssignOpExpr2Context>(i);
}

std::vector<tree::TerminalNode *> FaParser::DefVarStmt2PartContext::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::DefVarStmt2PartContext::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::DefVarStmt2PartContext::getRuleIndex() const {
  return FaParser::RuleDefVarStmt2Part;
}


std::any FaParser::DefVarStmt2PartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitDefVarStmt2Part(this);
  else
    return visitor->visitChildren(this);
}

FaParser::DefVarStmt2PartContext* FaParser::defVarStmt2Part() {
  DefVarStmt2PartContext *_localctx = _tracker.createInstance<DefVarStmt2PartContext>(_ctx, getState());
  enterRule(_localctx, 176, FaParser::RuleDefVarStmt2Part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1046);
    type();
    setState(1047);
    idAssignOpExpr2();
    setState(1052);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1048);
        match(FaParser::Comma);
        setState(1049);
        idAssignOpExpr2(); 
      }
      setState(1054);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefTypeStmtContext ------------------------------------------------------------------

FaParser::DefTypeStmtContext::DefTypeStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::DefTypeStmtContext::Type() {
  return getToken(FaParser::Type, 0);
}

tree::TerminalNode* FaParser::DefTypeStmtContext::Id() {
  return getToken(FaParser::Id, 0);
}

tree::TerminalNode* FaParser::DefTypeStmtContext::AssignOp() {
  return getToken(FaParser::AssignOp, 0);
}

std::vector<FaParser::TypeContext *> FaParser::DefTypeStmtContext::type() {
  return getRuleContexts<FaParser::TypeContext>();
}

FaParser::TypeContext* FaParser::DefTypeStmtContext::type(size_t i) {
  return getRuleContext<FaParser::TypeContext>(i);
}

FaParser::EndlContext* FaParser::DefTypeStmtContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<tree::TerminalNode *> FaParser::DefTypeStmtContext::OrOrOp() {
  return getTokens(FaParser::OrOrOp);
}

tree::TerminalNode* FaParser::DefTypeStmtContext::OrOrOp(size_t i) {
  return getToken(FaParser::OrOrOp, i);
}


size_t FaParser::DefTypeStmtContext::getRuleIndex() const {
  return FaParser::RuleDefTypeStmt;
}


std::any FaParser::DefTypeStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitDefTypeStmt(this);
  else
    return visitor->visitChildren(this);
}

FaParser::DefTypeStmtContext* FaParser::defTypeStmt() {
  DefTypeStmtContext *_localctx = _tracker.createInstance<DefTypeStmtContext>(_ctx, getState());
  enterRule(_localctx, 178, FaParser::RuleDefTypeStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1055);
    match(FaParser::Type);
    setState(1056);
    match(FaParser::Id);
    setState(1057);
    match(FaParser::AssignOp);
    setState(1058);
    type();
    setState(1063);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::OrOrOp) {
      setState(1059);
      match(FaParser::OrOrOp);
      setState(1060);
      type();
      setState(1065);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1066);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalStmtPartContext ------------------------------------------------------------------

FaParser::NormalStmtPartContext::NormalStmtPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::ExprContext* FaParser::NormalStmtPartContext::expr() {
  return getRuleContext<FaParser::ExprContext>(0);
}

tree::TerminalNode* FaParser::NormalStmtPartContext::Return() {
  return getToken(FaParser::Return, 0);
}

tree::TerminalNode* FaParser::NormalStmtPartContext::Break() {
  return getToken(FaParser::Break, 0);
}

tree::TerminalNode* FaParser::NormalStmtPartContext::Continue() {
  return getToken(FaParser::Continue, 0);
}

FaParser::DefVarStmtPartContext* FaParser::NormalStmtPartContext::defVarStmtPart() {
  return getRuleContext<FaParser::DefVarStmtPartContext>(0);
}

FaParser::DefVarStmt2PartContext* FaParser::NormalStmtPartContext::defVarStmt2Part() {
  return getRuleContext<FaParser::DefVarStmt2PartContext>(0);
}


size_t FaParser::NormalStmtPartContext::getRuleIndex() const {
  return FaParser::RuleNormalStmtPart;
}


std::any FaParser::NormalStmtPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitNormalStmtPart(this);
  else
    return visitor->visitChildren(this);
}

FaParser::NormalStmtPartContext* FaParser::normalStmtPart() {
  NormalStmtPartContext *_localctx = _tracker.createInstance<NormalStmtPartContext>(_ctx, getState());
  enterRule(_localctx, 180, FaParser::RuleNormalStmtPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1077);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1069);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FaParser::Return) {
        setState(1068);
        match(FaParser::Return);
      }
      setState(1071);
      expr();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1072);
      match(FaParser::Return);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1073);
      match(FaParser::Break);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1074);
      match(FaParser::Continue);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1075);
      defVarStmtPart();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1076);
      defVarStmt2Part();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalStmtContext ------------------------------------------------------------------

FaParser::NormalStmtContext::NormalStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::NormalStmtPartContext* FaParser::NormalStmtContext::normalStmtPart() {
  return getRuleContext<FaParser::NormalStmtPartContext>(0);
}

FaParser::EndlContext* FaParser::NormalStmtContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}


size_t FaParser::NormalStmtContext::getRuleIndex() const {
  return FaParser::RuleNormalStmt;
}


std::any FaParser::NormalStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitNormalStmt(this);
  else
    return visitor->visitChildren(this);
}

FaParser::NormalStmtContext* FaParser::normalStmt() {
  NormalStmtContext *_localctx = _tracker.createInstance<NormalStmtContext>(_ctx, getState());
  enterRule(_localctx, 182, FaParser::RuleNormalStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1079);
    normalStmtPart();
    setState(1080);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

FaParser::StmtContext::StmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::IfStmtContext* FaParser::StmtContext::ifStmt() {
  return getRuleContext<FaParser::IfStmtContext>(0);
}

FaParser::WhileStmtContext* FaParser::StmtContext::whileStmt() {
  return getRuleContext<FaParser::WhileStmtContext>(0);
}

FaParser::WhileStmt2Context* FaParser::StmtContext::whileStmt2() {
  return getRuleContext<FaParser::WhileStmt2Context>(0);
}

FaParser::ForStmtContext* FaParser::StmtContext::forStmt() {
  return getRuleContext<FaParser::ForStmtContext>(0);
}

FaParser::QuotStmtPartContext* FaParser::StmtContext::quotStmtPart() {
  return getRuleContext<FaParser::QuotStmtPartContext>(0);
}

FaParser::EndlContext* FaParser::StmtContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

FaParser::SwitchStmt2Context* FaParser::StmtContext::switchStmt2() {
  return getRuleContext<FaParser::SwitchStmt2Context>(0);
}

FaParser::SwitchStmtContext* FaParser::StmtContext::switchStmt() {
  return getRuleContext<FaParser::SwitchStmtContext>(0);
}

FaParser::NormalStmtContext* FaParser::StmtContext::normalStmt() {
  return getRuleContext<FaParser::NormalStmtContext>(0);
}


size_t FaParser::StmtContext::getRuleIndex() const {
  return FaParser::RuleStmt;
}


std::any FaParser::StmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitStmt(this);
  else
    return visitor->visitChildren(this);
}

FaParser::StmtContext* FaParser::stmt() {
  StmtContext *_localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
  enterRule(_localctx, 184, FaParser::RuleStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1092);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1082);
      ifStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1083);
      whileStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1084);
      whileStmt2();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1085);
      forStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1086);
      quotStmtPart();
      setState(1087);
      endl();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1089);
      switchStmt2();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1090);
      switchStmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1091);
      normalStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PublicLevelContext ------------------------------------------------------------------

FaParser::PublicLevelContext::PublicLevelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::PublicLevelContext::Public() {
  return getToken(FaParser::Public, 0);
}

tree::TerminalNode* FaParser::PublicLevelContext::Internal() {
  return getToken(FaParser::Internal, 0);
}

tree::TerminalNode* FaParser::PublicLevelContext::Protected() {
  return getToken(FaParser::Protected, 0);
}

tree::TerminalNode* FaParser::PublicLevelContext::Private() {
  return getToken(FaParser::Private, 0);
}


size_t FaParser::PublicLevelContext::getRuleIndex() const {
  return FaParser::RulePublicLevel;
}


std::any FaParser::PublicLevelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitPublicLevel(this);
  else
    return visitor->visitChildren(this);
}

FaParser::PublicLevelContext* FaParser::publicLevel() {
  PublicLevelContext *_localctx = _tracker.createInstance<PublicLevelContext>(_ctx, getState());
  enterRule(_localctx, 186, FaParser::RulePublicLevel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1094);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Internal)
      | (1ULL << FaParser::Public)
      | (1ULL << FaParser::Protected)
      | (1ULL << FaParser::Private))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockTemplatesContext ------------------------------------------------------------------

FaParser::BlockTemplatesContext::BlockTemplatesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::QuotJianLContext* FaParser::BlockTemplatesContext::quotJianL() {
  return getRuleContext<FaParser::QuotJianLContext>(0);
}

std::vector<tree::TerminalNode *> FaParser::BlockTemplatesContext::Id() {
  return getTokens(FaParser::Id);
}

tree::TerminalNode* FaParser::BlockTemplatesContext::Id(size_t i) {
  return getToken(FaParser::Id, i);
}

FaParser::QuotJianRContext* FaParser::BlockTemplatesContext::quotJianR() {
  return getRuleContext<FaParser::QuotJianRContext>(0);
}

std::vector<tree::TerminalNode *> FaParser::BlockTemplatesContext::Comma() {
  return getTokens(FaParser::Comma);
}

tree::TerminalNode* FaParser::BlockTemplatesContext::Comma(size_t i) {
  return getToken(FaParser::Comma, i);
}


size_t FaParser::BlockTemplatesContext::getRuleIndex() const {
  return FaParser::RuleBlockTemplates;
}


std::any FaParser::BlockTemplatesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitBlockTemplates(this);
  else
    return visitor->visitChildren(this);
}

FaParser::BlockTemplatesContext* FaParser::blockTemplates() {
  BlockTemplatesContext *_localctx = _tracker.createInstance<BlockTemplatesContext>(_ctx, getState());
  enterRule(_localctx, 188, FaParser::RuleBlockTemplates);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1096);
    quotJianL();
    setState(1097);
    match(FaParser::Id);
    setState(1102);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Comma) {
      setState(1098);
      match(FaParser::Comma);
      setState(1099);
      match(FaParser::Id);
      setState(1104);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1105);
    quotJianR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ItemNameContext ------------------------------------------------------------------

FaParser::ItemNameContext::ItemNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::ItemNameContext::Id() {
  return getToken(FaParser::Id, 0);
}

tree::TerminalNode* FaParser::ItemNameContext::Operator() {
  return getToken(FaParser::Operator, 0);
}

FaParser::AllOp2Context* FaParser::ItemNameContext::allOp2() {
  return getRuleContext<FaParser::AllOp2Context>(0);
}

tree::TerminalNode* FaParser::ItemNameContext::QFangL() {
  return getToken(FaParser::QFangL, 0);
}

tree::TerminalNode* FaParser::ItemNameContext::QFangR() {
  return getToken(FaParser::QFangR, 0);
}


size_t FaParser::ItemNameContext::getRuleIndex() const {
  return FaParser::RuleItemName;
}


std::any FaParser::ItemNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitItemName(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ItemNameContext* FaParser::itemName() {
  ItemNameContext *_localctx = _tracker.createInstance<ItemNameContext>(_ctx, getState());
  enterRule(_localctx, 190, FaParser::RuleItemName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1114);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::Id: {
        enterOuterAlt(_localctx, 1);
        setState(1107);
        match(FaParser::Id);
        break;
      }

      case FaParser::Operator: {
        enterOuterAlt(_localctx, 2);
        setState(1108);
        match(FaParser::Operator);
        setState(1112);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FaParser::AddOp:
          case FaParser::SubOp:
          case FaParser::StarOp:
          case FaParser::DivOp:
          case FaParser::ModOp:
          case FaParser::OrOp:
          case FaParser::AndOp:
          case FaParser::XorOp:
          case FaParser::QusQusOp:
          case FaParser::StarStarOp:
          case FaParser::AndAndOp:
          case FaParser::OrOrOp:
          case FaParser::LessThan:
          case FaParser::GreatThan:
          case FaParser::LtEqualOp:
          case FaParser::GtEqualOp:
          case FaParser::EqualOp:
          case FaParser::NotEqualOp: {
            setState(1109);
            allOp2();
            break;
          }

          case FaParser::QFangL: {
            setState(1110);
            match(FaParser::QFangL);
            setState(1111);
            match(FaParser::QFangR);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNameTupleContext ------------------------------------------------------------------

FaParser::TypeNameTupleContext::TypeNameTupleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::ItemNameContext* FaParser::TypeNameTupleContext::itemName() {
  return getRuleContext<FaParser::ItemNameContext>(0);
}

tree::TerminalNode* FaParser::TypeNameTupleContext::Colon() {
  return getToken(FaParser::Colon, 0);
}

FaParser::TypeContext* FaParser::TypeNameTupleContext::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}


size_t FaParser::TypeNameTupleContext::getRuleIndex() const {
  return FaParser::RuleTypeNameTuple;
}


std::any FaParser::TypeNameTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeNameTuple(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeNameTupleContext* FaParser::typeNameTuple() {
  TypeNameTupleContext *_localctx = _tracker.createInstance<TypeNameTupleContext>(_ctx, getState());
  enterRule(_localctx, 192, FaParser::RuleTypeNameTuple);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1123);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1116);
      itemName();
      setState(1117);
      match(FaParser::Colon);
      setState(1118);
      type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1120);
      type();
      setState(1121);
      itemName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNameArgsTupleContext ------------------------------------------------------------------

FaParser::TypeNameArgsTupleContext::TypeNameArgsTupleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::ItemNameContext* FaParser::TypeNameArgsTupleContext::itemName() {
  return getRuleContext<FaParser::ItemNameContext>(0);
}

FaParser::QuotYuanLContext* FaParser::TypeNameArgsTupleContext::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

FaParser::QuotYuanRContext* FaParser::TypeNameArgsTupleContext::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}

tree::TerminalNode* FaParser::TypeNameArgsTupleContext::Colon() {
  return getToken(FaParser::Colon, 0);
}

FaParser::TypeContext* FaParser::TypeNameArgsTupleContext::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}

FaParser::BlockTemplatesContext* FaParser::TypeNameArgsTupleContext::blockTemplates() {
  return getRuleContext<FaParser::BlockTemplatesContext>(0);
}

FaParser::TypeWrapVarList1Context* FaParser::TypeNameArgsTupleContext::typeWrapVarList1() {
  return getRuleContext<FaParser::TypeWrapVarList1Context>(0);
}

FaParser::TypeWrapVarList2Context* FaParser::TypeNameArgsTupleContext::typeWrapVarList2() {
  return getRuleContext<FaParser::TypeWrapVarList2Context>(0);
}


size_t FaParser::TypeNameArgsTupleContext::getRuleIndex() const {
  return FaParser::RuleTypeNameArgsTuple;
}


std::any FaParser::TypeNameArgsTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitTypeNameArgsTuple(this);
  else
    return visitor->visitChildren(this);
}

FaParser::TypeNameArgsTupleContext* FaParser::typeNameArgsTuple() {
  TypeNameArgsTupleContext *_localctx = _tracker.createInstance<TypeNameArgsTupleContext>(_ctx, getState());
  enterRule(_localctx, 194, FaParser::RuleTypeNameArgsTuple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1148);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1125);
      itemName();
      setState(1127);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FaParser::LessThan) {
        setState(1126);
        blockTemplates();
      }
      setState(1129);
      quotYuanL();
      setState(1131);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << FaParser::Disperse)
        | (1ULL << FaParser::Mut)
        | (1ULL << FaParser::Params))) != 0) || _la == FaParser::Id) {
        setState(1130);
        typeWrapVarList1();
      }
      setState(1133);
      quotYuanR();
      setState(1134);
      match(FaParser::Colon);
      setState(1135);
      type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1137);
      type();
      setState(1138);
      itemName();
      setState(1140);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FaParser::LessThan) {
        setState(1139);
        blockTemplates();
      }
      setState(1142);
      quotYuanL();
      setState(1144);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << FaParser::Disperse)
        | (1ULL << FaParser::Mut)
        | (1ULL << FaParser::Params)
        | (1ULL << FaParser::Type))) != 0) || _la == FaParser::QYuanL

      || _la == FaParser::Id) {
        setState(1143);
        typeWrapVarList2();
      }
      setState(1146);
      quotYuanR();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameArgsTupleContext ------------------------------------------------------------------

FaParser::NameArgsTupleContext::NameArgsTupleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::NameArgsTupleContext::Id() {
  return getToken(FaParser::Id, 0);
}

FaParser::QuotYuanLContext* FaParser::NameArgsTupleContext::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

FaParser::QuotYuanRContext* FaParser::NameArgsTupleContext::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}

FaParser::TypeWrapVarList1Context* FaParser::NameArgsTupleContext::typeWrapVarList1() {
  return getRuleContext<FaParser::TypeWrapVarList1Context>(0);
}

FaParser::TypeWrapVarList2Context* FaParser::NameArgsTupleContext::typeWrapVarList2() {
  return getRuleContext<FaParser::TypeWrapVarList2Context>(0);
}


size_t FaParser::NameArgsTupleContext::getRuleIndex() const {
  return FaParser::RuleNameArgsTuple;
}


std::any FaParser::NameArgsTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitNameArgsTuple(this);
  else
    return visitor->visitChildren(this);
}

FaParser::NameArgsTupleContext* FaParser::nameArgsTuple() {
  NameArgsTupleContext *_localctx = _tracker.createInstance<NameArgsTupleContext>(_ctx, getState());
  enterRule(_localctx, 196, FaParser::RuleNameArgsTuple);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1150);
    match(FaParser::Id);
    setState(1151);
    quotYuanL();
    setState(1154);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      setState(1152);
      typeWrapVarList1();
      break;
    }

    case 2: {
      setState(1153);
      typeWrapVarList2();
      break;
    }

    default:
      break;
    }
    setState(1156);
    quotYuanR();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncBodyContext ------------------------------------------------------------------

FaParser::FuncBodyContext::FuncBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::FuncBodyContext::ExprFuncDef() {
  return getToken(FaParser::ExprFuncDef, 0);
}

FaParser::ExprContext* FaParser::FuncBodyContext::expr() {
  return getRuleContext<FaParser::ExprContext>(0);
}

FaParser::QuotHuaLContext* FaParser::FuncBodyContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::FuncBodyContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

std::vector<FaParser::StmtContext *> FaParser::FuncBodyContext::stmt() {
  return getRuleContexts<FaParser::StmtContext>();
}

FaParser::StmtContext* FaParser::FuncBodyContext::stmt(size_t i) {
  return getRuleContext<FaParser::StmtContext>(i);
}


size_t FaParser::FuncBodyContext::getRuleIndex() const {
  return FaParser::RuleFuncBody;
}


std::any FaParser::FuncBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitFuncBody(this);
  else
    return visitor->visitChildren(this);
}

FaParser::FuncBodyContext* FaParser::funcBody() {
  FuncBodyContext *_localctx = _tracker.createInstance<FuncBodyContext>(_ctx, getState());
  enterRule(_localctx, 198, FaParser::RuleFuncBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1169);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FaParser::ExprFuncDef: {
        enterOuterAlt(_localctx, 1);
        setState(1158);
        match(FaParser::ExprFuncDef);
        setState(1159);
        expr();
        break;
      }

      case FaParser::QHuaL: {
        enterOuterAlt(_localctx, 2);
        setState(1160);
        quotHuaL();
        setState(1164);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << FaParser::Break)
          | (1ULL << FaParser::Calc)
          | (1ULL << FaParser::Continue)
          | (1ULL << FaParser::Cast)
          | (1ULL << FaParser::Do)
          | (1ULL << FaParser::Expr)
          | (1ULL << FaParser::For)
          | (1ULL << FaParser::If)
          | (1ULL << FaParser::New)
          | (1ULL << FaParser::Return)
          | (1ULL << FaParser::Stmt)
          | (1ULL << FaParser::Switch)
          | (1ULL << FaParser::Type)
          | (1ULL << FaParser::AstClassVar)
          | (1ULL << FaParser::While)
          | (1ULL << FaParser::ReverseOp)
          | (1ULL << FaParser::AddAddOp)
          | (1ULL << FaParser::SubSubOp))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & ((1ULL << (FaParser::Exclam - 64))
          | (1ULL << (FaParser::SubOp - 64))
          | (1ULL << (FaParser::ColonColon - 64))
          | (1ULL << (FaParser::QFangL - 64))
          | (1ULL << (FaParser::QHuaL - 64))
          | (1ULL << (FaParser::QYuanL - 64))
          | (1ULL << (FaParser::BoolLiteral - 64))
          | (1ULL << (FaParser::HexLiteral - 64))
          | (1ULL << (FaParser::IntLiteral - 64))
          | (1ULL << (FaParser::FloatLiteral - 64))
          | (1ULL << (FaParser::String1Literal - 64))
          | (1ULL << (FaParser::String2Literal - 64))
          | (1ULL << (FaParser::String3Literal - 64))
          | (1ULL << (FaParser::FmtString1 - 64))
          | (1ULL << (FaParser::FmtString2 - 64))
          | (1ULL << (FaParser::Id - 64)))) != 0)) {
          setState(1161);
          stmt();
          setState(1166);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1167);
        quotHuaR();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnoArgContext ------------------------------------------------------------------

FaParser::AnnoArgContext::AnnoArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::AnnoArgContext::Id() {
  return getToken(FaParser::Id, 0);
}

tree::TerminalNode* FaParser::AnnoArgContext::AssignOp() {
  return getToken(FaParser::AssignOp, 0);
}

FaParser::MiddleExprContext* FaParser::AnnoArgContext::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}


size_t FaParser::AnnoArgContext::getRuleIndex() const {
  return FaParser::RuleAnnoArg;
}


std::any FaParser::AnnoArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitAnnoArg(this);
  else
    return visitor->visitChildren(this);
}

FaParser::AnnoArgContext* FaParser::annoArg() {
  AnnoArgContext *_localctx = _tracker.createInstance<AnnoArgContext>(_ctx, getState());
  enterRule(_localctx, 200, FaParser::RuleAnnoArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1171);
    match(FaParser::Id);
    setState(1172);
    match(FaParser::AssignOp);
    setState(1173);
    middleExpr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnoPartContext ------------------------------------------------------------------

FaParser::AnnoPartContext::AnnoPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::AnnoPartContext::Id() {
  return getToken(FaParser::Id, 0);
}

FaParser::EndlContext* FaParser::AnnoPartContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

FaParser::QuotHuaLContext* FaParser::AnnoPartContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::AnnoPartContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

std::vector<FaParser::AnnoArgContext *> FaParser::AnnoPartContext::annoArg() {
  return getRuleContexts<FaParser::AnnoArgContext>();
}

FaParser::AnnoArgContext* FaParser::AnnoPartContext::annoArg(size_t i) {
  return getRuleContext<FaParser::AnnoArgContext>(i);
}

std::vector<FaParser::Endl2Context *> FaParser::AnnoPartContext::endl2() {
  return getRuleContexts<FaParser::Endl2Context>();
}

FaParser::Endl2Context* FaParser::AnnoPartContext::endl2(size_t i) {
  return getRuleContext<FaParser::Endl2Context>(i);
}


size_t FaParser::AnnoPartContext::getRuleIndex() const {
  return FaParser::RuleAnnoPart;
}


std::any FaParser::AnnoPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitAnnoPart(this);
  else
    return visitor->visitChildren(this);
}

FaParser::AnnoPartContext* FaParser::annoPart() {
  AnnoPartContext *_localctx = _tracker.createInstance<AnnoPartContext>(_ctx, getState());
  enterRule(_localctx, 202, FaParser::RuleAnnoPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1175);
    match(FaParser::Id);
    setState(1190);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::QHuaL) {
      setState(1176);
      quotHuaL();
      setState(1186);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FaParser::Id) {
        setState(1182);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1177);
            annoArg();
            setState(1178);
            endl2(); 
          }
          setState(1184);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx);
        }
        setState(1185);
        annoArg();
      }
      setState(1188);
      quotHuaR();
    }
    setState(1192);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnoBlockContext ------------------------------------------------------------------

FaParser::AnnoBlockContext::AnnoBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::AnnoBlockContext::Annotation() {
  return getToken(FaParser::Annotation, 0);
}

tree::TerminalNode* FaParser::AnnoBlockContext::Id() {
  return getToken(FaParser::Id, 0);
}

FaParser::QuotHuaLContext* FaParser::AnnoBlockContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::AnnoBlockContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

FaParser::EndlContext* FaParser::AnnoBlockContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<FaParser::AnnoPartContext *> FaParser::AnnoBlockContext::annoPart() {
  return getRuleContexts<FaParser::AnnoPartContext>();
}

FaParser::AnnoPartContext* FaParser::AnnoBlockContext::annoPart(size_t i) {
  return getRuleContext<FaParser::AnnoPartContext>(i);
}

std::vector<FaParser::ClassVarContext *> FaParser::AnnoBlockContext::classVar() {
  return getRuleContexts<FaParser::ClassVarContext>();
}

FaParser::ClassVarContext* FaParser::AnnoBlockContext::classVar(size_t i) {
  return getRuleContext<FaParser::ClassVarContext>(i);
}

std::vector<FaParser::ClassFuncContext *> FaParser::AnnoBlockContext::classFunc() {
  return getRuleContexts<FaParser::ClassFuncContext>();
}

FaParser::ClassFuncContext* FaParser::AnnoBlockContext::classFunc(size_t i) {
  return getRuleContext<FaParser::ClassFuncContext>(i);
}


size_t FaParser::AnnoBlockContext::getRuleIndex() const {
  return FaParser::RuleAnnoBlock;
}


std::any FaParser::AnnoBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitAnnoBlock(this);
  else
    return visitor->visitChildren(this);
}

FaParser::AnnoBlockContext* FaParser::annoBlock() {
  AnnoBlockContext *_localctx = _tracker.createInstance<AnnoBlockContext>(_ctx, getState());
  enterRule(_localctx, 204, FaParser::RuleAnnoBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1197);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Id) {
      setState(1194);
      annoPart();
      setState(1199);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1200);
    match(FaParser::Annotation);
    setState(1201);
    match(FaParser::Id);
    setState(1202);
    quotHuaL();
    setState(1207);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Internal)
      | (1ULL << FaParser::Operator)
      | (1ULL << FaParser::Public)
      | (1ULL << FaParser::Protected)
      | (1ULL << FaParser::Private)
      | (1ULL << FaParser::Static)
      | (1ULL << FaParser::Type))) != 0) || _la == FaParser::QYuanL

    || _la == FaParser::Id) {
      setState(1205);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
      case 1: {
        setState(1203);
        classVar();
        break;
      }

      case 2: {
        setState(1204);
        classFunc();
        break;
      }

      default:
        break;
      }
      setState(1209);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1210);
    quotHuaR();
    setState(1211);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportedConstructFuncContext ------------------------------------------------------------------

FaParser::ImportedConstructFuncContext::ImportedConstructFuncContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::NameArgsTupleContext* FaParser::ImportedConstructFuncContext::nameArgsTuple() {
  return getRuleContext<FaParser::NameArgsTupleContext>(0);
}

FaParser::EndlContext* FaParser::ImportedConstructFuncContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<FaParser::AnnoPartContext *> FaParser::ImportedConstructFuncContext::annoPart() {
  return getRuleContexts<FaParser::AnnoPartContext>();
}

FaParser::AnnoPartContext* FaParser::ImportedConstructFuncContext::annoPart(size_t i) {
  return getRuleContext<FaParser::AnnoPartContext>(i);
}

FaParser::PublicLevelContext* FaParser::ImportedConstructFuncContext::publicLevel() {
  return getRuleContext<FaParser::PublicLevelContext>(0);
}


size_t FaParser::ImportedConstructFuncContext::getRuleIndex() const {
  return FaParser::RuleImportedConstructFunc;
}


std::any FaParser::ImportedConstructFuncContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitImportedConstructFunc(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ImportedConstructFuncContext* FaParser::importedConstructFunc() {
  ImportedConstructFuncContext *_localctx = _tracker.createInstance<ImportedConstructFuncContext>(_ctx, getState());
  enterRule(_localctx, 206, FaParser::RuleImportedConstructFunc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1216);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1213);
        annoPart(); 
      }
      setState(1218);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    }
    setState(1220);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Internal)
      | (1ULL << FaParser::Public)
      | (1ULL << FaParser::Protected)
      | (1ULL << FaParser::Private))) != 0)) {
      setState(1219);
      publicLevel();
    }
    setState(1222);
    nameArgsTuple();
    setState(1223);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarAccesserContext ------------------------------------------------------------------

FaParser::VarAccesserContext::VarAccesserContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::VarAccesserContext::Get() {
  return getToken(FaParser::Get, 0);
}

tree::TerminalNode* FaParser::VarAccesserContext::Set() {
  return getToken(FaParser::Set, 0);
}

FaParser::PublicLevelContext* FaParser::VarAccesserContext::publicLevel() {
  return getRuleContext<FaParser::PublicLevelContext>(0);
}

FaParser::FuncBodyContext* FaParser::VarAccesserContext::funcBody() {
  return getRuleContext<FaParser::FuncBodyContext>(0);
}


size_t FaParser::VarAccesserContext::getRuleIndex() const {
  return FaParser::RuleVarAccesser;
}


std::any FaParser::VarAccesserContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitVarAccesser(this);
  else
    return visitor->visitChildren(this);
}

FaParser::VarAccesserContext* FaParser::varAccesser() {
  VarAccesserContext *_localctx = _tracker.createInstance<VarAccesserContext>(_ctx, getState());
  enterRule(_localctx, 208, FaParser::RuleVarAccesser);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Internal)
      | (1ULL << FaParser::Public)
      | (1ULL << FaParser::Protected)
      | (1ULL << FaParser::Private))) != 0)) {
      setState(1225);
      publicLevel();
    }
    setState(1228);
    _la = _input->LA(1);
    if (!(_la == FaParser::Get

    || _la == FaParser::Set)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1230);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::QHuaL

    || _la == FaParser::ExprFuncDef) {
      setState(1229);
      funcBody();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarAccesserItemsContext ------------------------------------------------------------------

FaParser::VarAccesserItemsContext::VarAccesserItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::VarAccesserContext *> FaParser::VarAccesserItemsContext::varAccesser() {
  return getRuleContexts<FaParser::VarAccesserContext>();
}

FaParser::VarAccesserContext* FaParser::VarAccesserItemsContext::varAccesser(size_t i) {
  return getRuleContext<FaParser::VarAccesserContext>(i);
}

std::vector<FaParser::EndlContext *> FaParser::VarAccesserItemsContext::endl() {
  return getRuleContexts<FaParser::EndlContext>();
}

FaParser::EndlContext* FaParser::VarAccesserItemsContext::endl(size_t i) {
  return getRuleContext<FaParser::EndlContext>(i);
}


size_t FaParser::VarAccesserItemsContext::getRuleIndex() const {
  return FaParser::RuleVarAccesserItems;
}


std::any FaParser::VarAccesserItemsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitVarAccesserItems(this);
  else
    return visitor->visitChildren(this);
}

FaParser::VarAccesserItemsContext* FaParser::varAccesserItems() {
  VarAccesserItemsContext *_localctx = _tracker.createInstance<VarAccesserItemsContext>(_ctx, getState());
  enterRule(_localctx, 210, FaParser::RuleVarAccesserItems);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1232);
    varAccesser();
    setState(1238);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1233);
        endl();
        setState(1234);
        varAccesser(); 
      }
      setState(1240);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassVarContext ------------------------------------------------------------------

FaParser::ClassVarContext::ClassVarContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::TypeNameTupleContext* FaParser::ClassVarContext::typeNameTuple() {
  return getRuleContext<FaParser::TypeNameTupleContext>(0);
}

FaParser::EndlContext* FaParser::ClassVarContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<FaParser::AnnoPartContext *> FaParser::ClassVarContext::annoPart() {
  return getRuleContexts<FaParser::AnnoPartContext>();
}

FaParser::AnnoPartContext* FaParser::ClassVarContext::annoPart(size_t i) {
  return getRuleContext<FaParser::AnnoPartContext>(i);
}

FaParser::PublicLevelContext* FaParser::ClassVarContext::publicLevel() {
  return getRuleContext<FaParser::PublicLevelContext>(0);
}

tree::TerminalNode* FaParser::ClassVarContext::Static() {
  return getToken(FaParser::Static, 0);
}

FaParser::QuotHuaLContext* FaParser::ClassVarContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::VarAccesserItemsContext* FaParser::ClassVarContext::varAccesserItems() {
  return getRuleContext<FaParser::VarAccesserItemsContext>(0);
}

FaParser::QuotHuaRContext* FaParser::ClassVarContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

tree::TerminalNode* FaParser::ClassVarContext::AssignOp() {
  return getToken(FaParser::AssignOp, 0);
}

FaParser::MiddleExprContext* FaParser::ClassVarContext::middleExpr() {
  return getRuleContext<FaParser::MiddleExprContext>(0);
}


size_t FaParser::ClassVarContext::getRuleIndex() const {
  return FaParser::RuleClassVar;
}


std::any FaParser::ClassVarContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitClassVar(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ClassVarContext* FaParser::classVar() {
  ClassVarContext *_localctx = _tracker.createInstance<ClassVarContext>(_ctx, getState());
  enterRule(_localctx, 212, FaParser::RuleClassVar);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1244);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1241);
        annoPart(); 
      }
      setState(1246);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    }
    setState(1248);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Internal)
      | (1ULL << FaParser::Public)
      | (1ULL << FaParser::Protected)
      | (1ULL << FaParser::Private))) != 0)) {
      setState(1247);
      publicLevel();
    }
    setState(1251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Static) {
      setState(1250);
      match(FaParser::Static);
    }
    setState(1253);
    typeNameTuple();
    setState(1258);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::QHuaL) {
      setState(1254);
      quotHuaL();
      setState(1255);
      varAccesserItems();
      setState(1256);
      quotHuaR();
    }
    setState(1262);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::AssignOp) {
      setState(1260);
      match(FaParser::AssignOp);
      setState(1261);
      middleExpr();
    }
    setState(1264);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassFuncContext ------------------------------------------------------------------

FaParser::ClassFuncContext::ClassFuncContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::TypeNameArgsTupleContext* FaParser::ClassFuncContext::typeNameArgsTuple() {
  return getRuleContext<FaParser::TypeNameArgsTupleContext>(0);
}

FaParser::EndlContext* FaParser::ClassFuncContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<FaParser::AnnoPartContext *> FaParser::ClassFuncContext::annoPart() {
  return getRuleContexts<FaParser::AnnoPartContext>();
}

FaParser::AnnoPartContext* FaParser::ClassFuncContext::annoPart(size_t i) {
  return getRuleContext<FaParser::AnnoPartContext>(i);
}

FaParser::PublicLevelContext* FaParser::ClassFuncContext::publicLevel() {
  return getRuleContext<FaParser::PublicLevelContext>(0);
}

tree::TerminalNode* FaParser::ClassFuncContext::Static() {
  return getToken(FaParser::Static, 0);
}

FaParser::FuncBodyContext* FaParser::ClassFuncContext::funcBody() {
  return getRuleContext<FaParser::FuncBodyContext>(0);
}


size_t FaParser::ClassFuncContext::getRuleIndex() const {
  return FaParser::RuleClassFunc;
}


std::any FaParser::ClassFuncContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitClassFunc(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ClassFuncContext* FaParser::classFunc() {
  ClassFuncContext *_localctx = _tracker.createInstance<ClassFuncContext>(_ctx, getState());
  enterRule(_localctx, 214, FaParser::RuleClassFunc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1269);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1266);
        annoPart(); 
      }
      setState(1271);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
    }
    setState(1273);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Internal)
      | (1ULL << FaParser::Public)
      | (1ULL << FaParser::Protected)
      | (1ULL << FaParser::Private))) != 0)) {
      setState(1272);
      publicLevel();
    }
    setState(1276);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Static) {
      setState(1275);
      match(FaParser::Static);
    }
    setState(1278);
    typeNameArgsTuple();
    setState(1280);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::QHuaL

    || _la == FaParser::ExprFuncDef) {
      setState(1279);
      funcBody();
    }
    setState(1282);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBlockContext ------------------------------------------------------------------

FaParser::ClassBlockContext::ClassBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::ClassBlockContext::Class() {
  return getToken(FaParser::Class, 0);
}

tree::TerminalNode* FaParser::ClassBlockContext::Id() {
  return getToken(FaParser::Id, 0);
}

FaParser::QuotHuaLContext* FaParser::ClassBlockContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::ClassBlockContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

FaParser::EndlContext* FaParser::ClassBlockContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<FaParser::AnnoPartContext *> FaParser::ClassBlockContext::annoPart() {
  return getRuleContexts<FaParser::AnnoPartContext>();
}

FaParser::AnnoPartContext* FaParser::ClassBlockContext::annoPart(size_t i) {
  return getRuleContext<FaParser::AnnoPartContext>(i);
}

FaParser::PublicLevelContext* FaParser::ClassBlockContext::publicLevel() {
  return getRuleContext<FaParser::PublicLevelContext>(0);
}

FaParser::BlockTemplatesContext* FaParser::ClassBlockContext::blockTemplates() {
  return getRuleContext<FaParser::BlockTemplatesContext>(0);
}

std::vector<FaParser::ClassVarContext *> FaParser::ClassBlockContext::classVar() {
  return getRuleContexts<FaParser::ClassVarContext>();
}

FaParser::ClassVarContext* FaParser::ClassBlockContext::classVar(size_t i) {
  return getRuleContext<FaParser::ClassVarContext>(i);
}

std::vector<FaParser::ClassFuncContext *> FaParser::ClassBlockContext::classFunc() {
  return getRuleContexts<FaParser::ClassFuncContext>();
}

FaParser::ClassFuncContext* FaParser::ClassBlockContext::classFunc(size_t i) {
  return getRuleContext<FaParser::ClassFuncContext>(i);
}

std::vector<FaParser::ImportedConstructFuncContext *> FaParser::ClassBlockContext::importedConstructFunc() {
  return getRuleContexts<FaParser::ImportedConstructFuncContext>();
}

FaParser::ImportedConstructFuncContext* FaParser::ClassBlockContext::importedConstructFunc(size_t i) {
  return getRuleContext<FaParser::ImportedConstructFuncContext>(i);
}


size_t FaParser::ClassBlockContext::getRuleIndex() const {
  return FaParser::RuleClassBlock;
}


std::any FaParser::ClassBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitClassBlock(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ClassBlockContext* FaParser::classBlock() {
  ClassBlockContext *_localctx = _tracker.createInstance<ClassBlockContext>(_ctx, getState());
  enterRule(_localctx, 216, FaParser::RuleClassBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1287);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Id) {
      setState(1284);
      annoPart();
      setState(1289);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1291);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Internal)
      | (1ULL << FaParser::Public)
      | (1ULL << FaParser::Protected)
      | (1ULL << FaParser::Private))) != 0)) {
      setState(1290);
      publicLevel();
    }
    setState(1293);
    match(FaParser::Class);
    setState(1294);
    match(FaParser::Id);
    setState(1296);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::LessThan) {
      setState(1295);
      blockTemplates();
    }
    setState(1298);
    quotHuaL();
    setState(1304);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Internal)
      | (1ULL << FaParser::Operator)
      | (1ULL << FaParser::Public)
      | (1ULL << FaParser::Protected)
      | (1ULL << FaParser::Private)
      | (1ULL << FaParser::Static)
      | (1ULL << FaParser::Type))) != 0) || _la == FaParser::QYuanL

    || _la == FaParser::Id) {
      setState(1302);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx)) {
      case 1: {
        setState(1299);
        classVar();
        break;
      }

      case 2: {
        setState(1300);
        classFunc();
        break;
      }

      case 3: {
        setState(1301);
        importedConstructFunc();
        break;
      }

      default:
        break;
      }
      setState(1306);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1307);
    quotHuaR();
    setState(1308);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumItemContext ------------------------------------------------------------------

FaParser::EnumItemContext::EnumItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::EnumItemContext::Id() {
  return getToken(FaParser::Id, 0);
}

std::vector<FaParser::AnnoPartContext *> FaParser::EnumItemContext::annoPart() {
  return getRuleContexts<FaParser::AnnoPartContext>();
}

FaParser::AnnoPartContext* FaParser::EnumItemContext::annoPart(size_t i) {
  return getRuleContext<FaParser::AnnoPartContext>(i);
}

FaParser::QuotYuanLContext* FaParser::EnumItemContext::quotYuanL() {
  return getRuleContext<FaParser::QuotYuanLContext>(0);
}

FaParser::TypeContext* FaParser::EnumItemContext::type() {
  return getRuleContext<FaParser::TypeContext>(0);
}

FaParser::QuotYuanRContext* FaParser::EnumItemContext::quotYuanR() {
  return getRuleContext<FaParser::QuotYuanRContext>(0);
}


size_t FaParser::EnumItemContext::getRuleIndex() const {
  return FaParser::RuleEnumItem;
}


std::any FaParser::EnumItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitEnumItem(this);
  else
    return visitor->visitChildren(this);
}

FaParser::EnumItemContext* FaParser::enumItem() {
  EnumItemContext *_localctx = _tracker.createInstance<EnumItemContext>(_ctx, getState());
  enterRule(_localctx, 218, FaParser::RuleEnumItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1313);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1310);
        annoPart(); 
      }
      setState(1315);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx);
    }
    setState(1316);
    match(FaParser::Id);
    setState(1321);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::QYuanL) {
      setState(1317);
      quotYuanL();
      setState(1318);
      type();
      setState(1319);
      quotYuanR();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBlockContext ------------------------------------------------------------------

FaParser::EnumBlockContext::EnumBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::EnumBlockContext::Enum() {
  return getToken(FaParser::Enum, 0);
}

tree::TerminalNode* FaParser::EnumBlockContext::Id() {
  return getToken(FaParser::Id, 0);
}

FaParser::QuotHuaLContext* FaParser::EnumBlockContext::quotHuaL() {
  return getRuleContext<FaParser::QuotHuaLContext>(0);
}

FaParser::QuotHuaRContext* FaParser::EnumBlockContext::quotHuaR() {
  return getRuleContext<FaParser::QuotHuaRContext>(0);
}

FaParser::EndlContext* FaParser::EnumBlockContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

std::vector<FaParser::EnumItemContext *> FaParser::EnumBlockContext::enumItem() {
  return getRuleContexts<FaParser::EnumItemContext>();
}

FaParser::EnumItemContext* FaParser::EnumBlockContext::enumItem(size_t i) {
  return getRuleContext<FaParser::EnumItemContext>(i);
}

std::vector<FaParser::AnnoPartContext *> FaParser::EnumBlockContext::annoPart() {
  return getRuleContexts<FaParser::AnnoPartContext>();
}

FaParser::AnnoPartContext* FaParser::EnumBlockContext::annoPart(size_t i) {
  return getRuleContext<FaParser::AnnoPartContext>(i);
}

FaParser::PublicLevelContext* FaParser::EnumBlockContext::publicLevel() {
  return getRuleContext<FaParser::PublicLevelContext>(0);
}

FaParser::BlockTemplatesContext* FaParser::EnumBlockContext::blockTemplates() {
  return getRuleContext<FaParser::BlockTemplatesContext>(0);
}

std::vector<FaParser::Endl2Context *> FaParser::EnumBlockContext::endl2() {
  return getRuleContexts<FaParser::Endl2Context>();
}

FaParser::Endl2Context* FaParser::EnumBlockContext::endl2(size_t i) {
  return getRuleContext<FaParser::Endl2Context>(i);
}


size_t FaParser::EnumBlockContext::getRuleIndex() const {
  return FaParser::RuleEnumBlock;
}


std::any FaParser::EnumBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitEnumBlock(this);
  else
    return visitor->visitChildren(this);
}

FaParser::EnumBlockContext* FaParser::enumBlock() {
  EnumBlockContext *_localctx = _tracker.createInstance<EnumBlockContext>(_ctx, getState());
  enterRule(_localctx, 220, FaParser::RuleEnumBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1326);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Id) {
      setState(1323);
      annoPart();
      setState(1328);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1330);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Internal)
      | (1ULL << FaParser::Public)
      | (1ULL << FaParser::Protected)
      | (1ULL << FaParser::Private))) != 0)) {
      setState(1329);
      publicLevel();
    }
    setState(1332);
    match(FaParser::Enum);
    setState(1333);
    match(FaParser::Id);
    setState(1335);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::LessThan) {
      setState(1334);
      blockTemplates();
    }
    setState(1337);
    quotHuaL();

    setState(1343);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1338);
        enumItem();
        setState(1339);
        endl2(); 
      }
      setState(1345);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    }
    setState(1346);
    enumItem();
    setState(1348);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
    case 1: {
      setState(1347);
      endl2();
      break;
    }

    default:
      break;
    }
    setState(1350);
    quotHuaR();
    setState(1351);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseStmtContext ------------------------------------------------------------------

FaParser::UseStmtContext::UseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::UseStmtContext::Use() {
  return getToken(FaParser::Use, 0);
}

FaParser::IdsContext* FaParser::UseStmtContext::ids() {
  return getRuleContext<FaParser::IdsContext>(0);
}

FaParser::EndlContext* FaParser::UseStmtContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}

tree::TerminalNode* FaParser::UseStmtContext::Id() {
  return getToken(FaParser::Id, 0);
}

tree::TerminalNode* FaParser::UseStmtContext::AssignOp() {
  return getToken(FaParser::AssignOp, 0);
}


size_t FaParser::UseStmtContext::getRuleIndex() const {
  return FaParser::RuleUseStmt;
}


std::any FaParser::UseStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitUseStmt(this);
  else
    return visitor->visitChildren(this);
}

FaParser::UseStmtContext* FaParser::useStmt() {
  UseStmtContext *_localctx = _tracker.createInstance<UseStmtContext>(_ctx, getState());
  enterRule(_localctx, 222, FaParser::RuleUseStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1353);
    match(FaParser::Use);
    setState(1356);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      setState(1354);
      match(FaParser::Id);
      setState(1355);
      match(FaParser::AssignOp);
      break;
    }

    default:
      break;
    }
    setState(1358);
    ids();
    setState(1359);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceStmtContext ------------------------------------------------------------------

FaParser::NamespaceStmtContext::NamespaceStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FaParser::NamespaceStmtContext::Namespace() {
  return getToken(FaParser::Namespace, 0);
}

FaParser::IdsContext* FaParser::NamespaceStmtContext::ids() {
  return getRuleContext<FaParser::IdsContext>(0);
}

FaParser::EndlContext* FaParser::NamespaceStmtContext::endl() {
  return getRuleContext<FaParser::EndlContext>(0);
}


size_t FaParser::NamespaceStmtContext::getRuleIndex() const {
  return FaParser::RuleNamespaceStmt;
}


std::any FaParser::NamespaceStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitNamespaceStmt(this);
  else
    return visitor->visitChildren(this);
}

FaParser::NamespaceStmtContext* FaParser::namespaceStmt() {
  NamespaceStmtContext *_localctx = _tracker.createInstance<NamespaceStmtContext>(_ctx, getState());
  enterRule(_localctx, 224, FaParser::RuleNamespaceStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1361);
    match(FaParser::Namespace);
    setState(1362);
    ids();
    setState(1363);
    endl();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

FaParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FaParser::EndlContext *> FaParser::ProgramContext::endl() {
  return getRuleContexts<FaParser::EndlContext>();
}

FaParser::EndlContext* FaParser::ProgramContext::endl(size_t i) {
  return getRuleContext<FaParser::EndlContext>(i);
}

std::vector<FaParser::UseStmtContext *> FaParser::ProgramContext::useStmt() {
  return getRuleContexts<FaParser::UseStmtContext>();
}

FaParser::UseStmtContext* FaParser::ProgramContext::useStmt(size_t i) {
  return getRuleContext<FaParser::UseStmtContext>(i);
}

FaParser::NamespaceStmtContext* FaParser::ProgramContext::namespaceStmt() {
  return getRuleContext<FaParser::NamespaceStmtContext>(0);
}

std::vector<FaParser::DefTypeStmtContext *> FaParser::ProgramContext::defTypeStmt() {
  return getRuleContexts<FaParser::DefTypeStmtContext>();
}

FaParser::DefTypeStmtContext* FaParser::ProgramContext::defTypeStmt(size_t i) {
  return getRuleContext<FaParser::DefTypeStmtContext>(i);
}

std::vector<FaParser::AnnoBlockContext *> FaParser::ProgramContext::annoBlock() {
  return getRuleContexts<FaParser::AnnoBlockContext>();
}

FaParser::AnnoBlockContext* FaParser::ProgramContext::annoBlock(size_t i) {
  return getRuleContext<FaParser::AnnoBlockContext>(i);
}

std::vector<FaParser::EnumBlockContext *> FaParser::ProgramContext::enumBlock() {
  return getRuleContexts<FaParser::EnumBlockContext>();
}

FaParser::EnumBlockContext* FaParser::ProgramContext::enumBlock(size_t i) {
  return getRuleContext<FaParser::EnumBlockContext>(i);
}

std::vector<FaParser::ClassBlockContext *> FaParser::ProgramContext::classBlock() {
  return getRuleContexts<FaParser::ClassBlockContext>();
}

FaParser::ClassBlockContext* FaParser::ProgramContext::classBlock(size_t i) {
  return getRuleContext<FaParser::ClassBlockContext>(i);
}


size_t FaParser::ProgramContext::getRuleIndex() const {
  return FaParser::RuleProgram;
}


std::any FaParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ProgramContext* FaParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 226, FaParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1368);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Lf

    || _la == FaParser::Semi) {
      setState(1365);
      endl();
      setState(1370);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1374);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FaParser::Use) {
      setState(1371);
      useStmt();
      setState(1376);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1378);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FaParser::Namespace) {
      setState(1377);
      namespaceStmt();
    }
    setState(1386);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << FaParser::Annotation)
      | (1ULL << FaParser::Class)
      | (1ULL << FaParser::Enum)
      | (1ULL << FaParser::Internal)
      | (1ULL << FaParser::Public)
      | (1ULL << FaParser::Protected)
      | (1ULL << FaParser::Private)
      | (1ULL << FaParser::Type))) != 0) || _la == FaParser::Id) {
      setState(1384);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
      case 1: {
        setState(1380);
        defTypeStmt();
        break;
      }

      case 2: {
        setState(1381);
        annoBlock();
        break;
      }

      case 3: {
        setState(1382);
        enumBlock();
        break;
      }

      case 4: {
        setState(1383);
        classBlock();
        break;
      }

      default:
        break;
      }
      setState(1388);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramEntryContext ------------------------------------------------------------------

FaParser::ProgramEntryContext::ProgramEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FaParser::ProgramContext* FaParser::ProgramEntryContext::program() {
  return getRuleContext<FaParser::ProgramContext>(0);
}

tree::TerminalNode* FaParser::ProgramEntryContext::EOF() {
  return getToken(FaParser::EOF, 0);
}


size_t FaParser::ProgramEntryContext::getRuleIndex() const {
  return FaParser::RuleProgramEntry;
}


std::any FaParser::ProgramEntryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FaParserVisitor*>(visitor))
    return parserVisitor->visitProgramEntry(this);
  else
    return visitor->visitChildren(this);
}

FaParser::ProgramEntryContext* FaParser::programEntry() {
  ProgramEntryContext *_localctx = _tracker.createInstance<ProgramEntryContext>(_ctx, getState());
  enterRule(_localctx, 228, FaParser::RuleProgramEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1389);
    program();
    setState(1390);
    match(FaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void FaParser::initialize() {
  std::call_once(faparserParserOnceFlag, faparserParserInitialize);
}
